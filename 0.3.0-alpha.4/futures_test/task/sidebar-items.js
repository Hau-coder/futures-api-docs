initSidebarItems({"fn":[["no_spawn_context","Create a new `task::Context` where the waker will ignore any calls to `wake` while the spawner will panic if used."],["noop_context","Create a new `task::Context` where the waker and spawner will both ignore any uses."],["noop_local_waker","Create a new `LocalWaker` referencing a singleton instance of [`NoopWake`]."],["noop_local_waker_ref","Get a thread local reference to a `LocalWaker` referencing a singleton instance of [`NoopWake`]."],["noop_spawner_mut","Get a reference to a singleton instance of [`NoopSpawner`]."],["panic_context","Create a new `task::Context` where both the waker and spawner will panic if used."],["panic_local_waker","Create a new `LocalWaker` referencing a singleton instance of [`PanicWake`]."],["panic_local_waker_ref","Get a thread local reference to a `LocalWaker` referencing a singleton instance of [`PanicWake`]."],["panic_spawner_mut","Get a reference to a singleton instance of [`PanicSpawner`]."]],"struct":[["NoopSpawner","An implementation of `Spawn` that discards spawned futures when used."],["NoopWake","An implementation of `Wake` that does nothing when woken."],["PanicSpawner","An implementation of `Spawn` that panics when used."],["PanicWake","An implementation of `Wake` that panics when woken."],["RecordSpawner","An implementation of `Spawn` that records any `Future`s spawned on it."],["WakeCounter","An implementation of `Wake` that tracks how many times it has been woken."]]});