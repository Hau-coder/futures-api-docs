var N = null;var searchIndex = {};
searchIndex["either"]={"doc":"The enum [`Either`] with variants `Left` and `Right` is a general purpose sum type with two cases.","items":[[4,"Either","either","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",N,N],[13,"Left","","A value of type `L`.",0,N],[13,"Right","","A value of type `R`.",0,N],[11,"clone","","",0,[[["self"]],["either"]]],[11,"eq","","",0,[[["self"],["either"]],["bool"]]],[11,"ne","","",0,[[["self"],["either"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["either"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["either"]],["bool"]]],[11,"le","","",0,[[["self"],["either"]],["bool"]]],[11,"gt","","",0,[[["self"],["either"]],["bool"]]],[11,"ge","","",0,[[["self"],["either"]],["bool"]]],[11,"cmp","","",0,[[["self"],["either"]],["ordering"]]],[11,"hash","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"is_left","","Return true if the value is the `Left` variant.",0,[[["self"]],["bool"]]],[11,"is_right","","Return true if the value is the `Right` variant.",0,[[["self"]],["bool"]]],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,[[["self"]],["option"]]],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,[[["self"]],["option"]]],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,[[["self"]],["either"]]],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,[[["self"]],["either"]]],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,[[["self"]],["either"]]],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,[[["self"],["f"]],["either"]]],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,[[["self"],["f"]],["either"]]],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,[[["self"],["f"],["g"]],["t"]]],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,[[["self"],["ctx"],["f"],["g"]],["t"]]],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,[[["self"],["f"]],["either"]]],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,[[["self"],["f"]],["either"]]],[11,"into_iter","","Convert the inner value to an iterator.",0,[[["self"]],["either"]]],[11,"from","","",0,[[["result"]],["self"]]],[11,"into","","",0,[[["self"]],["result"]]],[11,"extend","","",0,[[["self"],["t"]]]],[11,"next","","",0,[[["self"]],["option"]]],[11,"size_hint","","",0,N],[11,"fold","","",0,[[["self"],["acc"],["g"]],["acc"]]],[11,"count","","",0,[[["self"]],["usize"]]],[11,"last","","",0,[[["self"]],["option"]]],[11,"nth","","",0,[[["self"],["usize"]],["option"]]],[11,"collect","","",0,[[["self"]],["b"]]],[11,"all","","",0,[[["self"],["f"]],["bool"]]],[11,"next_back","","",0,[[["self"]],["option"]]],[11,"read","","",0,N],[11,"read_to_end","","",0,[[["self"],["vec"]],["result",["usize"]]]],[11,"fill_buf","","",0,[[["self"]],["result"]]],[11,"consume","","",0,[[["self"],["usize"]]]],[11,"write","","",0,N],[11,"flush","","",0,[[["self"]],["result"]]],[11,"as_ref","","",0,[[["self"]],["target"]]],[11,"as_mut","","",0,[[["self"]],["target"]]],[11,"deref","","",0,N],[11,"deref_mut","","",0,N],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[14,"try_left","","Macro for unwrapping the left side of an `Either`, which fails early with the opposite side. Can only be used in functions that return `Either` because of the early return of `Right` that it provides.",N,N],[14,"try_right","","Dual to `try_left!`, see its documentation for more information.",N,N],[11,"into_iter","","",0,[[["self"]],["i"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]]],"paths":[[4,"Either"]]};
searchIndex["futures"]={"doc":"Abstractions for asynchronous programming.","items":[[14,"try_ready","futures","Extracts the successful type of a `Poll<Result<T, E>>`.",N,N],[14,"try_poll","","Extracts `Poll<T>` from `Poll<Result<T, E>>`.",N,N],[14,"ready","","Extracts the successful type of a `Poll<T>`.",N,N],[14,"join","","Polls multiple futures simultaneously, returning a tuple of all results once complete.",N,N],[14,"try_join","","Polls multiple futures simultaneously, resolving to a [`Result`] containing either a tuple of the successful outputs or an error.",N,N],[14,"select","","Polls multiple futures simultaneously, executing the branch for the future that finishes first.",N,N],[14,"pending","","A macro which yields to the event loop once.",N,N],[14,"poll","","A macro which returns the result of polling a future once within the current `async` context.",N,N],[14,"spawn","","Spawns a task onto the context's executor that polls the given future with output `()` to completion.",N,N],[14,"spawn_with_handle","","Spawns a task onto the context's executor that polls the given future to completion and returns a future that resolves to the spawned future's output.",N,N],[0,"channel","","Cross-task communication.",N,N],[0,"oneshot","futures::channel","A channel for sending a single message between asynchronous tasks.",N,N],[3,"Receiver","futures::channel::oneshot","A future for a value that will be provided by another asynchronous task.",N,N],[3,"Sender","","A means of transmitting a single value to another task.",N,N],[5,"channel","","Creates a new one-shot channel for sending values across asynchronous tasks.",N,N],[3,"Canceled","","Error returned from a `Receiver` when the corresponding `Sender` is dropped.",N,N],[0,"mpsc","futures::channel","A multi-producer, single-consumer queue for sending values across asynchronous tasks.",N,N],[3,"Sender","futures::channel::mpsc","The transmission end of a bounded mpsc channel.",N,N],[3,"UnboundedSender","","The transmission end of an unbounded mpsc channel.",N,N],[3,"Receiver","","The receiving end of a bounded mpsc channel.",N,N],[3,"UnboundedReceiver","","The receiving end of an unbounded mpsc channel.",N,N],[3,"SendError","","The error type for `Sender`s used as `Sink`s.",N,N],[3,"TrySendError","","The error type returned from `try_send`.",N,N],[3,"TryRecvError","","The error type returned from `try_next`.",N,N],[5,"channel","","Creates a bounded mpsc channel for communicating between asynchronous tasks.",N,N],[5,"unbounded","","Creates an unbounded mpsc channel for communicating between asynchronous tasks.",N,N],[0,"executor","futures","Task execution.",N,N],[3,"BlockingStream","futures::executor","An iterator which blocks on values from a stream until they become available.",N,N],[3,"Enter","","Represents an executor context.",N,N],[3,"EnterError","","An error returned by `enter` if an execution scope has already been entered.",N,N],[3,"LocalSpawn","","A handle to a `LocalPool` that implements `Spawn`.",N,N],[3,"LocalPool","","A single-threaded task pool for polling futures to completion.",N,N],[3,"ThreadPool","","A general-purpose thread pool for scheduling tasks that poll futures to completion.",N,N],[3,"ThreadPoolBuilder","","Thread pool configuration object.",N,N],[5,"block_on","","Run a future to completion on the current thread.",N,N],[5,"block_on_stream","","Turn a stream into a blocking iterator.",N,[[["s"]],["blockingstream"]]],[5,"enter","","Marks the current thread as being within the dynamic extent of an executor.",N,[[],["result",["enter","entererror"]]]],[0,"future","futures","Asynchronous values.",N,N],[8,"Future","futures::future","A future represents an asychronous computation.",N,N],[16,"Output","","The result of the `Future`.",0,N],[10,"poll","","Attempt to resolve the future to a final value, registering the current task for wakeup if the value is not yet available.",0,[[["pinmut"],["context"]],["poll"]]],[8,"TryFuture","","A convenience for futures that return `Result` values that includes a variety of adapters tailored to such futures.",N,N],[16,"Ok","","The type of successful values yielded by this future",1,N],[16,"Error","","The type of failures yielded by this future",1,N],[10,"try_poll","","Poll this `TryFuture` as if it were a `Future`.",1,[[["pinmut"],["context"]],["poll",["result"]]]],[3,"FutureObj","","A custom trait object for polling futures, roughly akin to `Box<dyn Future<Output = T> + Send + 'a>`.",N,N],[3,"LocalFutureObj","","A custom trait object for polling futures, roughly akin to `Box<dyn Future<Output = T> + 'a>`.",N,N],[8,"UnsafeFutureObj","","A custom implementation of a future trait object for `FutureObj`, providing a hand-rolled vtable.",N,N],[10,"into_raw","","Convert an owned instance into a (conceptually owned) void pointer.",2,N],[10,"poll","","Poll the future represented by the given void pointer.",2,N],[10,"drop","","Drops the future represented by the given void pointer.",2,N],[5,"empty","","Creates a future which never resolves, representing a computation that never finishes.",N,[[],["empty"]]],[3,"Empty","","A future which is never resolved.",N,N],[5,"lazy","","Creates a new future that allows delayed execution of a closure.",N,[[["f"]],["lazy"]]],[3,"Lazy","","A future which, when polled, invokes a closure and yields its result.",N,N],[5,"maybe_done","","Wraps a future into a `MaybeDone`",N,[[["fut"]],["maybedone"]]],[4,"MaybeDone","","A future that may have completed.",N,N],[13,"Future","","A not-yet-completed future",3,N],[13,"Done","","The output of the completed future",3,N],[13,"Gone","","The empty variant after the result of a [`MaybeDone`] has been taken using the `take_output` method.",3,N],[5,"poll_fn","","Creates a new future wrapping around a function returning [`Poll`].",N,[[["f"]],["pollfn"]]],[3,"PollFn","","A future which wraps a function returning [`Poll`].",N,N],[5,"ready","","Create a future that is immediately ready with a value.",N,[[["t"]],["ready"]]],[3,"Ready","","A future that is immediately ready with a value",N,N],[3,"OptionFuture","","A future representing a value which may or may not be present.",N,N],[8,"FutureExt","","An extension trait for `Future`s that provides a variety of convenient adapters.",N,N],[11,"map","","Map this future's output to a different type, returning a new future of the resulting type.",4,[[["self"],["f"]],["map"]]],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",4,[[["self"],["f"]],["then"]]],[11,"join","","Joins the result of two futures, waiting for them both to complete.",4,[[["self"],["fut2"]],["join"]]],[11,"join3","","Same as `join`, but with more futures.",4,[[["self"],["fut2"],["fut3"]],["join3"]]],[11,"join4","","Same as `join`, but with more futures.",4,[[["self"],["fut2"],["fut3"],["fut4"]],["join4"]]],[11,"join5","","Same as `join`, but with more futures.",4,[[["self"],["fut2"],["fut3"],["fut4"],["fut5"]],["join5"]]],[11,"into_stream","","Convert this future into a single element stream.",4,[[["self"]],["intostream"]]],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",4,[[["self"]],["flatten"]]],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",4,[[["self"]],["flattenstream"]]],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",4,[[["self"]],["fuse"]]],[11,"inspect","","Do something with the output of a future before passing it on.",4,[[["self"],["f"]],["inspect"]]],[11,"catch_unwind","","Catches unwinding panics while polling the future.",4,[[["self"]],["catchunwind"]]],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",4,[[["self"]],["shared"]]],[11,"boxed","","Wrap the future in a Box, pinning it.",4,[[["self"]],["pinbox"]]],[11,"unit_error","","Turns a `Future` into a `TryFuture` with `Error = ()`.",4,[[["self"]],["uniterror"]]],[11,"with_spawner","","Assigns the provided `Spawn` to be used when spawning tasks from within the future.",4,[[["self"],["sp"]],["withspawner"]]],[11,"poll_unpin","","A convenience for calling `Future::poll` on `Unpin` future types.",4,[[["self"],["context"]],["poll"]]],[3,"FlattenStream","","Future for the `flatten_stream` combinator, flattening a future-of-a-stream to get just the result of the final stream as a stream.",N,N],[3,"Flatten","","Future for the `flatten` combinator.",N,N],[3,"Fuse","","A future which \"fuses\" a future once it's been resolved.",N,N],[3,"Inspect","","Do something with the item of a future, passing it on.",N,N],[3,"IntoStream","","A type which converts a `Future` into a `Stream` containing a single element.",N,N],[3,"Join","","Future for the `join` combinator, waiting for two futures to complete.",N,N],[3,"Join3","","Future for the `join3` combinator, waiting for three futures to complete.",N,N],[3,"Join4","","Future for the `join4` combinator, waiting for four futures to complete.",N,N],[3,"Join5","","Future for the `join5` combinator, waiting for five futures to complete.",N,N],[3,"Map","","Future for the `map` combinator, changing the type of a future.",N,N],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",N,N],[3,"WithSpawner","","Future for the `with_spawner` combinator, assigning a [`Spawn`] to be used when spawning other futures.",N,N],[5,"abortable","","Creates a new `Abortable` future and a `AbortHandle` which can be used to stop it.",N,N],[3,"Abortable","","A future which can be remotely short-circuited using an `AbortHandle`.",N,N],[3,"AbortHandle","","A handle to a `Abortable` future.",N,N],[3,"AbortRegistration","","A registration handle for a `Abortable` future. Values of this type can be acquired from `AbortHandle::new` and are used in calls to `Abortable::new`.",N,N],[3,"Aborted","","Indicator that the `Abortable` future was aborted.",N,N],[3,"CatchUnwind","","Future for the `catch_unwind` combinator.",N,N],[3,"Shared","","A future that is cloneable and can be polled in multiple threads. Use `Future::shared()` method to convert any future into a `Shared` future.",N,N],[8,"TryFutureExt","","Adapters specific to [`Result`]-returning futures",N,N],[11,"flatten_sink","","Flattens the execution of this future when the successful result of this future is a [`Sink`].",5,[[["self"]],["flattensink"]]],[11,"map_ok","","Maps this future's success value to a different value.",5,[[["self"],["f"]],["mapok"]]],[11,"map_err","","Maps this future's error value to a different value.",5,[[["self"],["f"]],["maperr"]]],[11,"err_into","","Maps this future's `Error` to a new error type using the `Into` trait.",5,[[["self"]],["errinto"]]],[11,"and_then","","Executes another future after this one resolves successfully. The success value is passed to a closure to create this subsequent future.",5,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Executes another future if this one resolves to an error. The error value is passed to a closure to create this subsequent future.",5,[[["self"],["f"]],["orelse"]]],[11,"unwrap_or_else","","Unwraps this future's ouput, producing a future with this future's `Ok` type as its `Output` type.",5,[[["self"],["f"]],["unwraporelse"]]],[11,"into_future","","Wraps a [`TryFuture`] into a type that implements `Future`.",5,[[["self"]],["intofuture"]]],[11,"try_join","","Joins the result of two futures, waiting for them both to complete or for one to produce an error.",5,[[["self"],["fut2"]],["tryjoin"]]],[11,"try_join3","","Same as `try_join`, but with more futures.",5,[[["self"],["fut2"],["fut3"]],["tryjoin3"]]],[11,"try_join4","","Same as `try_join`, but with more futures.",5,[[["self"],["fut2"],["fut3"],["fut4"]],["tryjoin4"]]],[11,"try_join5","","Same as `try_join`, but with more futures.",5,[[["self"],["fut2"],["fut3"],["fut4"],["fut5"]],["tryjoin5"]]],[3,"AndThen","","Future for the `and_then` combinator.",N,N],[3,"ErrInto","","Future for the `err_into` combinator.",N,N],[3,"FlattenSink","","Future for the `flatten_sink` combinator.",N,N],[3,"IntoFuture","","Future for the `into_future` combinator.",N,N],[3,"MapErr","","Future for the `map_err` combinator.",N,N],[3,"MapOk","","Future for the `map_ok` combinator.",N,N],[3,"OrElse","","Future for the `or_else` combinator.",N,N],[3,"UnwrapOrElse","","Future for the `unwrap_or_else` combinator.",N,N],[3,"TryJoin","","Future for the `try_join` combinator, waiting for two futures to complete or for one to error.",N,N],[3,"TryJoin3","","Future for the `try_join3` combinator, waiting for three futures to complete or for one to error.",N,N],[3,"TryJoin4","","Future for the `try_join4` combinator, waiting for four futures to complete or for one to error.",N,N],[3,"TryJoin5","","Future for the `try_join5` combinator, waiting for five futures to complete or for one to error.",N,N],[0,"io","futures","Asynchronous I/O.",N,N],[3,"Error","futures::io","The error type for I/O operations of the [`Read`], [`Write`], [`Seek`], and associated traits.",N,N],[3,"Initializer","","A type used to conditionally initialize buffers passed to `AsyncRead` methods, modeled after `std`.",N,N],[3,"IoVec","","A specialized byte slice type for performing vectored I/O operations.",N,N],[4,"ErrorKind","","A list specifying general categories of I/O error.",N,N],[13,"NotFound","","An entity was not found, often a file.",6,N],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",6,N],[13,"ConnectionRefused","","The connection was refused by the remote server.",6,N],[13,"ConnectionReset","","The connection was reset by the remote server.",6,N],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",6,N],[13,"NotConnected","","The network operation failed because it was not connected yet.",6,N],[13,"AddrInUse","","A socket address could not be bound because the address is already in use elsewhere.",6,N],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not local.",6,N],[13,"BrokenPipe","","The operation failed because a pipe was closed.",6,N],[13,"AlreadyExists","","An entity already exists, often a file.",6,N],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was requested to not occur.",6,N],[13,"InvalidInput","","A parameter was incorrect.",6,N],[13,"InvalidData","","Data not valid for the operation were encountered.",6,N],[13,"TimedOut","","The I/O operation's timeout expired, causing it to be canceled.",6,N],[13,"WriteZero","","An error returned when an operation could not be completed because a call to [`write`] returned [`Ok(0)`].",6,N],[13,"Interrupted","","This operation was interrupted.",6,N],[13,"Other","","Any I/O error not part of this list.",6,N],[13,"UnexpectedEof","","An error returned when an operation could not be completed because an \"end of file\" was reached prematurely.",6,N],[8,"AsyncRead","","Read bytes asynchronously.",N,N],[11,"initializer","","Determines if this `AsyncRead`er can work with buffers of uninitialized memory.",7,[[["self"]],["initializer"]]],[10,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",7,N],[11,"poll_vectored_read","","Attempt to read from the `AsyncRead` into `vec` using vectored IO operations.",7,N],[8,"AsyncWrite","","Write bytes asynchronously.",N,N],[10,"poll_write","","Attempt to write bytes from `buf` into the object.",8,N],[11,"poll_vectored_write","","Attempt to write bytes from `vec` into the object using vectored IO operations.",8,N],[10,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",8,[[["self"],["context"]],["poll",["result"]]]],[10,"poll_close","","Attempt to close the object.",8,[[["self"],["context"]],["poll",["result"]]]],[6,"Result","","A specialized `Result` type for I/O operations.",N,N],[8,"AsyncReadExt","","An extension trait which adds utility methods to `AsyncRead` types.",N,N],[11,"copy_into","","Creates a future which copies all the bytes from one object to another.",9,[[["self"],["w"]],["copyinto"]]],[11,"read","","Tries to read some bytes directly into the given `buf` in asynchronous manner, returning a future type.",9,N],[11,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if end of file (EOF) is hit sooner.",9,N],[11,"read_to_end","","Creates a future which will read all the bytes from this `AsyncRead`.",9,[[["self"],["vec"]],["readtoend"]]],[11,"split","","Helper method for splitting this read/write object into two halves.",9,N],[8,"AsyncWriteExt","","An extension trait which adds utility methods to `AsyncWrite` types.",N,N],[11,"flush","","Creates a future which will entirely flush this `AsyncWrite`.",10,[[["self"]],["flush"]]],[11,"close","","Creates a future which will entirely close this `AsyncWrite`.",10,[[["self"]],["close"]]],[11,"write_all","","Write data into this object.",10,N],[3,"AllowStdIo","","A simple wrapper type which allows types which implement only implement `std::io::Read` or `std::io::Write` to be used in contexts which expect an `AsyncRead` or `AsyncWrite`.",N,N],[3,"Close","","A future used to fully close an I/O object.",N,N],[3,"CopyInto","","A future which will copy all data from a reader into a writer.",N,N],[3,"Flush","","A future used to fully flush an I/O object.",N,N],[3,"Read","","A future which can be used to easily read available number of bytes to fill a buffer.",N,N],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",N,N],[3,"ReadHalf","","The readable half of an object returned from `AsyncRead::split`.",N,N],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",N,N],[3,"Window","","A owned window around an underlying buffer.",N,N],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",N,N],[3,"WriteHalf","","The writable half of an object returned from `AsyncRead::split`.",N,N],[0,"prelude","futures","A \"prelude\" for crates using the `futures` crate.",N,N],[8,"Future","futures::prelude","A future represents an asychronous computation.",N,N],[16,"Output","","The result of the `Future`.",0,N],[10,"poll","","Attempt to resolve the future to a final value, registering the current task for wakeup if the value is not yet available.",0,[[["pinmut"],["context"]],["poll"]]],[8,"TryFuture","","A convenience for futures that return `Result` values that includes a variety of adapters tailored to such futures.",N,N],[16,"Ok","","The type of successful values yielded by this future",1,N],[16,"Error","","The type of failures yielded by this future",1,N],[10,"try_poll","","Poll this `TryFuture` as if it were a `Future`.",1,[[["pinmut"],["context"]],["poll",["result"]]]],[8,"FutureExt","","An extension trait for `Future`s that provides a variety of convenient adapters.",N,N],[11,"map","","Map this future's output to a different type, returning a new future of the resulting type.",4,[[["self"],["f"]],["map"]]],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",4,[[["self"],["f"]],["then"]]],[11,"join","","Joins the result of two futures, waiting for them both to complete.",4,[[["self"],["fut2"]],["join"]]],[11,"join3","","Same as `join`, but with more futures.",4,[[["self"],["fut2"],["fut3"]],["join3"]]],[11,"join4","","Same as `join`, but with more futures.",4,[[["self"],["fut2"],["fut3"],["fut4"]],["join4"]]],[11,"join5","","Same as `join`, but with more futures.",4,[[["self"],["fut2"],["fut3"],["fut4"],["fut5"]],["join5"]]],[11,"into_stream","","Convert this future into a single element stream.",4,[[["self"]],["intostream"]]],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",4,[[["self"]],["flatten"]]],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",4,[[["self"]],["flattenstream"]]],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",4,[[["self"]],["fuse"]]],[11,"inspect","","Do something with the output of a future before passing it on.",4,[[["self"],["f"]],["inspect"]]],[11,"catch_unwind","","Catches unwinding panics while polling the future.",4,[[["self"]],["catchunwind"]]],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",4,[[["self"]],["shared"]]],[11,"boxed","","Wrap the future in a Box, pinning it.",4,[[["self"]],["pinbox"]]],[11,"unit_error","","Turns a `Future` into a `TryFuture` with `Error = ()`.",4,[[["self"]],["uniterror"]]],[11,"with_spawner","","Assigns the provided `Spawn` to be used when spawning tasks from within the future.",4,[[["self"],["sp"]],["withspawner"]]],[11,"poll_unpin","","A convenience for calling `Future::poll` on `Unpin` future types.",4,[[["self"],["context"]],["poll"]]],[8,"TryFutureExt","","Adapters specific to [`Result`]-returning futures",N,N],[11,"flatten_sink","","Flattens the execution of this future when the successful result of this future is a [`Sink`].",5,[[["self"]],["flattensink"]]],[11,"map_ok","","Maps this future's success value to a different value.",5,[[["self"],["f"]],["mapok"]]],[11,"map_err","","Maps this future's error value to a different value.",5,[[["self"],["f"]],["maperr"]]],[11,"err_into","","Maps this future's `Error` to a new error type using the `Into` trait.",5,[[["self"]],["errinto"]]],[11,"and_then","","Executes another future after this one resolves successfully. The success value is passed to a closure to create this subsequent future.",5,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Executes another future if this one resolves to an error. The error value is passed to a closure to create this subsequent future.",5,[[["self"],["f"]],["orelse"]]],[11,"unwrap_or_else","","Unwraps this future's ouput, producing a future with this future's `Ok` type as its `Output` type.",5,[[["self"],["f"]],["unwraporelse"]]],[11,"into_future","","Wraps a [`TryFuture`] into a type that implements `Future`.",5,[[["self"]],["intofuture"]]],[11,"try_join","","Joins the result of two futures, waiting for them both to complete or for one to produce an error.",5,[[["self"],["fut2"]],["tryjoin"]]],[11,"try_join3","","Same as `try_join`, but with more futures.",5,[[["self"],["fut2"],["fut3"]],["tryjoin3"]]],[11,"try_join4","","Same as `try_join`, but with more futures.",5,[[["self"],["fut2"],["fut3"],["fut4"]],["tryjoin4"]]],[11,"try_join5","","Same as `try_join`, but with more futures.",5,[[["self"],["fut2"],["fut3"],["fut4"],["fut5"]],["tryjoin5"]]],[8,"Stream","","A stream of values produced asynchronously.",N,N],[16,"Item","","Values yielded by the stream.",11,N],[10,"poll_next","","Attempt to pull out the next value of this stream, registering the current task for wakeup if the value is not yet available, and returning `None` if the stream is exhausted.",11,[[["pinmut"],["context"]],["poll",["option"]]]],[8,"TryStream","","A convenience for streams that return `Result` values that includes a variety of adapters tailored to such futures.",N,N],[16,"Ok","","The type of successful values yielded by this future",12,N],[16,"Error","","The type of failures yielded by this future",12,N],[10,"try_poll_next","","Poll this `TryStream` as if it were a `Stream`.",12,[[["pinmut"],["context"]],["poll",["option"]]]],[8,"StreamExt","","An extension trait for `Stream`s that provides a variety of convenient combinator functions.",N,N],[11,"next","","Creates a future that resolves to the next item in the stream.",13,[[["self"]],["next"]]],[11,"into_future","","Converts this stream into a future of `(next_item, tail_of_stream)`. If the stream terminates, then the next item is [`None`].",13,[[["self"]],["streamfuture"]]],[11,"map","","Maps this stream's items to a different type, returning a new stream of the resulting type.",13,[[["self"],["f"]],["map"]]],[11,"filter","","Filters the values produced by this stream according to the provided asynchronous predicate.",13,[[["self"],["f"]],["filter"]]],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type according to the provided asynchronous closure.",13,[[["self"],["f"]],["filtermap"]]],[11,"then","","Computes from this stream's items new items of a different type using an asynchronous closure.",13,[[["self"],["f"]],["then"]]],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",13,[[["self"]],["collect"]]],[11,"concat","","Concatenate all items of a stream into a single extendable destination, returning a future representing the end result.",13,[[["self"]],["concat"]]],[11,"fold","","Execute an accumulating asynchronous computation over a stream, collecting all the values into one final result.",13,[[["self"],["t"],["f"]],["fold"]]],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",13,[[["self"]],["flatten"]]],[11,"skip_while","","Skip elements on this stream while the provided asynchronous predicate resolves to `true`.",13,[[["self"],["f"]],["skipwhile"]]],[11,"take_while","","Take elements from this stream while the provided asynchronous predicate resolves to `true`.",13,[[["self"],["f"]],["takewhile"]]],[11,"for_each","","Runs this stream to completion, executing the provided asynchronous closure for each element on the stream.",13,[[["self"],["f"]],["foreach"]]],[11,"for_each_concurrent","","Runs this stream to completion, executing the provided asynchronous closure for each element on the stream concurrently as elements become available.",13,[[["self"],["impl into<option<usize>>"],["f"]],["foreachconcurrent"]]],[11,"take","","Creates a new stream of at most `n` items of the underlying stream.",13,[[["self"],["u64"]],["take"]]],[11,"skip","","Creates a new stream which skips `n` items of the underlying stream.",13,[[["self"],["u64"]],["skip"]]],[11,"fuse","","Fuse a stream such that `poll_next` will never again be called once it has finished.",13,[[["self"]],["fuse"]]],[11,"by_ref","","Borrows a stream, rather than consuming it.",13,[[["self"]],["self"]]],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",13,[[["self"]],["catchunwind"]]],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",13,[[["self"],["usize"]],["buffered"]]],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",13,[[["self"],["usize"]],["bufferunordered"]]],[11,"zip","","An adapter for zipping two streams together.",13,[[["self"],["st"]],["zip"]]],[11,"chain","","Adapter for chaining two stream.",13,[[["self"],["st"]],["chain"]]],[11,"peekable","","Creates a new stream which exposes a `peek` method.",13,[[["self"]],["peekable"]]],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",13,[[["self"],["usize"]],["chunks"]]],[11,"select","","This combinator will attempt to pull items from both streams. Each stream will be polled in a round-robin fashion, and whenever a stream is ready to yield an item that item is yielded.",13,[[["self"],["st"]],["select"]]],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",13,[[["self"],["s"]],["forward"]]],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",13,N],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",13,[[["self"],["f"]],["inspect"]]],[11,"left_stream","","Wrap this stream in an `Either` stream, making it the left-hand variant of that `Either`.",13,[[["self"]],["either"]]],[11,"right_stream","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",13,[[["self"]],["either"]]],[11,"poll_next_unpin","","A convenience method for calling [`Stream::poll_next`] on [`Unpin`] stream types.",13,[[["self"],["context"]],["poll",["option"]]]],[8,"TryStreamExt","","Adapters specific to `Result`-returning streams",N,N],[11,"err_into","","Wraps the current stream in a new stream which converts the error type into the one provided.",14,[[["self"]],["errinto"]]],[11,"map_ok","","Wraps the current stream in a new stream which maps the success value using the provided closure.",14,[[["self"],["f"]],["mapok"]]],[11,"map_err","","Wraps the current stream in a new stream which maps the error value using the provided closure.",14,[[["self"],["f"]],["maperr"]]],[11,"into_stream","","Wraps a [`TryStream`] into a type that implements `Stream`",14,[[["self"]],["intostream"]]],[11,"try_next","","Creates a future that attempts to resolve the next item in the stream. If an error is encountered before the next item, the error is returned instead.",14,[[["self"]],["trynext"]]],[11,"try_for_each","","Attempts to run this stream to completion, executing the provided asynchronous closure for each element on the stream.",14,[[["self"],["f"]],["tryforeach"]]],[11,"try_skip_while","","Skip elements on this stream while the provided asynchronous predicate resolves to `true`.",14,[[["self"],["f"]],["tryskipwhile"]]],[11,"try_for_each_concurrent","","Attempts to run this stream to completion, executing the provided asynchronous closure for each element on the stream concurrently as elements become available, exiting as soon as an error occurs.",14,[[["self"],["impl into<option<usize>>"],["f"]],["tryforeachconcurrent"]]],[11,"try_collect","","Attempt to Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",14,[[["self"]],["trycollect"]]],[11,"try_filter_map","","Attempt to filter the values produced by this stream while simultaneously mapping them to a different type according to the provided asynchronous closure.",14,[[["self"],["f"]],["tryfiltermap"]]],[11,"try_fold","","Attempt to execute an accumulating asynchronous computation over a stream, collecting all the values into one final result.",14,[[["self"],["t"],["f"]],["tryfold"]]],[11,"try_buffer_unordered","","Attempt to execute several futures from a stream concurrently.",14,[[["self"],["usize"]],["trybufferunordered"]]],[4,"Poll","","Indicates whether a value is available or if the current task has been scheduled to receive a wakeup instead.",N,N],[13,"Ready","","Represents that a value is immediately ready.",15,N],[13,"Pending","","Represents that a value is not ready yet.",15,N],[8,"SpawnExt","","Extension trait for `Spawn`",N,N],[11,"spawn","","Spawns a task that polls the given future with output `()` to completion.",16,[[["self"],["fut"]],["result",["spawnerror"]]]],[11,"spawn_with_handle","","Spawns a task that polls the given future to completion and returns a future that resolves to the spawned future's output.",16,[[["self"],["fut"]],["result",["joinhandle","spawnerror"]]]],[8,"Sink","","A `Sink` is a value into which other values can be sent, asynchronously.",N,N],[16,"SinkItem","","The type of value that the sink accepts.",17,N],[16,"SinkError","","The type of value produced by the sink when an error occurs.",17,N],[10,"poll_ready","","Attempts to prepare the `Sink` to receive a value.",17,[[["pinmut"],["context"]],["poll",["result"]]]],[10,"start_send","","Begin the process of sending a value to the sink. Each call to this function must be proceeded by a successful call to `poll_ready` which returned `Ok(Poll::Ready(()))`.",17,N],[10,"poll_flush","","Flush any remaining output from this sink.",17,[[["pinmut"],["context"]],["poll",["result"]]]],[10,"poll_close","","Flush any remaining output and close this sink, if necessary.",17,[[["pinmut"],["context"]],["poll",["result"]]]],[8,"SinkExt","","An extension trait for `Sink`s that provides a variety of convenient combinator functions.",N,N],[11,"with","","Composes a function in front of the sink.",18,[[["self"],["f"]],["with"]]],[11,"with_flat_map","","Composes a function in front of the sink.",18,[[["self"],["f"]],["withflatmap"]]],[11,"sink_map_err","","Transforms the error returned by the sink.",18,[[["self"],["f"]],["sinkmaperr"]]],[11,"sink_err_into","","Map this sink's error to a different error type using the `Into` trait.",18,[[["self"]],["sinkerrinto"]]],[11,"buffer","","Adds a fixed-size buffer to the current sink.",18,[[["self"],["usize"]],["buffer"]]],[11,"close","","Close the sink.",18,[[["self"]],["close"]]],[11,"fanout","","Fanout items to multiple sinks.",18,[[["self"],["si"]],["fanout"]]],[11,"flush","","Flush the sync, processing all pending items.",18,[[["self"]],["flush"]]],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",18,N],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",18,[[["self"],["st"]],["sendall"]]],[11,"left_sink","","Wrap this sink in an `Either` sink, making it the left-hand variant of that `Either`.",18,[[["self"]],["either"]]],[11,"right_sink","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",18,[[["self"]],["either"]]],[8,"AsyncRead","","Read bytes asynchronously.",N,N],[11,"initializer","","Determines if this `AsyncRead`er can work with buffers of uninitialized memory.",7,[[["self"]],["initializer"]]],[10,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",7,N],[11,"poll_vectored_read","","Attempt to read from the `AsyncRead` into `vec` using vectored IO operations.",7,N],[8,"AsyncWrite","","Write bytes asynchronously.",N,N],[10,"poll_write","","Attempt to write bytes from `buf` into the object.",8,N],[11,"poll_vectored_write","","Attempt to write bytes from `vec` into the object using vectored IO operations.",8,N],[10,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",8,[[["self"],["context"]],["poll",["result"]]]],[10,"poll_close","","Attempt to close the object.",8,[[["self"],["context"]],["poll",["result"]]]],[8,"AsyncReadExt","","An extension trait which adds utility methods to `AsyncRead` types.",N,N],[11,"copy_into","","Creates a future which copies all the bytes from one object to another.",9,[[["self"],["w"]],["copyinto"]]],[11,"read","","Tries to read some bytes directly into the given `buf` in asynchronous manner, returning a future type.",9,N],[11,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if end of file (EOF) is hit sooner.",9,N],[11,"read_to_end","","Creates a future which will read all the bytes from this `AsyncRead`.",9,[[["self"],["vec"]],["readtoend"]]],[11,"split","","Helper method for splitting this read/write object into two halves.",9,N],[8,"AsyncWriteExt","","An extension trait which adds utility methods to `AsyncWrite` types.",N,N],[11,"flush","","Creates a future which will entirely flush this `AsyncWrite`.",10,[[["self"]],["flush"]]],[11,"close","","Creates a future which will entirely close this `AsyncWrite`.",10,[[["self"]],["close"]]],[11,"write_all","","Write data into this object.",10,N],[0,"sink","futures","Asynchronous sinks.",N,N],[8,"Sink","futures::sink","A `Sink` is a value into which other values can be sent, asynchronously.",N,N],[16,"SinkItem","","The type of value that the sink accepts.",17,N],[16,"SinkError","","The type of value produced by the sink when an error occurs.",17,N],[10,"poll_ready","","Attempts to prepare the `Sink` to receive a value.",17,[[["pinmut"],["context"]],["poll",["result"]]]],[10,"start_send","","Begin the process of sending a value to the sink. Each call to this function must be proceeded by a successful call to `poll_ready` which returned `Ok(Poll::Ready(()))`.",17,N],[10,"poll_flush","","Flush any remaining output from this sink.",17,[[["pinmut"],["context"]],["poll",["result"]]]],[10,"poll_close","","Flush any remaining output and close this sink, if necessary.",17,[[["pinmut"],["context"]],["poll",["result"]]]],[3,"Close","","Future for the `close` combinator, which polls the sink until all data has been closed.",N,N],[3,"Flush","","Future for the `flush` combinator, which polls the sink until all data has been flushed.",N,N],[3,"Send","","Future for the `Sink::send` combinator, which sends a value to a sink and then waits until the sink has fully flushed.",N,N],[3,"SendAll","","Future for the `Sink::send_all` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",N,N],[3,"SinkErrInto","","A sink combinator to change the error type of a sink.",N,N],[3,"SinkMapErr","","Sink for the `Sink::sink_map_err` combinator.",N,N],[3,"With","","Sink for the `Sink::with` combinator, chaining a computation to run prior to pushing a value into the underlying sink.",N,N],[8,"SinkExt","","An extension trait for `Sink`s that provides a variety of convenient combinator functions.",N,N],[11,"with","","Composes a function in front of the sink.",18,[[["self"],["f"]],["with"]]],[11,"with_flat_map","","Composes a function in front of the sink.",18,[[["self"],["f"]],["withflatmap"]]],[11,"sink_map_err","","Transforms the error returned by the sink.",18,[[["self"],["f"]],["sinkmaperr"]]],[11,"sink_err_into","","Map this sink's error to a different error type using the `Into` trait.",18,[[["self"]],["sinkerrinto"]]],[11,"buffer","","Adds a fixed-size buffer to the current sink.",18,[[["self"],["usize"]],["buffer"]]],[11,"close","","Close the sink.",18,[[["self"]],["close"]]],[11,"fanout","","Fanout items to multiple sinks.",18,[[["self"],["si"]],["fanout"]]],[11,"flush","","Flush the sync, processing all pending items.",18,[[["self"]],["flush"]]],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",18,N],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",18,[[["self"],["st"]],["sendall"]]],[11,"left_sink","","Wrap this sink in an `Either` sink, making it the left-hand variant of that `Either`.",18,[[["self"]],["either"]]],[11,"right_sink","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",18,[[["self"]],["either"]]],[3,"Fanout","","Sink that clones incoming items and forwards them to two sinks at the same time.",N,N],[3,"Drain","","A sink that will discard all items given to it.",N,N],[4,"DrainError","","The error type for the [`Drain`] sink.",N,N],[5,"drain","","Create a sink that will just discard all items given to it.",N,[[],["drain"]]],[3,"Buffer","","Sink for the `Sink::buffer` combinator, which buffers up to some fixed number of values when the underlying sink is unable to accept them.",N,N],[0,"stream","futures","Asynchronous streams.",N,N],[8,"Stream","futures::stream","A stream of values produced asynchronously.",N,N],[16,"Item","","Values yielded by the stream.",11,N],[10,"poll_next","","Attempt to pull out the next value of this stream, registering the current task for wakeup if the value is not yet available, and returning `None` if the stream is exhausted.",11,[[["pinmut"],["context"]],["poll",["option"]]]],[8,"TryStream","","A convenience for streams that return `Result` values that includes a variety of adapters tailored to such futures.",N,N],[16,"Ok","","The type of successful values yielded by this future",12,N],[16,"Error","","The type of failures yielded by this future",12,N],[10,"try_poll_next","","Poll this `TryStream` as if it were a `Stream`.",12,[[["pinmut"],["context"]],["poll",["option"]]]],[5,"iter","","Converts an `Iterator` into a `Stream` which is always ready to yield the next value.",N,[[["i"]],["iter"]]],[3,"Iter","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[5,"repeat","","Create a stream which produces the same item repeatedly.",N,[[["t"]],["repeat"]]],[3,"Repeat","","Stream that produces the same element repeatedly.",N,N],[5,"empty","","Creates a stream which contains no elements.",N,[[],["empty"]]],[3,"Empty","","A stream which contains no elements.",N,N],[5,"once","","Creates a stream of single element",N,[[["fut"]],["once"]]],[3,"Once","","A stream which emits single element and then EOF.",N,N],[5,"poll_fn","","Creates a new stream wrapping around a function returning `Poll`.",N,[[["f"]],["pollfn"]]],[3,"PollFn","","A stream which adapts a function returning `Poll`.",N,N],[5,"unfold","","Creates a `Stream` from a seed and a closure returning a `Future`.",N,[[["t"],["f"]],["unfold"]]],[3,"Unfold","","A stream which creates futures, polls them and return their result",N,N],[8,"StreamExt","","An extension trait for `Stream`s that provides a variety of convenient combinator functions.",N,N],[11,"next","","Creates a future that resolves to the next item in the stream.",13,[[["self"]],["next"]]],[11,"into_future","","Converts this stream into a future of `(next_item, tail_of_stream)`. If the stream terminates, then the next item is [`None`].",13,[[["self"]],["streamfuture"]]],[11,"map","","Maps this stream's items to a different type, returning a new stream of the resulting type.",13,[[["self"],["f"]],["map"]]],[11,"filter","","Filters the values produced by this stream according to the provided asynchronous predicate.",13,[[["self"],["f"]],["filter"]]],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type according to the provided asynchronous closure.",13,[[["self"],["f"]],["filtermap"]]],[11,"then","","Computes from this stream's items new items of a different type using an asynchronous closure.",13,[[["self"],["f"]],["then"]]],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",13,[[["self"]],["collect"]]],[11,"concat","","Concatenate all items of a stream into a single extendable destination, returning a future representing the end result.",13,[[["self"]],["concat"]]],[11,"fold","","Execute an accumulating asynchronous computation over a stream, collecting all the values into one final result.",13,[[["self"],["t"],["f"]],["fold"]]],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",13,[[["self"]],["flatten"]]],[11,"skip_while","","Skip elements on this stream while the provided asynchronous predicate resolves to `true`.",13,[[["self"],["f"]],["skipwhile"]]],[11,"take_while","","Take elements from this stream while the provided asynchronous predicate resolves to `true`.",13,[[["self"],["f"]],["takewhile"]]],[11,"for_each","","Runs this stream to completion, executing the provided asynchronous closure for each element on the stream.",13,[[["self"],["f"]],["foreach"]]],[11,"for_each_concurrent","","Runs this stream to completion, executing the provided asynchronous closure for each element on the stream concurrently as elements become available.",13,[[["self"],["impl into<option<usize>>"],["f"]],["foreachconcurrent"]]],[11,"take","","Creates a new stream of at most `n` items of the underlying stream.",13,[[["self"],["u64"]],["take"]]],[11,"skip","","Creates a new stream which skips `n` items of the underlying stream.",13,[[["self"],["u64"]],["skip"]]],[11,"fuse","","Fuse a stream such that `poll_next` will never again be called once it has finished.",13,[[["self"]],["fuse"]]],[11,"by_ref","","Borrows a stream, rather than consuming it.",13,[[["self"]],["self"]]],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",13,[[["self"]],["catchunwind"]]],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",13,[[["self"],["usize"]],["buffered"]]],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",13,[[["self"],["usize"]],["bufferunordered"]]],[11,"zip","","An adapter for zipping two streams together.",13,[[["self"],["st"]],["zip"]]],[11,"chain","","Adapter for chaining two stream.",13,[[["self"],["st"]],["chain"]]],[11,"peekable","","Creates a new stream which exposes a `peek` method.",13,[[["self"]],["peekable"]]],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",13,[[["self"],["usize"]],["chunks"]]],[11,"select","","This combinator will attempt to pull items from both streams. Each stream will be polled in a round-robin fashion, and whenever a stream is ready to yield an item that item is yielded.",13,[[["self"],["st"]],["select"]]],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",13,[[["self"],["s"]],["forward"]]],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",13,N],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",13,[[["self"],["f"]],["inspect"]]],[11,"left_stream","","Wrap this stream in an `Either` stream, making it the left-hand variant of that `Either`.",13,[[["self"]],["either"]]],[11,"right_stream","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",13,[[["self"]],["either"]]],[11,"poll_next_unpin","","A convenience method for calling [`Stream::poll_next`] on [`Unpin`] stream types.",13,[[["self"],["context"]],["poll",["option"]]]],[3,"Chain","","An adapter for chaining the output of two streams.",N,N],[3,"Concat","","A stream combinator to concatenate the results of a stream into the first yielded item.",N,N],[3,"Filter","","A stream combinator used to filter the results of a stream and only yield some values.",N,N],[3,"FilterMap","","A combinator used to filter the results of a stream and simultaneously map them to a different type.",N,N],[3,"Flatten","","A combinator used to flatten a stream-of-streams into one long stream of elements.",N,N],[3,"Fold","","A future used to collect all the results of a stream into one generic type.",N,N],[3,"Forward","","Future for the `Stream::forward` combinator, which sends a stream of values to a sink and then flushes the sink.",N,N],[3,"ForEach","","A stream combinator which executes a unit closure over each item on a stream.",N,N],[3,"Fuse","","A stream which \"fuse\"s a stream once it's terminated.",N,N],[3,"StreamFuture","","A combinator used to temporarily convert a stream into a future.",N,N],[3,"Inspect","","Do something with the items of a stream, passing it on.",N,N],[3,"Map","","A stream combinator which will change the type of a stream from one type to another.",N,N],[3,"Next","","A future of the next element of a stream.",N,N],[3,"Peekable","","A `Stream` that implements a `peek` method.",N,N],[3,"Select","","An adapter for merging the output of two streams.",N,N],[3,"Skip","","A stream combinator which skips a number of elements before continuing.",N,N],[3,"SkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",N,N],[3,"Take","","A stream combinator which returns a maximum number of elements.",N,N],[3,"TakeWhile","","A stream combinator which takes elements from a stream while a predicate holds.",N,N],[3,"Then","","A stream combinator which chains a computation onto each item produced by a stream.",N,N],[3,"Zip","","An adapter for merging the output of two streams.",N,N],[5,"futures_ordered","","Converts a list of futures into a `Stream` of results from the futures.",N,[[["i"]],["futuresordered"]]],[3,"FuturesOrdered","","An unbounded queue of futures.",N,N],[5,"futures_unordered","","Converts a list of futures into a [`Stream`] of outputs from the futures.",N,[[["i"]],["futuresunordered"]]],[3,"FuturesUnordered","","A set of futures which may complete in any order.",N,N],[3,"BufferUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if possible, delivering results as they become available.",N,N],[3,"Buffered","","An adaptor for a stream of futures to execute the futures concurrently, if possible.",N,N],[3,"CatchUnwind","","Stream for the `catch_unwind` combinator.",N,N],[3,"Chunks","","An adaptor that chunks up elements in a vector.",N,N],[3,"Collect","","A future which collects all of the values of a stream into a vector.",N,N],[3,"SplitStream","","A `Stream` part of the split pair",N,N],[3,"SplitSink","","A `Sink` part of the split pair",N,N],[3,"ReuniteError","","Error indicating a `SplitSink<S>` and `SplitStream<S>` were not two halves of a `Stream + Split`, and thus could not be `reunite`d.",N,N],[12,"0","","",19,N],[12,"1","","",19,N],[8,"TryStreamExt","","Adapters specific to `Result`-returning streams",N,N],[11,"err_into","","Wraps the current stream in a new stream which converts the error type into the one provided.",14,[[["self"]],["errinto"]]],[11,"map_ok","","Wraps the current stream in a new stream which maps the success value using the provided closure.",14,[[["self"],["f"]],["mapok"]]],[11,"map_err","","Wraps the current stream in a new stream which maps the error value using the provided closure.",14,[[["self"],["f"]],["maperr"]]],[11,"into_stream","","Wraps a [`TryStream`] into a type that implements `Stream`",14,[[["self"]],["intostream"]]],[11,"try_next","","Creates a future that attempts to resolve the next item in the stream. If an error is encountered before the next item, the error is returned instead.",14,[[["self"]],["trynext"]]],[11,"try_for_each","","Attempts to run this stream to completion, executing the provided asynchronous closure for each element on the stream.",14,[[["self"],["f"]],["tryforeach"]]],[11,"try_skip_while","","Skip elements on this stream while the provided asynchronous predicate resolves to `true`.",14,[[["self"],["f"]],["tryskipwhile"]]],[11,"try_for_each_concurrent","","Attempts to run this stream to completion, executing the provided asynchronous closure for each element on the stream concurrently as elements become available, exiting as soon as an error occurs.",14,[[["self"],["impl into<option<usize>>"],["f"]],["tryforeachconcurrent"]]],[11,"try_collect","","Attempt to Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",14,[[["self"]],["trycollect"]]],[11,"try_filter_map","","Attempt to filter the values produced by this stream while simultaneously mapping them to a different type according to the provided asynchronous closure.",14,[[["self"],["f"]],["tryfiltermap"]]],[11,"try_fold","","Attempt to execute an accumulating asynchronous computation over a stream, collecting all the values into one final result.",14,[[["self"],["t"],["f"]],["tryfold"]]],[11,"try_buffer_unordered","","Attempt to execute several futures from a stream concurrently.",14,[[["self"],["usize"]],["trybufferunordered"]]],[3,"TryNext","","A future which attempts to collect all of the values of a stream.",N,N],[3,"TryForEach","","A stream combinator which attempts to execute an async closure over each future in a stream.",N,N],[3,"ErrInto","","Stream for the `err_into` combinator.",N,N],[3,"TryFold","","The future for the `TryStream::fold` method.",N,N],[3,"TrySkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",N,N],[3,"IntoStream","","Stream for the `into_stream` combinator.",N,N],[3,"TryCollect","","A future which attempts to collect all of the values of a stream.",N,N],[3,"TryBufferUnordered","","A stream returned by the `try_buffer_unordered` method",N,N],[0,"task","futures","Tools for working with tasks.",N,N],[3,"Context","futures::task","Information about the currently-running task.",N,N],[4,"Poll","","Indicates whether a value is available or if the current task has been scheduled to receive a wakeup instead.",N,N],[13,"Ready","","Represents that a value is immediately ready.",15,N],[13,"Pending","","Represents that a value is not ready yet.",15,N],[8,"Spawn","","Spawns tasks that poll futures to completion onto its associated task executor.",N,N],[10,"spawn_obj","","Spawns a new task with the given future. The future will be polled until completion.",20,[[["self"],["futureobj"]],["result",["spawnobjerror"]]]],[11,"status","","Determines whether the executor is able to spawn new tasks.",20,[[["self"]],["result",["spawnerrorkind"]]]],[3,"Waker","","A `Waker` is a handle for waking up a task by notifying its executor that it is ready to be run.",N,N],[3,"LocalWaker","","A `LocalWaker` is a handle for waking up a task by notifying its executor that it is ready to be run.",N,N],[8,"UnsafeWake","","An unsafe trait for implementing custom memory management for a `Waker` or `LocalWaker`.",N,N],[10,"clone_raw","","Creates a clone of this `UnsafeWake` and stores it behind a `Waker`.",21,[[["self"]],["waker"]]],[10,"drop_raw","","Drops this instance of `UnsafeWake`, deallocating resources associated with it.",21,N],[10,"wake","","Indicates that the associated task is ready to make progress and should be `poll`ed.",21,N],[11,"wake_local","","Indicates that the associated task is ready to make progress and should be `poll`ed. This function is the same as `wake`, but can only be called from the thread that this `UnsafeWake` is \"local\" to. This allows for implementors to provide specialized wakeup behavior specific to the current thread. This function is called by `LocalWaker::wake`.",21,N],[3,"SpawnErrorKind","","Provides the reason that an executor was unable to spawn.",N,N],[3,"SpawnObjError","","The result of a failed spawn",N,N],[12,"kind","","The kind of error",22,N],[12,"future","","The future for which spawning inside a task was attempted",22,N],[3,"SpawnLocalObjError","","The result of a failed spawn",N,N],[12,"kind","","The kind of error",23,N],[12,"future","","The future for which spawning inside a task was attempted",23,N],[8,"Wake","","A way of waking up a specific task.",N,N],[10,"wake","","Indicates that the associated task is ready to make progress and should be `poll`ed.",24,N],[11,"wake_local","","Indicates that the associated task is ready to make progress and should be `poll`ed. This function is like `wake`, but can only be called from the thread on which this `Wake` was created.",24,N],[5,"local_waker","","Creates a `LocalWaker` from a local `wake`.",N,[[["arc"]],["localwaker"]]],[5,"local_waker_from_nonlocal","","Creates a `LocalWaker` from a non-local `wake`.",N,[[["arc"]],["localwaker"]]],[8,"SpawnExt","","Extension trait for `Spawn`",N,N],[11,"spawn","","Spawns a task that polls the given future with output `()` to completion.",16,[[["self"],["fut"]],["result",["spawnerror"]]]],[11,"spawn_with_handle","","Spawns a task that polls the given future to completion and returns a future that resolves to the spawned future's output.",16,[[["self"],["fut"]],["result",["joinhandle","spawnerror"]]]],[3,"SpawnError","","The result of a failed spawn",N,N],[12,"kind","","The kind of error",25,N],[3,"LocalWakerRef","","A `LocalWaker` that is only valid for a given lifetime.",N,N],[5,"local_waker_ref","","Creates a reference to a `LocalWaker` from a local `wake`.",N,[[["arc"]],["localwakerref"]]],[5,"local_waker_ref_from_nonlocal","","Creates a reference to a `LocalWaker` from a non-local `wake`.",N,[[["arc"]],["localwakerref"]]],[3,"JoinHandle","","The join handle returned by `spawn_with_handle`.",N,N],[3,"AtomicWaker","","A synchronization primitive for task wakeup.",N,N],[11,"close","futures::channel::oneshot","Gracefully close this receiver, preventing any subsequent attempts to send to it.",26,N],[11,"try_recv","","Attempts to receive a message outside of the context of a task.",26,[[["self"]],["result",["option","canceled"]]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"try_poll","","",26,[[["pinmut"],["context"]],["poll"]]],[11,"poll","futures::future","",27,[[["pinmut",["futureobj"]],["context"]],["poll"]]],[11,"poll","","",28,[[["pinmut",["localfutureobj"]],["context"]],["poll"]]],[11,"into_result","futures::task","",15,[[["self"]],["result"]]],[11,"from_error","","",15,N],[11,"from_ok","","",15,N],[11,"into_result","","",15,[[["self"]],["result"]]],[11,"from_error","","",15,N],[11,"from_ok","","",15,N],[11,"from","futures::future","",28,[[["futureobj"]],["localfutureobj"]]],[11,"from","futures::task","",29,[[["localwaker"]],["waker"]]],[11,"from","","",15,[[["t"]],["poll"]]],[11,"hash","","",15,N],[11,"clone","","",30,[[["self"]],["localwaker"]]],[11,"clone","","",29,[[["self"]],["waker"]]],[11,"clone","","",15,[[["self"]],["poll"]]],[11,"partial_cmp","","",15,[[["self"],["poll"]],["option",["ordering"]]]],[11,"lt","","",15,[[["self"],["poll"]],["bool"]]],[11,"le","","",15,[[["self"],["poll"]],["bool"]]],[11,"gt","","",15,[[["self"],["poll"]],["bool"]]],[11,"ge","","",15,[[["self"],["poll"]],["bool"]]],[11,"cmp","","",15,[[["self"],["poll"]],["ordering"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",27,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::task","",15,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::task","",32,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",15,[[["self"],["poll"]],["bool"]]],[11,"ne","","",15,[[["self"],["poll"]],["bool"]]],[11,"drop","","",29,N],[11,"drop","","",30,N],[11,"drop","futures::future","",28,N],[11,"poll_next","futures::stream","",33,[[["pinmut",["futuresunordered"]],["context"]],["poll",["option"]]]],[11,"poll_next","","",34,[[["pinmut",["bufferunordered"]],["context"]],["poll",["option"]]]],[11,"poll_next","futures::sink","",35,[[["pinmut",["sinkerrinto"]],["context"]],["poll",["option"]]]],[11,"poll_next","futures::stream","",36,[[["pinmut",["trybufferunordered"]],["context"]],["poll",["option"]]]],[11,"poll_next","","",37,[[["pinmut",["take"]],["context"]],["poll",["option"]]]],[11,"poll_next","futures::sink","",38,[[["pinmut",["sinkmaperr"]],["context"]],["poll",["option"]]]],[11,"poll_next","futures::stream","",39,[[["pinmut",["filter"]],["context"]],["poll",["option"]]]],[11,"poll_next","","",40,[[["pinmut",["select"]],["context"]],["poll",["option"]]]],[11,"poll_next","","",41,[[["pinmut",["flatten"]],["context"]],["poll",["option"]]]],[11,"poll_next","","",42,[[["pinmut",["pollfn"]],["context"]],["poll",["option"]]]],[11,"poll_next","","",43,[[["pinmut",["skip"]],["context"]],["poll",["option"]]]],[11,"poll_next","","",44,[[["pinmut",["empty"]],["context"]],["poll",["option"]]]],[11,"poll_next","","",45,[[["pinmut",["chain"]],["context"]],["poll",["option"]]]],[11,"poll_next","","",46,[[["pinmut",["chunks"]],["context"]],["poll",["option"]]]],[11,"poll_next","","",47,[[["pinmut",["takewhile"]],["context"]],["poll",["option"]]]],[11,"poll_next","","",48,[[["pinmut",["catchunwind"]],["context"]],["poll",["option"]]]],[11,"poll_next","","",49,[[["pinmut",["tryskipwhile"]],["context"]],["poll",["option"]]]],[11,"poll_next","","",50,[[["pinmut",["inspect"]],["context"]],["poll",["option"]]]],[11,"poll_next","","",51,[[["pinmut",["zip"]],["context"]],["poll",["option"]]]],[11,"poll_next","futures::future","",52,[[["pinmut",["intostream"]],["context"]],["poll",["option"]]]],[11,"poll_next","futures::stream","",53,[[["pinmut",["repeat"]],["context"]],["poll",["option"]]]],[11,"poll_next","","",54,[[["pinmut",["fuse"]],["context"]],["poll",["option"]]]],[11,"poll_next","futures::future","",55,[[["pinmut",["flattenstream"]],["context"]],["poll",["option"]]]],[11,"poll_next","futures::stream","",56,[[["pinmut",["then"]],["context"]],["poll",["option"]]]],[11,"poll_next","","",57,[[["pinmut",["futuresordered"]],["context"]],["poll",["option"]]]],[11,"poll_next","","",58,[[["pinmut",["splitstream"]],["context"]],["poll",["option"]]]],[11,"poll_next","","",59,[[["pinmut",["map"]],["context"]],["poll",["option"]]]],[11,"poll_next","","",60,[[["pinmut",["once"]],["context"]],["poll",["option"]]]],[11,"poll_next","","",61,[[["pinmut",["filtermap"]],["context"]],["poll",["option"]]]],[11,"poll_next","","",62,[[["pinmut",["buffered"]],["context"]],["poll",["option"]]]],[11,"poll_next","futures::sink","",63,[[["pinmut",["with"]],["context"]],["poll",["option"]]]],[11,"poll_next","","",64,[[["pinmut",["buffer"]],["context"]],["poll",["option"]]]],[11,"poll_next","futures::stream","",65,[[["pinmut",["errinto"]],["context"]],["poll",["option"]]]],[11,"poll_next","","",66,[[["pinmut",["peekable"]],["context"]],["poll",["option"]]]],[11,"poll_next","","",67,[[["pinmut",["unfold"]],["context"]],["poll",["option"]]]],[11,"poll_next","","",68,[[["pinmut",["skipwhile"]],["context"]],["poll",["option"]]]],[11,"poll_next","","",69,[[["pinmut",["iter"]],["context"]],["poll",["option"]]]],[11,"poll_next","","",70,[[["pinmut",["intostream"]],["context"]],["poll",["option"]]]],[11,"eq","futures::future","",71,[[["self"],["aborted"]],["bool"]]],[11,"eq","futures::io","",72,[[["self"],["allowstdio"]],["bool"]]],[11,"ne","","",72,[[["self"],["allowstdio"]],["bool"]]],[11,"write","","",72,N],[11,"flush","","",72,[[["self"]],["result",["error"]]]],[11,"write_all","","",72,N],[11,"write_fmt","","",72,[[["self"],["arguments"]],["result",["error"]]]],[11,"new","futures::task","Constructs a new `LocalWaker` directly.",30,[[["nonnull",["unsafewake"]]],["localwaker"]]],[11,"wake","","Wake up the task associated with this `LocalWaker`.",30,N],[11,"will_wake","","Returns whether or not this `LocalWaker` and `other` `LocalWaker` awaken the same task.",30,[[["self"],["localwaker"]],["bool"]]],[11,"will_wake_nonlocal","","Returns whether or not this `LocalWaker` and `other` `Waker` awaken the same task.",30,[[["self"],["waker"]],["bool"]]],[11,"deref","","",73,[[["self"]],["localwaker"]]],[11,"as_ref","futures::io","",74,N],[11,"hash","","",72,N],[11,"drop","futures::future","",75,N],[11,"drop","futures::stream","",33,N],[11,"poll_read","futures::io","",72,N],[11,"poll_read","","",76,N],[11,"poll_vectored_read","","",76,N],[11,"description","futures::stream","",19,[[["self"]],["str"]]],[11,"poll","futures::sink","",77,[[["pinmut",["close"]],["context"]],["poll"]]],[11,"poll","futures::stream","",78,[[["pinmut",["foreach"]],["context"]],["poll"]]],[11,"poll","","",79,[[["pinmut",["trynext"]],["context"]],["poll"]]],[11,"poll","futures::io","",80,[[["pinmut",["readexact"]],["context"]],["poll"]]],[11,"poll","futures::future","",81,[[["pinmut",["abortable"]],["context"]],["poll"]]],[11,"poll","","",82,[[["pinmut",["tryjoin5"]],["context"]],["poll"]]],[11,"poll","futures::io","",83,[[["pinmut",["copyinto"]],["context"]],["poll"]]],[11,"poll","futures::future","",84,[[["pinmut",["tryjoin3"]],["context"]],["poll"]]],[11,"poll","","",85,[[["pinmut",["join4"]],["context"]],["poll"]]],[11,"poll","futures::sink","",86,[[["pinmut",["send"]],["context"]],["poll"]]],[11,"poll","futures::future","",87,[[["pinmut",["pollfn"]],["context"]],["poll"]]],[11,"poll","futures::io","",88,[[["pinmut",["read"]],["context"]],["poll"]]],[11,"poll","","",89,[[["pinmut",["flush"]],["context"]],["poll"]]],[11,"poll","futures::future","",90,[[["pinmut",["join3"]],["context"]],["poll"]]],[11,"poll","futures::io","",91,[[["pinmut",["readtoend"]],["context"]],["poll"]]],[11,"poll","futures::future","",92,[[["pinmut",["andthen"]],["context"]],["poll"]]],[11,"poll","","",93,[[["pinmut",["intofuture"]],["context"]],["poll"]]],[11,"poll","futures::task","",94,[[["pinmut",["joinhandle"]],["context"]],["poll"]]],[11,"poll","futures::future","",95,[[["pinmut",["tryjoin4"]],["context"]],["poll"]]],[11,"poll","futures::io","",96,[[["pinmut",["writeall"]],["context"]],["poll",["result"]]]],[11,"poll","futures::future","",3,[[["pinmut",["maybedone"]],["context"]],["poll"]]],[11,"poll","","",97,[[["pinmut",["join"]],["context"]],["poll"]]],[11,"poll","","",98,[[["pinmut",["optionfuture"]],["context"]],["poll"]]],[11,"poll","","",99,[[["pinmut",["join5"]],["context"]],["poll"]]],[11,"poll","futures::stream","",100,[[["pinmut",["collect"]],["context"]],["poll"]]],[11,"poll","futures::future","",101,[[["pinmut",["map"]],["context"]],["poll"]]],[11,"poll","","",102,[[["pinmut",["mapok"]],["context"]],["poll"]]],[11,"poll","","",103,[[["pinmut",["ready"]],["context"]],["poll"]]],[11,"poll","","",75,[[["pinmut",["shared"]],["context"]],["poll"]]],[11,"poll","futures::stream","",104,[[["pinmut",["fold"]],["context"]],["poll"]]],[11,"poll","futures::future","",105,[[["pinmut",["then"]],["context"]],["poll"]]],[11,"poll","","",106,[[["pinmut",["errinto"]],["context"]],["poll"]]],[11,"poll","futures::io","",107,[[["pinmut",["close"]],["context"]],["poll"]]],[11,"poll","futures::future","",108,[[["pinmut",["lazy"]],["context"]],["poll"]]],[11,"poll","","",109,[[["pinmut",["maperr"]],["context"]],["poll"]]],[11,"poll","","",110,[[["pinmut",["orelse"]],["context"]],["poll"]]],[11,"poll","futures::sink","",111,[[["pinmut",["flush"]],["context"]],["poll"]]],[11,"poll","futures::future","",112,[[["pinmut",["catchunwind"]],["context"]],["poll"]]],[11,"poll","","",113,[[["pinmut",["tryjoin"]],["context"]],["poll"]]],[11,"poll","","",114,[[["pinmut",["flatten"]],["context"]],["poll"]]],[11,"poll","futures::sink","",115,[[["pinmut",["sendall"]],["context"]],["poll"]]],[11,"poll","futures::stream","",116,[[["pinmut",["concat"]],["context"]],["poll"]]],[11,"poll","","",117,[[["pinmut",["trycollect"]],["context"]],["poll"]]],[11,"poll","futures::future","",118,[[["pinmut",["withspawner"]],["context"]],["poll"]]],[11,"poll","","",119,[[["pinmut",["empty"]],["context"]],["poll"]]],[11,"poll","","",120,[[["pinmut",["inspect"]],["context"]],["poll"]]],[11,"poll","","",121,[[["pinmut",["fuse"]],["context"]],["poll"]]],[11,"poll","futures::stream","",122,[[["pinmut",["next"]],["context"]],["poll"]]],[11,"poll","","",123,[[["pinmut",["streamfuture"]],["context"]],["poll"]]],[11,"poll","futures::future","",124,[[["pinmut",["unwraporelse"]],["context"]],["poll"]]],[11,"poll","futures::stream","",125,[[["pinmut",["tryforeach"]],["context"]],["poll"]]],[11,"poll","","",126,[[["pinmut",["forward"]],["context"]],["poll"]]],[11,"poll","","",127,[[["pinmut",["tryfold"]],["context"]],["poll"]]],[11,"clone","futures::future","",98,[[["self"]],["optionfuture"]]],[11,"clone","","",128,[[["self"]],["aborthandle"]]],[11,"clone","","",75,[[["self"]],["shared"]]],[11,"clone","","",81,[[["self"]],["abortable"]]],[11,"clone","","",103,[[["self"]],["ready"]]],[11,"clone","futures::io","",72,[[["self"]],["allowstdio"]]],[11,"clone","futures::future","",71,[[["self"]],["aborted"]]],[11,"fmt","futures::stream","",44,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",52,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::sink","",129,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",43,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",124,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",127,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::sink","",77,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",47,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::io","",74,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",117,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::sink","",35,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",119,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",45,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",130,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",78,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::task","",25,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",131,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",125,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",103,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",100,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",108,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::sink","",63,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",109,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",67,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::io","",96,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",33,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::io","",72,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",85,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",57,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",99,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",69,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::io","",132,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",97,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",56,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",110,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",48,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",82,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",116,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",113,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::sink","",133,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",54,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::task","",94,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",87,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::io","",80,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::task","",134,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",121,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::sink","",135,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",49,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::sink","",111,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",58,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::task","",73,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",46,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",123,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::io","",91,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",51,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",102,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",53,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::sink","",64,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",65,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",104,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::io","",107,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",37,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",120,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::sink","",86,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",36,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",118,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",62,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::io","",88,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::sink","",115,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",61,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",101,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::io","",89,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",122,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result",["error"]]]],[11,"cmp","futures::io","",72,[[["self"],["allowstdio"]],["ordering"]]],[11,"default","futures::stream","",33,[[],["futuresunordered"]]],[11,"default","futures::task","",134,[[],["atomicwaker"]]],[11,"default","futures::stream","",57,[[],["futuresordered"]]],[11,"poll_ready","","",54,[[["pinmut",["fuse"]],["context"]],["poll",["result"]]]],[11,"start_send","","",54,N],[11,"poll_flush","","",54,[[["pinmut",["fuse"]],["context"]],["poll",["result"]]]],[11,"poll_close","","",54,[[["pinmut",["fuse"]],["context"]],["poll",["result"]]]],[11,"poll_ready","futures::sink","",129,[[["pinmut",["fanout"]],["context"]],["poll",["result"]]]],[11,"start_send","","",129,N],[11,"poll_flush","","",129,[[["pinmut",["fanout"]],["context"]],["poll",["result"]]]],[11,"poll_close","","",129,[[["pinmut",["fanout"]],["context"]],["poll",["result"]]]],[11,"poll_ready","futures::future","",130,[[["pinmut",["flattensink"]],["context"]],["poll",["result"]]]],[11,"start_send","","",130,N],[11,"poll_flush","","",130,[[["pinmut",["flattensink"]],["context"]],["poll",["result"]]]],[11,"poll_close","","",130,[[["pinmut",["flattensink"]],["context"]],["poll",["result"]]]],[11,"poll_ready","futures::sink","",38,[[["pinmut",["sinkmaperr"]],["context"]],["poll",["result"]]]],[11,"start_send","","",38,N],[11,"poll_flush","","",38,[[["pinmut",["sinkmaperr"]],["context"]],["poll",["result"]]]],[11,"poll_close","","",38,[[["pinmut",["sinkmaperr"]],["context"]],["poll",["result"]]]],[11,"poll_ready","futures::stream","",62,[[["pinmut",["buffered"]],["context"]],["poll",["result"]]]],[11,"start_send","","",62,N],[11,"poll_flush","","",62,[[["pinmut",["buffered"]],["context"]],["poll",["result"]]]],[11,"poll_close","","",62,[[["pinmut",["buffered"]],["context"]],["poll",["result"]]]],[11,"poll_ready","futures::sink","",35,[[["pinmut",["sinkerrinto"]],["context"]],["poll",["result"]]]],[11,"start_send","","",35,N],[11,"poll_flush","","",35,[[["pinmut",["sinkerrinto"]],["context"]],["poll",["result"]]]],[11,"poll_close","","",35,[[["pinmut",["sinkerrinto"]],["context"]],["poll",["result"]]]],[11,"poll_ready","futures::stream","",34,[[["pinmut",["bufferunordered"]],["context"]],["poll",["result"]]]],[11,"start_send","","",34,N],[11,"poll_flush","","",34,[[["pinmut",["bufferunordered"]],["context"]],["poll",["result"]]]],[11,"poll_close","","",34,[[["pinmut",["bufferunordered"]],["context"]],["poll",["result"]]]],[11,"poll_ready","futures::sink","",63,[[["pinmut",["with"]],["context"]],["poll",["result"]]]],[11,"start_send","","",63,N],[11,"poll_flush","","",63,[[["pinmut",["with"]],["context"]],["poll",["result"]]]],[11,"poll_close","","",63,[[["pinmut",["with"]],["context"]],["poll",["result"]]]],[11,"poll_ready","","",133,[[["pinmut",["drain"]],["context"]],["poll",["result"]]]],[11,"start_send","","",133,N],[11,"poll_flush","","",133,[[["pinmut",["drain"]],["context"]],["poll",["result"]]]],[11,"poll_close","","",133,[[["pinmut",["drain"]],["context"]],["poll",["result"]]]],[11,"poll_ready","","",64,[[["pinmut",["buffer"]],["context"]],["poll",["result"]]]],[11,"start_send","","",64,N],[11,"poll_flush","","",64,[[["pinmut",["buffer"]],["context"]],["poll",["result"]]]],[11,"poll_close","","",64,[[["pinmut",["buffer"]],["context"]],["poll",["result"]]]],[11,"poll_ready","futures::stream","",136,[[["pinmut",["splitsink"]],["context"]],["poll",["result"]]]],[11,"start_send","","",136,N],[11,"poll_flush","","",136,[[["pinmut",["splitsink"]],["context"]],["poll",["result"]]]],[11,"poll_close","","",136,[[["pinmut",["splitsink"]],["context"]],["poll",["result"]]]],[11,"poll_write","futures::io","",132,N],[11,"poll_vectored_write","","",132,N],[11,"poll_flush","","",132,[[["self"],["context"]],["poll",["result"]]]],[11,"poll_close","","",132,[[["self"],["context"]],["poll",["result"]]]],[11,"poll_write","","",72,N],[11,"poll_flush","","",72,[[["self"],["context"]],["poll",["result"]]]],[11,"poll_close","","",72,[[["self"],["context"]],["poll",["result"]]]],[11,"as_mut","","",74,N],[11,"fmt","futures::sink","",135,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","futures::io","",72,[[["self"],["allowstdio"]],["option",["ordering"]]]],[11,"lt","","",72,[[["self"],["allowstdio"]],["bool"]]],[11,"le","","",72,[[["self"],["allowstdio"]],["bool"]]],[11,"gt","","",72,[[["self"],["allowstdio"]],["bool"]]],[11,"ge","","",72,[[["self"],["allowstdio"]],["bool"]]],[11,"read","","",72,N],[11,"read_to_end","","",72,[[["self"],["vec"]],["result",["usize","error"]]]],[11,"read_to_string","","",72,[[["self"],["string"]],["result",["usize","error"]]]],[11,"read_exact","","",72,N],[11,"from","futures::future","",98,[[["option"]],["optionfuture"]]],[11,"from_iter","futures::stream","",33,[[["i"]],["futuresunordered"]]],[11,"from_iter","","",57,[[["t"]],["futuresordered"]]],[11,"partial_cmp","futures::io","",6,[[["self"],["errorkind"]],["option",["ordering"]]]],[11,"description","","",137,[[["self"]],["str"]]],[11,"cause","","",137,[[["self"]],["option",["error"]]]],[11,"cmp","","",6,[[["self"],["errorkind"]],["ordering"]]],[11,"fmt","","",137,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",6,[[["self"]],["errorkind"]]],[11,"hash","","",6,N],[11,"eq","","",6,[[["self"],["errorkind"]],["bool"]]],[11,"from","","",137,[[["errorkind"]],["error"]]],[11,"from","","",137,[[["intoinnererror"]],["error"]]],[11,"from","","Converts a [`NulError`] into a [`io::Error`].",137,[[["nulerror"]],["error"]]],[11,"fmt","","",137,[[["self"],["formatter"]],["result",["error"]]]],[11,"from","futures::future","",27,[[["box"]],["futureobj"]]],[11,"from","","",28,[[["pinbox"]],["localfutureobj"]]],[11,"from","futures::task","",29,[[["arc"]],["waker"]]],[11,"from","futures::future","",28,[[["box"]],["localfutureobj"]]],[11,"from","","",27,[[["pinbox"]],["futureobj"]]],[11,"poll_ready","futures::channel::mpsc","",138,[[["pinmut",["sender"]],["context"]],["poll",["result"]]]],[11,"start_send","","",138,[[["pinmut",["sender"]],["t"]],["result"]]],[11,"poll_flush","","",138,[[["pinmut",["sender"]],["context"]],["poll",["result"]]]],[11,"poll_close","","",138,[[["pinmut",["sender"]],["context"]],["poll",["result"]]]],[11,"poll_ready","","",139,[[["pinmut",["unboundedsender"]],["context"]],["poll",["result"]]]],[11,"start_send","","",139,[[["pinmut",["unboundedsender"]],["t"]],["result"]]],[11,"poll_flush","","",139,[[["pinmut",["unboundedsender"]],["context"]],["poll",["result"]]]],[11,"poll_close","","",139,[[["pinmut",["unboundedsender"]],["context"]],["poll",["result"]]]],[11,"poll","futures::channel::oneshot","",26,[[["pinmut",["receiver"]],["context"]],["poll",["result"]]]],[11,"clone","futures::channel::mpsc","",138,[[["self"]],["sender"]]],[11,"clone","","",140,[[["self"]],["senderror"]]],[11,"clone","futures::channel::oneshot","",141,[[["self"]],["canceled"]]],[11,"clone","futures::channel::mpsc","",139,[[["self"]],["unboundedsender"]]],[11,"clone","","",142,[[["self"]],["trysenderror"]]],[11,"fmt","","",142,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::channel::oneshot","",141,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::channel::mpsc","",143,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",140,[[["self"],["formatter"]],["result",["error"]]]],[11,"drop","futures::channel::oneshot","",26,N],[11,"drop","futures::channel::mpsc","",138,N],[11,"drop","futures::channel::oneshot","",144,N],[11,"drop","futures::channel::mpsc","",145,N],[11,"eq","","",140,[[["self"],["senderror"]],["bool"]]],[11,"ne","","",140,[[["self"],["senderror"]],["bool"]]],[11,"eq","futures::channel::oneshot","",141,[[["self"],["canceled"]],["bool"]]],[11,"eq","futures::channel::mpsc","",142,[[["self"],["trysenderror"]],["bool"]]],[11,"ne","","",142,[[["self"],["trysenderror"]],["bool"]]],[11,"poll_next","","",146,[[["pinmut",["unboundedreceiver"]],["context"]],["poll",["option"]]]],[11,"poll_next","","",145,[[["pinmut",["receiver"]],["context"]],["poll",["option"]]]],[11,"description","futures::channel::oneshot","",141,[[["self"]],["str"]]],[11,"description","futures::channel::mpsc","",143,[[["self"]],["str"]]],[11,"description","","",142,[[["self"]],["str"]]],[11,"description","","",140,[[["self"]],["str"]]],[11,"fmt","futures::channel::oneshot","",141,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::channel::mpsc","",139,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",146,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",140,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",145,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",142,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",143,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::channel::oneshot","",26,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::channel::mpsc","",138,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::channel::oneshot","",144,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::io","",147,[[["self"],["formatter"]],["result",["error"]]]],[11,"deref","","",148,N],[11,"deref_mut","","",148,N],[11,"next","futures::executor","",149,[[["self"]],["option"]]],[11,"spawn_obj","","",150,[[["self"],["futureobj"]],["result",["spawnobjerror"]]]],[11,"spawn_obj","","",151,[[["self"],["futureobj"]],["result",["spawnobjerror"]]]],[11,"status","","",151,[[["self"]],["result",["spawnerrorkind"]]]],[11,"deref","","",149,N],[11,"drop","","",152,N],[11,"drop","","",150,N],[11,"clone","","",151,[[["self"]],["localspawn"]]],[11,"clone","","",150,[[["self"]],["threadpool"]]],[11,"fmt","","",153,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",150,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",154,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",151,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",152,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",149,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",155,[[["self"],["formatter"]],["result",["error"]]]],[11,"default","","",155,[[],["threadpoolbuilder"]]],[11,"default","","",153,[[],["localpool"]]],[11,"deref_mut","","",149,N],[11,"send","futures::channel::oneshot","Completes this oneshot with a successful result.",144,[[["self"],["t"]],["result"]]],[11,"poll_cancel","","Polls this `Sender` half to detect whether its associated `Receiver` with has been dropped.",144,[[["self"],["context"]],["poll"]]],[11,"is_canceled","","Tests to see whether this `Sender`'s corresponding `Receiver` has been dropped.",144,[[["self"]],["bool"]]],[11,"from","","",144,[[["t"]],["t"]]],[11,"try_from","","",144,[[["u"]],["result"]]],[11,"try_into","","",144,[[["self"]],["result"]]],[11,"into","","",144,[[["self"]],["u"]]],[11,"borrow","","",144,[[["self"]],["t"]]],[11,"borrow_mut","","",144,[[["self"]],["t"]]],[11,"get_type_id","","",144,[[["self"]],["typeid"]]],[11,"from","","",141,[[["t"]],["t"]]],[11,"try_from","","",141,[[["u"]],["result"]]],[11,"try_into","","",141,[[["self"]],["result"]]],[11,"into","","",141,[[["self"]],["u"]]],[11,"borrow","","",141,[[["self"]],["t"]]],[11,"borrow_mut","","",141,[[["self"]],["t"]]],[11,"get_type_id","","",141,[[["self"]],["typeid"]]],[11,"to_string","","",141,[[["self"]],["string"]]],[11,"to_owned","","",141,[[["self"]],["t"]]],[11,"clone_into","","",141,N],[11,"try_send","futures::channel::mpsc","Attempts to send a message on this `Sender`, returning the message if there was an error.",138,[[["self"],["t"]],["result",["trysenderror"]]]],[11,"start_send","","Send a message on the channel.",138,[[["self"],["t"]],["result",["senderror"]]]],[11,"poll_ready","","Polls the channel to determine if there is guaranteed capacity to send at least one item without waiting.",138,[[["self"],["context"]],["poll",["result"]]]],[11,"is_closed","","Returns whether this channel is closed without needing a context.",138,[[["self"]],["bool"]]],[11,"close_channel","","Closes this channel from the sender side, preventing any new messages.",138,N],[11,"from","","",138,[[["t"]],["t"]]],[11,"try_from","","",138,[[["u"]],["result"]]],[11,"try_into","","",138,[[["self"]],["result"]]],[11,"into","","",138,[[["self"]],["u"]]],[11,"borrow","","",138,[[["self"]],["t"]]],[11,"borrow_mut","","",138,[[["self"]],["t"]]],[11,"get_type_id","","",138,[[["self"]],["typeid"]]],[11,"to_owned","","",138,[[["self"]],["t"]]],[11,"clone_into","","",138,N],[11,"poll_ready","","Check if the channel is ready to receive a message.",139,[[["self"],["context"]],["poll",["result"]]]],[11,"is_closed","","Returns whether this channel is closed without needing a context.",139,[[["self"]],["bool"]]],[11,"close_channel","","Closes this channel from the sender side, preventing any new messages.",139,N],[11,"start_send","","Send a message on the channel.",139,[[["self"],["t"]],["result",["senderror"]]]],[11,"unbounded_send","","Sends a message along this channel.",139,[[["self"],["t"]],["result",["trysenderror"]]]],[11,"from","","",139,[[["t"]],["t"]]],[11,"try_from","","",139,[[["u"]],["result"]]],[11,"try_into","","",139,[[["self"]],["result"]]],[11,"into","","",139,[[["self"]],["u"]]],[11,"borrow","","",139,[[["self"]],["t"]]],[11,"borrow_mut","","",139,[[["self"]],["t"]]],[11,"get_type_id","","",139,[[["self"]],["typeid"]]],[11,"to_owned","","",139,[[["self"]],["t"]]],[11,"clone_into","","",139,N],[11,"close","","Closes the receiving half of a channel, without dropping it.",145,N],[11,"try_next","","Tries to receive the next message without notifying a context if empty.",145,[[["self"]],["result",["option","tryrecverror"]]]],[11,"from","","",145,[[["t"]],["t"]]],[11,"try_from","","",145,[[["u"]],["result"]]],[11,"try_into","","",145,[[["self"]],["result"]]],[11,"into","","",145,[[["self"]],["u"]]],[11,"borrow","","",145,[[["self"]],["t"]]],[11,"borrow_mut","","",145,[[["self"]],["t"]]],[11,"get_type_id","","",145,[[["self"]],["typeid"]]],[11,"try_poll_next","","",145,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"close","","Closes the receiving half of the channel, without dropping it.",146,N],[11,"try_next","","Tries to receive the next message without notifying a context if empty.",146,[[["self"]],["result",["option","tryrecverror"]]]],[11,"from","","",146,[[["t"]],["t"]]],[11,"try_from","","",146,[[["u"]],["result"]]],[11,"try_into","","",146,[[["self"]],["result"]]],[11,"into","","",146,[[["self"]],["u"]]],[11,"borrow","","",146,[[["self"]],["t"]]],[11,"borrow_mut","","",146,[[["self"]],["t"]]],[11,"get_type_id","","",146,[[["self"]],["typeid"]]],[11,"try_poll_next","","",146,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"is_full","","Returns true if this error is a result of the channel being full.",140,[[["self"]],["bool"]]],[11,"is_disconnected","","Returns true if this error is a result of the receiver being dropped.",140,[[["self"]],["bool"]]],[11,"from","","",140,[[["t"]],["t"]]],[11,"try_from","","",140,[[["u"]],["result"]]],[11,"try_into","","",140,[[["self"]],["result"]]],[11,"into","","",140,[[["self"]],["u"]]],[11,"borrow","","",140,[[["self"]],["t"]]],[11,"borrow_mut","","",140,[[["self"]],["t"]]],[11,"get_type_id","","",140,[[["self"]],["typeid"]]],[11,"to_string","","",140,[[["self"]],["string"]]],[11,"to_owned","","",140,[[["self"]],["t"]]],[11,"clone_into","","",140,N],[11,"is_full","","Returns true if this error is a result of the channel being full.",142,[[["self"]],["bool"]]],[11,"is_disconnected","","Returns true if this error is a result of the receiver being dropped.",142,[[["self"]],["bool"]]],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",142,[[["self"]],["t"]]],[11,"into_send_error","","Drops the message and converts into a `SendError`.",142,[[["self"]],["senderror"]]],[11,"from","","",142,[[["t"]],["t"]]],[11,"try_from","","",142,[[["u"]],["result"]]],[11,"try_into","","",142,[[["self"]],["result"]]],[11,"into","","",142,[[["self"]],["u"]]],[11,"borrow","","",142,[[["self"]],["t"]]],[11,"borrow_mut","","",142,[[["self"]],["t"]]],[11,"get_type_id","","",142,[[["self"]],["typeid"]]],[11,"to_string","","",142,[[["self"]],["string"]]],[11,"to_owned","","",142,[[["self"]],["t"]]],[11,"clone_into","","",142,N],[11,"from","","",143,[[["t"]],["t"]]],[11,"try_from","","",143,[[["u"]],["result"]]],[11,"try_into","","",143,[[["self"]],["result"]]],[11,"into","","",143,[[["self"]],["u"]]],[11,"borrow","","",143,[[["self"]],["t"]]],[11,"borrow_mut","","",143,[[["self"]],["t"]]],[11,"get_type_id","","",143,[[["self"]],["typeid"]]],[11,"to_string","","",143,[[["self"]],["string"]]],[11,"into_inner","futures::executor","Convert this `BlockingStream` into the inner `Stream` type.",149,[[["self"]],["s"]]],[11,"into_iter","","",149,[[["self"]],["i"]]],[11,"from","","",149,[[["t"]],["t"]]],[11,"try_from","","",149,[[["u"]],["result"]]],[11,"try_into","","",149,[[["self"]],["result"]]],[11,"into","","",149,[[["self"]],["u"]]],[11,"borrow","","",149,[[["self"]],["t"]]],[11,"borrow_mut","","",149,[[["self"]],["t"]]],[11,"get_type_id","","",149,[[["self"]],["typeid"]]],[11,"from","","",152,[[["t"]],["t"]]],[11,"try_from","","",152,[[["u"]],["result"]]],[11,"try_into","","",152,[[["self"]],["result"]]],[11,"into","","",152,[[["self"]],["u"]]],[11,"borrow","","",152,[[["self"]],["t"]]],[11,"borrow_mut","","",152,[[["self"]],["t"]]],[11,"get_type_id","","",152,[[["self"]],["typeid"]]],[11,"from","","",154,[[["t"]],["t"]]],[11,"try_from","","",154,[[["u"]],["result"]]],[11,"try_into","","",154,[[["self"]],["result"]]],[11,"into","","",154,[[["self"]],["u"]]],[11,"borrow","","",154,[[["self"]],["t"]]],[11,"borrow_mut","","",154,[[["self"]],["t"]]],[11,"get_type_id","","",154,[[["self"]],["typeid"]]],[11,"spawn_local_obj","","Spawn a non-`Send` future onto the associated `LocalPool`.",151,[[["self"],["localfutureobj"]],["result",["spawnlocalobjerror"]]]],[11,"from","","",151,[[["t"]],["t"]]],[11,"try_from","","",151,[[["u"]],["result"]]],[11,"try_into","","",151,[[["self"]],["result"]]],[11,"into","","",151,[[["self"]],["u"]]],[11,"borrow","","",151,[[["self"]],["t"]]],[11,"borrow_mut","","",151,[[["self"]],["t"]]],[11,"get_type_id","","",151,[[["self"]],["typeid"]]],[11,"to_owned","","",151,[[["self"]],["t"]]],[11,"clone_into","","",151,N],[11,"new","","Create a new, empty pool of tasks.",153,[[],["localpool"]]],[11,"spawner","","Get a clonable handle to the pool as a [`Spawn`].",153,[[["self"]],["localspawn"]]],[11,"run","","Run all tasks in the pool to completion.",153,N],[11,"run_until","","Runs all the tasks in the pool until the given future completes.",153,N],[11,"from","","",153,[[["t"]],["t"]]],[11,"try_from","","",153,[[["u"]],["result"]]],[11,"try_into","","",153,[[["self"]],["result"]]],[11,"into","","",153,[[["self"]],["u"]]],[11,"borrow","","",153,[[["self"]],["t"]]],[11,"borrow_mut","","",153,[[["self"]],["t"]]],[11,"get_type_id","","",153,[[["self"]],["typeid"]]],[11,"new","","Creates a new thread pool with the default configuration.",150,[[],["result",["threadpool","error"]]]],[11,"builder","","Create a default thread pool configuration, which can then be customized.",150,[[],["threadpoolbuilder"]]],[11,"run","","Runs the given future with this thread pool as the default spawner for spawning tasks.",150,N],[11,"from","","",150,[[["t"]],["t"]]],[11,"try_from","","",150,[[["u"]],["result"]]],[11,"try_into","","",150,[[["self"]],["result"]]],[11,"into","","",150,[[["self"]],["u"]]],[11,"borrow","","",150,[[["self"]],["t"]]],[11,"borrow_mut","","",150,[[["self"]],["t"]]],[11,"get_type_id","","",150,[[["self"]],["typeid"]]],[11,"to_owned","","",150,[[["self"]],["t"]]],[11,"clone_into","","",150,N],[11,"new","","Create a default thread pool configuration.",155,[[],["threadpoolbuilder"]]],[11,"pool_size","","Set size of a future ThreadPool",155,[[["self"],["usize"]],["threadpoolbuilder"]]],[11,"stack_size","","Set stack size of threads in the pool.",155,[[["self"],["usize"]],["threadpoolbuilder"]]],[11,"name_prefix","","Set thread name prefix of a future ThreadPool.",155,[[["self"],["s"]],["threadpoolbuilder"]]],[11,"after_start","","Execute the closure `f` immediately after each worker thread is started, but before running any tasks on it.",155,[[["self"],["f"]],["threadpoolbuilder"]]],[11,"before_stop","","Execute closure `f` just prior to shutting down each worker thread.",155,[[["self"],["f"]],["threadpoolbuilder"]]],[11,"create","","Create a `ThreadPool` with the given configuration.",155,[[["self"]],["result",["threadpool","error"]]]],[11,"from","","",155,[[["t"]],["t"]]],[11,"try_from","","",155,[[["u"]],["result"]]],[11,"try_into","","",155,[[["self"]],["result"]]],[11,"into","","",155,[[["self"]],["u"]]],[11,"borrow","","",155,[[["self"]],["t"]]],[11,"borrow_mut","","",155,[[["self"]],["t"]]],[11,"get_type_id","","",155,[[["self"]],["typeid"]]],[11,"new","futures::future","Create a `FutureObj` from a custom trait object representation.",27,[[["f"]],["futureobj"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"try_poll","","",27,[[["pinmut"],["context"]],["poll"]]],[11,"new","","Create a `LocalFutureObj` from a custom trait object representation.",28,[[["f"]],["localfutureobj"]]],[11,"into_future_obj","","Converts the `LocalFutureObj` into a `FutureObj` To make this operation safe one has to ensure that the `UnsafeFutureObj` instance from which this `LocalFutureObj` was created actually implements `Send`.",28,[[["self"]],["futureobj"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"try_poll","","",28,[[["pinmut"],["context"]],["poll"]]],[11,"from","","",119,[[["t"]],["t"]]],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"try_into","","",119,[[["self"]],["result"]]],[11,"into","","",119,[[["self"]],["u"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"get_type_id","","",119,[[["self"]],["typeid"]]],[11,"try_poll","","",119,[[["pinmut"],["context"]],["poll"]]],[11,"from","","",108,[[["t"]],["t"]]],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"try_into","","",108,[[["self"]],["result"]]],[11,"into","","",108,[[["self"]],["u"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"get_type_id","","",108,[[["self"]],["typeid"]]],[11,"try_poll","","",108,[[["pinmut"],["context"]],["poll"]]],[11,"output_mut","","Returns an [`Option`] containing a mutable reference to the output of the future. The output of this method will be [`Some`] if and only if the inner future has been completed and `take_output` has not yet been called.",3,[[["pinmut",["maybedone"]]],["option"]]],[11,"take_output","","Attempt to take the output of a `MaybeDone` without driving it towards completion.",3,[[["pinmut",["maybedone"]]],["option"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",87,[[["t"]],["t"]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"try_into","","",87,[[["self"]],["result"]]],[11,"into","","",87,[[["self"]],["u"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"get_type_id","","",87,[[["self"]],["typeid"]]],[11,"try_poll","","",87,[[["pinmut"],["context"]],["poll"]]],[11,"from","","",103,[[["t"]],["t"]]],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"try_into","","",103,[[["self"]],["result"]]],[11,"into","","",103,[[["self"]],["u"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"get_type_id","","",103,[[["self"]],["typeid"]]],[11,"to_owned","","",103,[[["self"]],["t"]]],[11,"clone_into","","",103,N],[11,"try_poll","","",103,[[["pinmut"],["context"]],["poll"]]],[11,"from","","",98,[[["t"]],["t"]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"try_into","","",98,[[["self"]],["result"]]],[11,"into","","",98,[[["self"]],["u"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"get_type_id","","",98,[[["self"]],["typeid"]]],[11,"to_owned","","",98,[[["self"]],["t"]]],[11,"clone_into","","",98,N],[11,"from","","",55,[[["t"]],["t"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"try_poll_next","","",55,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"from","","",114,[[["t"]],["t"]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"try_into","","",114,[[["self"]],["result"]]],[11,"into","","",114,[[["self"]],["u"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"get_type_id","","",114,[[["self"]],["typeid"]]],[11,"try_poll","","",114,[[["pinmut"],["context"]],["poll"]]],[11,"from","","",121,[[["t"]],["t"]]],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"try_into","","",121,[[["self"]],["result"]]],[11,"into","","",121,[[["self"]],["u"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"get_type_id","","",121,[[["self"]],["typeid"]]],[11,"try_poll","","",121,[[["pinmut"],["context"]],["poll"]]],[11,"from","","",120,[[["t"]],["t"]]],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"try_into","","",120,[[["self"]],["result"]]],[11,"into","","",120,[[["self"]],["u"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"get_type_id","","",120,[[["self"]],["typeid"]]],[11,"try_poll","","",120,[[["pinmut"],["context"]],["poll"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"try_poll_next","","",52,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"from","","",97,[[["t"]],["t"]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"try_into","","",97,[[["self"]],["result"]]],[11,"into","","",97,[[["self"]],["u"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"get_type_id","","",97,[[["self"]],["typeid"]]],[11,"from","","",90,[[["t"]],["t"]]],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"try_into","","",90,[[["self"]],["result"]]],[11,"into","","",90,[[["self"]],["u"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"get_type_id","","",90,[[["self"]],["typeid"]]],[11,"from","","",85,[[["t"]],["t"]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"try_into","","",85,[[["self"]],["result"]]],[11,"into","","",85,[[["self"]],["u"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"get_type_id","","",85,[[["self"]],["typeid"]]],[11,"from","","",99,[[["t"]],["t"]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"try_into","","",99,[[["self"]],["result"]]],[11,"into","","",99,[[["self"]],["u"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"get_type_id","","",99,[[["self"]],["typeid"]]],[11,"from","","",101,[[["t"]],["t"]]],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"try_into","","",101,[[["self"]],["result"]]],[11,"into","","",101,[[["self"]],["u"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"get_type_id","","",101,[[["self"]],["typeid"]]],[11,"try_poll","","",101,[[["pinmut"],["context"]],["poll"]]],[11,"from","","",105,[[["t"]],["t"]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"try_into","","",105,[[["self"]],["result"]]],[11,"into","","",105,[[["self"]],["u"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"get_type_id","","",105,[[["self"]],["typeid"]]],[11,"try_poll","","",105,[[["pinmut"],["context"]],["poll"]]],[11,"from","","",118,[[["t"]],["t"]]],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"try_into","","",118,[[["self"]],["result"]]],[11,"into","","",118,[[["self"]],["u"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"get_type_id","","",118,[[["self"]],["typeid"]]],[11,"try_poll","","",118,[[["pinmut"],["context"]],["poll"]]],[11,"new","","Creates a new `Abortable` future using an existing `AbortRegistration`. `AbortRegistration`s can be acquired through `AbortHandle::new`.",81,[[["fut"],["abortregistration"]],["abortable"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"try_into","","",81,[[["self"]],["result"]]],[11,"into","","",81,[[["self"]],["u"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"get_type_id","","",81,[[["self"]],["typeid"]]],[11,"to_owned","","",81,[[["self"]],["t"]]],[11,"clone_into","","",81,N],[11,"try_poll","","",81,[[["pinmut"],["context"]],["poll"]]],[11,"new_pair","","Creates an (`AbortHandle`, `AbortRegistration`) pair which can be used to abort a running future.",128,N],[11,"abort","","Abort the `Abortable` future associated with this handle.",128,N],[11,"from","","",128,[[["t"]],["t"]]],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"try_into","","",128,[[["self"]],["result"]]],[11,"into","","",128,[[["self"]],["u"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"get_type_id","","",128,[[["self"]],["typeid"]]],[11,"to_owned","","",128,[[["self"]],["t"]]],[11,"clone_into","","",128,N],[11,"from","","",131,[[["t"]],["t"]]],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"try_into","","",131,[[["self"]],["result"]]],[11,"into","","",131,[[["self"]],["u"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"get_type_id","","",131,[[["self"]],["typeid"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,N],[11,"from","","",112,[[["t"]],["t"]]],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"try_into","","",112,[[["self"]],["result"]]],[11,"into","","",112,[[["self"]],["u"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"get_type_id","","",112,[[["self"]],["typeid"]]],[11,"try_poll","","",112,[[["pinmut"],["context"]],["poll"]]],[11,"peek","","If any clone of this `Shared` has completed execution, returns its result immediately without blocking. Otherwise, returns None without triggering the work represented by this `Shared`.",75,[[["self"]],["option",["arc"]]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"try_into","","",75,[[["self"]],["result"]]],[11,"into","","",75,[[["self"]],["u"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"get_type_id","","",75,[[["self"]],["typeid"]]],[11,"to_owned","","",75,[[["self"]],["t"]]],[11,"clone_into","","",75,N],[11,"from","","",92,[[["t"]],["t"]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"try_into","","",92,[[["self"]],["result"]]],[11,"into","","",92,[[["self"]],["u"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"get_type_id","","",92,[[["self"]],["typeid"]]],[11,"try_poll","","",92,[[["pinmut"],["context"]],["poll"]]],[11,"from","","",106,[[["t"]],["t"]]],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"try_into","","",106,[[["self"]],["result"]]],[11,"into","","",106,[[["self"]],["u"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"get_type_id","","",106,[[["self"]],["typeid"]]],[11,"try_poll","","",106,[[["pinmut"],["context"]],["poll"]]],[11,"from","","",130,[[["t"]],["t"]]],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"try_into","","",130,[[["self"]],["result"]]],[11,"into","","",130,[[["self"]],["u"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"get_type_id","","",130,[[["self"]],["typeid"]]],[11,"from","","",93,[[["t"]],["t"]]],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"try_into","","",93,[[["self"]],["result"]]],[11,"into","","",93,[[["self"]],["u"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"get_type_id","","",93,[[["self"]],["typeid"]]],[11,"try_poll","","",93,[[["pinmut"],["context"]],["poll"]]],[11,"from","","",109,[[["t"]],["t"]]],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"try_into","","",109,[[["self"]],["result"]]],[11,"into","","",109,[[["self"]],["u"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"get_type_id","","",109,[[["self"]],["typeid"]]],[11,"try_poll","","",109,[[["pinmut"],["context"]],["poll"]]],[11,"from","","",102,[[["t"]],["t"]]],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"try_into","","",102,[[["self"]],["result"]]],[11,"into","","",102,[[["self"]],["u"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"get_type_id","","",102,[[["self"]],["typeid"]]],[11,"try_poll","","",102,[[["pinmut"],["context"]],["poll"]]],[11,"from","","",110,[[["t"]],["t"]]],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"try_into","","",110,[[["self"]],["result"]]],[11,"into","","",110,[[["self"]],["u"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"get_type_id","","",110,[[["self"]],["typeid"]]],[11,"try_poll","","",110,[[["pinmut"],["context"]],["poll"]]],[11,"from","","",124,[[["t"]],["t"]]],[11,"try_from","","",124,[[["u"]],["result"]]],[11,"try_into","","",124,[[["self"]],["result"]]],[11,"into","","",124,[[["self"]],["u"]]],[11,"borrow","","",124,[[["self"]],["t"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]],[11,"get_type_id","","",124,[[["self"]],["typeid"]]],[11,"try_poll","","",124,[[["pinmut"],["context"]],["poll"]]],[11,"from","","",113,[[["t"]],["t"]]],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"try_into","","",113,[[["self"]],["result"]]],[11,"into","","",113,[[["self"]],["u"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"get_type_id","","",113,[[["self"]],["typeid"]]],[11,"try_poll","","",113,[[["pinmut"],["context"]],["poll"]]],[11,"from","","",84,[[["t"]],["t"]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"try_into","","",84,[[["self"]],["result"]]],[11,"into","","",84,[[["self"]],["u"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"get_type_id","","",84,[[["self"]],["typeid"]]],[11,"try_poll","","",84,[[["pinmut"],["context"]],["poll"]]],[11,"from","","",95,[[["t"]],["t"]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"try_into","","",95,[[["self"]],["result"]]],[11,"into","","",95,[[["self"]],["u"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"get_type_id","","",95,[[["self"]],["typeid"]]],[11,"try_poll","","",95,[[["pinmut"],["context"]],["poll"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"try_into","","",82,[[["self"]],["result"]]],[11,"into","","",82,[[["self"]],["u"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"get_type_id","","",82,[[["self"]],["typeid"]]],[11,"try_poll","","",82,[[["pinmut"],["context"]],["poll"]]],[11,"new","futures::io","Creates a new I/O error from a known kind of error as well as an arbitrary error payload.",137,[[["errorkind"],["e"]],["error"]]],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",137,[[],["error"]]],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",137,[[["i32"]],["error"]]],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",137,[[["self"]],["option",["i32"]]]],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",137,[[["self"]],["option",["error"]]]],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error (if any).",137,[[["self"]],["option",["error"]]]],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",137,[[["self"]],["option",["box"]]]],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",137,[[["self"]],["errorkind"]]],[11,"from","","",137,[[["t"]],["t"]]],[11,"try_from","","",137,[[["u"]],["result"]]],[11,"try_into","","",137,[[["self"]],["result"]]],[11,"into","","",137,[[["self"]],["u"]]],[11,"borrow","","",137,[[["self"]],["t"]]],[11,"borrow_mut","","",137,[[["self"]],["t"]]],[11,"get_type_id","","",137,[[["self"]],["typeid"]]],[11,"to_string","","",137,[[["self"]],["string"]]],[11,"zeroing","","Returns a new `Initializer` which will zero out buffers.",147,[[],["initializer"]]],[11,"nop","","Returns a new `Initializer` which will not zero out buffers.",147,[[],["initializer"]]],[11,"should_initialize","","Indicates if a buffer should be initialized.",147,[[["self"]],["bool"]]],[11,"initialize","","Initializes a buffer if necessary.",147,N],[11,"from","","",147,[[["t"]],["t"]]],[11,"try_from","","",147,[[["u"]],["result"]]],[11,"try_into","","",147,[[["self"]],["result"]]],[11,"into","","",147,[[["self"]],["u"]]],[11,"borrow","","",147,[[["self"]],["t"]]],[11,"borrow_mut","","",147,[[["self"]],["t"]]],[11,"get_type_id","","",147,[[["self"]],["typeid"]]],[11,"borrow","","",148,[[["self"]],["t"]]],[11,"borrow_mut","","",148,[[["self"]],["t"]]],[11,"get_type_id","","",148,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"new","","Creates a new `AllowStdIo` from an existing IO object.",72,[[["t"]],["allowstdio"]]],[11,"get_ref","","Returns a reference to the contained IO object.",72,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the contained IO object.",72,[[["self"]],["t"]]],[11,"into_inner","","Consumes self and returns the contained IO object.",72,[[["self"]],["t"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,N],[11,"from","","",107,[[["t"]],["t"]]],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"try_into","","",107,[[["self"]],["result"]]],[11,"into","","",107,[[["self"]],["u"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"get_type_id","","",107,[[["self"]],["typeid"]]],[11,"try_poll","","",107,[[["pinmut"],["context"]],["poll"]]],[11,"from","","",83,[[["t"]],["t"]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"try_into","","",83,[[["self"]],["result"]]],[11,"into","","",83,[[["self"]],["u"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"get_type_id","","",83,[[["self"]],["typeid"]]],[11,"try_poll","","",83,[[["pinmut"],["context"]],["poll"]]],[11,"from","","",89,[[["t"]],["t"]]],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"try_into","","",89,[[["self"]],["result"]]],[11,"into","","",89,[[["self"]],["u"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"get_type_id","","",89,[[["self"]],["typeid"]]],[11,"try_poll","","",89,[[["pinmut"],["context"]],["poll"]]],[11,"from","","",88,[[["t"]],["t"]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"try_into","","",88,[[["self"]],["result"]]],[11,"into","","",88,[[["self"]],["u"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"get_type_id","","",88,[[["self"]],["typeid"]]],[11,"try_poll","","",88,[[["pinmut"],["context"]],["poll"]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"try_into","","",80,[[["self"]],["result"]]],[11,"into","","",80,[[["self"]],["u"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"get_type_id","","",80,[[["self"]],["typeid"]]],[11,"try_poll","","",80,[[["pinmut"],["context"]],["poll"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"try_into","","",76,[[["self"]],["result"]]],[11,"into","","",76,[[["self"]],["u"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"get_type_id","","",76,[[["self"]],["typeid"]]],[11,"from","","",91,[[["t"]],["t"]]],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"try_into","","",91,[[["self"]],["result"]]],[11,"into","","",91,[[["self"]],["u"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"get_type_id","","",91,[[["self"]],["typeid"]]],[11,"try_poll","","",91,[[["pinmut"],["context"]],["poll"]]],[11,"new","","Creates a new window around the buffer `t` defaulting to the entire slice.",74,[[["t"]],["window"]]],[11,"get_ref","","Gets a shared reference to the underlying buffer inside of this `Window`.",74,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable reference to the underlying buffer inside of this `Window`.",74,[[["self"]],["t"]]],[11,"into_inner","","Consumes this `Window`, returning the underlying buffer.",74,[[["self"]],["t"]]],[11,"start","","Returns the starting index of this window into the underlying buffer `T`.",74,[[["self"]],["usize"]]],[11,"end","","Returns the end index of this window into the underlying buffer `T`.",74,[[["self"]],["usize"]]],[11,"set_start","","Changes the starting index of this window to the index specified.",74,[[["self"],["usize"]],["window"]]],[11,"set_end","","Changes the end index of this window to the index specified.",74,[[["self"],["usize"]],["window"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"try_into","","",74,[[["self"]],["result"]]],[11,"into","","",74,[[["self"]],["u"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"get_type_id","","",74,[[["self"]],["typeid"]]],[11,"from","","",96,[[["t"]],["t"]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"try_into","","",96,[[["self"]],["result"]]],[11,"into","","",96,[[["self"]],["u"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"get_type_id","","",96,[[["self"]],["typeid"]]],[11,"try_poll","","",96,[[["pinmut"],["context"]],["poll"]]],[11,"from","","",132,[[["t"]],["t"]]],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"try_into","","",132,[[["self"]],["result"]]],[11,"into","","",132,[[["self"]],["u"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"get_type_id","","",132,[[["self"]],["typeid"]]],[11,"map","futures::task","Change the ready value of this `Poll` with the closure provided",15,[[["self"],["f"]],["poll"]]],[11,"is_ready","","Returns whether this is `Poll::Ready`",15,[[["self"]],["bool"]]],[11,"is_pending","","Returns whether this is `Poll::Pending`",15,[[["self"]],["bool"]]],[11,"map_ok","","Change the success value of this `Poll` with the closure provided",15,[[["self"],["f"]],["poll",["result"]]]],[11,"map_err","","Change the error value of this `Poll` with the closure provided",15,[[["self"],["f"]],["poll",["result"]]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"from","futures::sink","",77,[[["t"]],["t"]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"try_into","","",77,[[["self"]],["result"]]],[11,"into","","",77,[[["self"]],["u"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"get_type_id","","",77,[[["self"]],["typeid"]]],[11,"try_poll","","",77,[[["pinmut"],["context"]],["poll"]]],[11,"from","","",111,[[["t"]],["t"]]],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"try_into","","",111,[[["self"]],["result"]]],[11,"into","","",111,[[["self"]],["u"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"get_type_id","","",111,[[["self"]],["typeid"]]],[11,"try_poll","","",111,[[["pinmut"],["context"]],["poll"]]],[11,"from","","",86,[[["t"]],["t"]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"try_into","","",86,[[["self"]],["result"]]],[11,"into","","",86,[[["self"]],["u"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"get_type_id","","",86,[[["self"]],["typeid"]]],[11,"try_poll","","",86,[[["pinmut"],["context"]],["poll"]]],[11,"from","","",115,[[["t"]],["t"]]],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"try_into","","",115,[[["self"]],["result"]]],[11,"into","","",115,[[["self"]],["u"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"get_type_id","","",115,[[["self"]],["typeid"]]],[11,"try_poll","","",115,[[["pinmut"],["context"]],["poll"]]],[11,"get_ref","","Get a shared reference to the inner sink.",35,[[["self"]],["si"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",35,[[["self"]],["si"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",35,[[["self"]],["si"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"try_poll_next","","",35,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"get_ref","","Get a shared reference to the inner sink.",38,[[["self"]],["si"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",38,[[["self"]],["si"]]],[11,"get_pin_mut","","Get a pinned reference to the inner sink.",38,[[["pinmut",["sinkmaperr"]]],["pinmut"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",38,[[["self"]],["si"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"try_poll_next","","",38,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"get_ref","","Get a shared reference to the inner sink.",63,[[["self"]],["si"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",63,[[["self"]],["si"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",63,[[["self"]],["si"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"try_poll_next","","",63,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"into_inner","","Consumes this combinator, returning the underlying sinks.",129,N],[11,"from","","",129,[[["t"]],["t"]]],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"try_into","","",129,[[["self"]],["result"]]],[11,"into","","",129,[[["self"]],["u"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"get_type_id","","",129,[[["self"]],["typeid"]]],[11,"from","","",133,[[["t"]],["t"]]],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"try_into","","",133,[[["self"]],["result"]]],[11,"into","","",133,[[["self"]],["u"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"get_type_id","","",133,[[["self"]],["typeid"]]],[11,"into_any","","Convert this drain error into any type",135,[[["self"]],["t"]]],[11,"from","","",135,[[["t"]],["t"]]],[11,"try_from","","",135,[[["u"]],["result"]]],[11,"try_into","","",135,[[["self"]],["result"]]],[11,"into","","",135,[[["self"]],["u"]]],[11,"borrow","","",135,[[["self"]],["t"]]],[11,"borrow_mut","","",135,[[["self"]],["t"]]],[11,"get_type_id","","",135,[[["self"]],["typeid"]]],[11,"to_string","","",135,[[["self"]],["string"]]],[11,"get_ref","","Get a shared reference to the inner sink.",64,[[["self"]],["si"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"try_poll_next","","",64,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"from","futures::stream","",69,[[["t"]],["t"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"try_poll_next","","",69,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"try_poll_next","","",53,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"try_poll_next","","",44,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"try_poll_next","","",60,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"try_poll_next","","",42,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"try_poll_next","","",67,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"try_poll_next","","",45,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"from","","",116,[[["t"]],["t"]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"try_into","","",116,[[["self"]],["result"]]],[11,"into","","",116,[[["self"]],["u"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"get_type_id","","",116,[[["self"]],["typeid"]]],[11,"try_poll","","",116,[[["pinmut"],["context"]],["poll"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",39,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",39,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",39,[[["self"]],["st"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"try_poll_next","","",39,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",61,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",61,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",61,[[["self"]],["st"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"try_poll_next","","",61,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",41,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",41,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",41,[[["self"]],["st"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"try_poll_next","","",41,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"from","","",104,[[["t"]],["t"]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"try_into","","",104,[[["self"]],["result"]]],[11,"into","","",104,[[["self"]],["u"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"get_type_id","","",104,[[["self"]],["typeid"]]],[11,"try_poll","","",104,[[["pinmut"],["context"]],["poll"]]],[11,"from","","",126,[[["t"]],["t"]]],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"try_into","","",126,[[["self"]],["result"]]],[11,"into","","",126,[[["self"]],["u"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"get_type_id","","",126,[[["self"]],["typeid"]]],[11,"try_poll","","",126,[[["pinmut"],["context"]],["poll"]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"try_into","","",78,[[["self"]],["result"]]],[11,"into","","",78,[[["self"]],["u"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"get_type_id","","",78,[[["self"]],["typeid"]]],[11,"is_done","","Returns whether the underlying stream has finished or not.",54,[[["self"]],["bool"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",54,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",54,[[["self"]],["st"]]],[11,"get_pin_mut","","Acquires a mutable pinned reference to the underlying stream that this combinator is pulling from.",54,[[["pinmut",["fuse"]]],["pinmut"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",54,[[["self"]],["st"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"try_poll_next","","",54,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",123,[[["self"]],["option"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",123,[[["self"]],["option"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",123,[[["self"]],["option"]]],[11,"from","","",123,[[["t"]],["t"]]],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"try_into","","",123,[[["self"]],["result"]]],[11,"into","","",123,[[["self"]],["u"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"get_type_id","","",123,[[["self"]],["typeid"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",50,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",50,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",50,[[["self"]],["st"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"try_poll_next","","",50,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",59,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",59,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",59,[[["self"]],["st"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"try_poll_next","","",59,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"from","","",122,[[["t"]],["t"]]],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"try_into","","",122,[[["self"]],["result"]]],[11,"into","","",122,[[["self"]],["u"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"get_type_id","","",122,[[["self"]],["typeid"]]],[11,"peek","","Peek retrieves a reference to the next item in the stream.",66,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"try_poll_next","","",66,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"try_poll_next","","",40,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",43,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",43,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",43,[[["self"]],["st"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"try_poll_next","","",43,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",68,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",68,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",68,[[["self"]],["st"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"try_poll_next","","",68,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",37,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",37,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",37,[[["self"]],["st"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"try_poll_next","","",37,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",47,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",47,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",47,[[["self"]],["st"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"try_poll_next","","",47,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"try_poll_next","","",56,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"new","","Constructs a new, empty `FuturesOrdered`",57,[[],["futuresordered"]]],[11,"len","","Returns the number of futures contained in the queue.",57,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the queue contains no futures",57,[[["self"]],["bool"]]],[11,"push","","Push a future into the queue.",57,N],[11,"from","","",57,[[["t"]],["t"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"try_poll_next","","",57,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"new","","Constructs a new, empty [`FuturesUnordered`].",33,[[],["futuresunordered"]]],[11,"len","","Returns the number of futures contained in the set.",33,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the set contains no futures.",33,[[["self"]],["bool"]]],[11,"push","","Push a future into the set.",33,N],[11,"iter_mut","","Returns an iterator that allows modifying each future in the set.",33,[[["self"]],["itermut"]]],[11,"iter_pin_mut","","Returns an iterator that allows modifying each future in the set.",33,[[["pinmut",["futuresunordered"]]],["iterpinmut"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"try_poll_next","","",33,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",34,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",34,[[["self"]],["st"]]],[11,"get_pin_mut","","Acquires a pinned mutable reference to the underlying stream that this combinator is pulling from.",34,[[["pinmut",["bufferunordered"]]],["pinmut"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",34,[[["self"]],["st"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"try_poll_next","","",34,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",62,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",62,[[["self"]],["st"]]],[11,"get_pin_mut","","Acquires a mutable pinned reference to the underlying stream that this combinator is pulling from.",62,[[["pinmut",["buffered"]]],["pinmut"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",62,[[["self"]],["st"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"try_poll_next","","",62,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"try_poll_next","","",48,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",46,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",46,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",46,[[["self"]],["st"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"from","","",100,[[["t"]],["t"]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"try_into","","",100,[[["self"]],["result"]]],[11,"into","","",100,[[["self"]],["u"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"get_type_id","","",100,[[["self"]],["typeid"]]],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",58,[[["self"],["splitsink"]],["result",["reuniteerror"]]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"try_poll_next","","",58,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",136,[[["self"],["splitstream"]],["result",["reuniteerror"]]]],[11,"from","","",136,[[["t"]],["t"]]],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"try_into","","",136,[[["self"]],["result"]]],[11,"into","","",136,[[["self"]],["u"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"get_type_id","","",136,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"to_string","","",19,[[["self"]],["string"]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"try_into","","",79,[[["self"]],["result"]]],[11,"into","","",79,[[["self"]],["u"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"get_type_id","","",79,[[["self"]],["typeid"]]],[11,"try_poll","","",79,[[["pinmut"],["context"]],["poll"]]],[11,"from","","",125,[[["t"]],["t"]]],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"try_into","","",125,[[["self"]],["result"]]],[11,"into","","",125,[[["self"]],["u"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"get_type_id","","",125,[[["self"]],["typeid"]]],[11,"try_poll","","",125,[[["pinmut"],["context"]],["poll"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"try_poll_next","","",65,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"from","","",127,[[["t"]],["t"]]],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"try_into","","",127,[[["self"]],["result"]]],[11,"into","","",127,[[["self"]],["u"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"get_type_id","","",127,[[["self"]],["typeid"]]],[11,"try_poll","","",127,[[["pinmut"],["context"]],["poll"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",49,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",49,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",49,[[["self"]],["st"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"try_poll_next","","",49,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",70,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",70,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",70,[[["self"]],["st"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"try_poll_next","","",70,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"from","","",117,[[["t"]],["t"]]],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"try_into","","",117,[[["self"]],["result"]]],[11,"into","","",117,[[["self"]],["u"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"get_type_id","","",117,[[["self"]],["typeid"]]],[11,"try_poll","","",117,[[["pinmut"],["context"]],["poll"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",36,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",36,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",36,[[["self"]],["st"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"try_poll_next","","",36,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"new","futures::task","Create a new task `Context` with the provided `local_waker`, `waker`, and `spawner`.",31,[[["localwaker"],["spawn"]],["context"]]],[11,"local_waker","","Get the `LocalWaker` associated with the current task.",31,[[["self"]],["localwaker"]]],[11,"waker","","Get the `Waker` associated with the current task.",31,[[["self"]],["waker"]]],[11,"spawner","","Get the spawner associated with this task.",31,[[["self"]],["spawn"]]],[11,"with_waker","","Produce a context like the current one, but using the given waker instead.",31,[[["self"],["localwaker"]],["context"]]],[11,"with_spawner","","Produce a context like the current one, but using the given spawner instead.",31,[[["self"],["sp"]],["context"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"new","","Constructs a new `Waker` directly.",29,[[["nonnull",["unsafewake"]]],["waker"]]],[11,"wake","","Wake up the task associated with this `Waker`.",29,N],[11,"will_wake","","Returns whether or not this `Waker` and `other` awaken the same task.",29,[[["self"],["waker"]],["bool"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"shutdown","","Spawning is failing because the executor has been shut down.",32,[[],["spawnerrorkind"]]],[11,"is_shutdown","","Check whether this error is the `shutdown` error.",32,[[["self"]],["bool"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"new","","Create a new [`LocalWakerRef`] from a [`LocalWaker`].",73,[[["localwaker"]],["localwakerref"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"forget","","Drops this handle without canceling the underlying future.",94,N],[11,"from","","",94,[[["t"]],["t"]]],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"try_into","","",94,[[["self"]],["result"]]],[11,"into","","",94,[[["self"]],["u"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"get_type_id","","",94,[[["self"]],["typeid"]]],[11,"try_poll","","",94,[[["pinmut"],["context"]],["poll"]]],[11,"new","","Create an `AtomicWaker`.",134,[[],["atomicwaker"]]],[11,"register","","Registers the waker to be notified on calls to `wake`.",134,N],[11,"wake","","Calls `wake` on the last `Waker` passed to `register`.",134,N],[11,"from","","",134,[[["t"]],["t"]]],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"try_into","","",134,[[["self"]],["result"]]],[11,"into","","",134,[[["self"]],["u"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"get_type_id","","",134,[[["self"]],["typeid"]]]],"paths":[[8,"Future"],[8,"TryFuture"],[8,"UnsafeFutureObj"],[4,"MaybeDone"],[8,"FutureExt"],[8,"TryFutureExt"],[4,"ErrorKind"],[8,"AsyncRead"],[8,"AsyncWrite"],[8,"AsyncReadExt"],[8,"AsyncWriteExt"],[8,"Stream"],[8,"TryStream"],[8,"StreamExt"],[8,"TryStreamExt"],[4,"Poll"],[8,"SpawnExt"],[8,"Sink"],[8,"SinkExt"],[3,"ReuniteError"],[8,"Spawn"],[8,"UnsafeWake"],[3,"SpawnObjError"],[3,"SpawnLocalObjError"],[8,"Wake"],[3,"SpawnError"],[3,"Receiver"],[3,"FutureObj"],[3,"LocalFutureObj"],[3,"Waker"],[3,"LocalWaker"],[3,"Context"],[3,"SpawnErrorKind"],[3,"FuturesUnordered"],[3,"BufferUnordered"],[3,"SinkErrInto"],[3,"TryBufferUnordered"],[3,"Take"],[3,"SinkMapErr"],[3,"Filter"],[3,"Select"],[3,"Flatten"],[3,"PollFn"],[3,"Skip"],[3,"Empty"],[3,"Chain"],[3,"Chunks"],[3,"TakeWhile"],[3,"CatchUnwind"],[3,"TrySkipWhile"],[3,"Inspect"],[3,"Zip"],[3,"IntoStream"],[3,"Repeat"],[3,"Fuse"],[3,"FlattenStream"],[3,"Then"],[3,"FuturesOrdered"],[3,"SplitStream"],[3,"Map"],[3,"Once"],[3,"FilterMap"],[3,"Buffered"],[3,"With"],[3,"Buffer"],[3,"ErrInto"],[3,"Peekable"],[3,"Unfold"],[3,"SkipWhile"],[3,"Iter"],[3,"IntoStream"],[3,"Aborted"],[3,"AllowStdIo"],[3,"LocalWakerRef"],[3,"Window"],[3,"Shared"],[3,"ReadHalf"],[3,"Close"],[3,"ForEach"],[3,"TryNext"],[3,"ReadExact"],[3,"Abortable"],[3,"TryJoin5"],[3,"CopyInto"],[3,"TryJoin3"],[3,"Join4"],[3,"Send"],[3,"PollFn"],[3,"Read"],[3,"Flush"],[3,"Join3"],[3,"ReadToEnd"],[3,"AndThen"],[3,"IntoFuture"],[3,"JoinHandle"],[3,"TryJoin4"],[3,"WriteAll"],[3,"Join"],[3,"OptionFuture"],[3,"Join5"],[3,"Collect"],[3,"Map"],[3,"MapOk"],[3,"Ready"],[3,"Fold"],[3,"Then"],[3,"ErrInto"],[3,"Close"],[3,"Lazy"],[3,"MapErr"],[3,"OrElse"],[3,"Flush"],[3,"CatchUnwind"],[3,"TryJoin"],[3,"Flatten"],[3,"SendAll"],[3,"Concat"],[3,"TryCollect"],[3,"WithSpawner"],[3,"Empty"],[3,"Inspect"],[3,"Fuse"],[3,"Next"],[3,"StreamFuture"],[3,"UnwrapOrElse"],[3,"TryForEach"],[3,"Forward"],[3,"TryFold"],[3,"AbortHandle"],[3,"Fanout"],[3,"FlattenSink"],[3,"AbortRegistration"],[3,"WriteHalf"],[3,"Drain"],[3,"AtomicWaker"],[4,"DrainError"],[3,"SplitSink"],[3,"Error"],[3,"Sender"],[3,"UnboundedSender"],[3,"SendError"],[3,"Canceled"],[3,"TrySendError"],[3,"TryRecvError"],[3,"Sender"],[3,"Receiver"],[3,"UnboundedReceiver"],[3,"Initializer"],[3,"IoVec"],[3,"BlockingStream"],[3,"ThreadPool"],[3,"LocalSpawn"],[3,"Enter"],[3,"LocalPool"],[3,"EnterError"],[3,"ThreadPoolBuilder"]]};
searchIndex["futures_channel"]={"doc":"Asynchronous channels.","items":[[0,"mpsc","futures_channel","A multi-producer, single-consumer queue for sending values across asynchronous tasks.",N,N],[3,"Sender","futures_channel::mpsc","The transmission end of a bounded mpsc channel.",N,N],[3,"UnboundedSender","","The transmission end of an unbounded mpsc channel.",N,N],[3,"Receiver","","The receiving end of a bounded mpsc channel.",N,N],[3,"UnboundedReceiver","","The receiving end of an unbounded mpsc channel.",N,N],[3,"SendError","","The error type for `Sender`s used as `Sink`s.",N,N],[3,"TrySendError","","The error type returned from `try_send`.",N,N],[3,"TryRecvError","","The error type returned from `try_next`.",N,N],[5,"channel","","Creates a bounded mpsc channel for communicating between asynchronous tasks.",N,N],[5,"unbounded","","Creates an unbounded mpsc channel for communicating between asynchronous tasks.",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["senderror"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["senderror"]],["bool"]]],[11,"ne","","",4,[[["self"],["senderror"]],["bool"]]],[11,"clone","","",5,[[["self"]],["trysenderror"]]],[11,"eq","","",5,[[["self"],["trysenderror"]],["bool"]]],[11,"ne","","",5,[[["self"],["trysenderror"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"description","","",4,[[["self"]],["str"]]],[11,"is_full","","Returns true if this error is a result of the channel being full.",4,[[["self"]],["bool"]]],[11,"is_disconnected","","Returns true if this error is a result of the receiver being dropped.",4,[[["self"]],["bool"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"description","","",5,[[["self"]],["str"]]],[11,"is_full","","Returns true if this error is a result of the channel being full.",5,[[["self"]],["bool"]]],[11,"is_disconnected","","Returns true if this error is a result of the receiver being dropped.",5,[[["self"]],["bool"]]],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",5,[[["self"]],["t"]]],[11,"into_send_error","","Drops the message and converts into a `SendError`.",5,[[["self"]],["senderror"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"description","","",6,[[["self"]],["str"]]],[11,"try_send","","Attempts to send a message on this `Sender`, returning the message if there was an error.",0,[[["self"],["t"]],["result",["trysenderror"]]]],[11,"start_send","","Send a message on the channel.",0,[[["self"],["t"]],["result",["senderror"]]]],[11,"poll_ready","","Polls the channel to determine if there is guaranteed capacity to send at least one item without waiting.",0,[[["self"],["context"]],["poll",["result"]]]],[11,"is_closed","","Returns whether this channel is closed without needing a context.",0,[[["self"]],["bool"]]],[11,"close_channel","","Closes this channel from the sender side, preventing any new messages.",0,[[["self"]]]],[11,"poll_ready","","Check if the channel is ready to receive a message.",1,[[["self"],["context"]],["poll",["result"]]]],[11,"is_closed","","Returns whether this channel is closed without needing a context.",1,[[["self"]],["bool"]]],[11,"close_channel","","Closes this channel from the sender side, preventing any new messages.",1,[[["self"]]]],[11,"start_send","","Send a message on the channel.",1,[[["self"],["t"]],["result",["senderror"]]]],[11,"unbounded_send","","Sends a message along this channel.",1,[[["self"],["t"]],["result",["trysenderror"]]]],[11,"clone","","",1,[[["self"]],["unboundedsender"]]],[11,"clone","","",0,[[["self"]],["sender"]]],[11,"drop","","",0,[[["self"]]]],[11,"close","","Closes the receiving half of a channel, without dropping it.",2,[[["self"]]]],[11,"try_next","","Tries to receive the next message without notifying a context if empty.",2,[[["self"]],["result",["option","tryrecverror"]]]],[11,"poll_next","","",2,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"drop","","",2,[[["self"]]]],[11,"close","","Closes the receiving half of the channel, without dropping it.",3,[[["self"]]]],[11,"try_next","","Tries to receive the next message without notifying a context if empty.",3,[[["self"]],["result",["option","tryrecverror"]]]],[11,"poll_next","","",3,[[["pinmut"],["context"]],["poll",["option"]]]],[0,"oneshot","futures_channel","A channel for sending a single message between asynchronous tasks.",N,N],[3,"Receiver","futures_channel::oneshot","A future for a value that will be provided by another asynchronous task.",N,N],[3,"Sender","","A means of transmitting a single value to another task.",N,N],[3,"Canceled","","Error returned from a `Receiver` when the corresponding `Sender` is dropped.",N,N],[5,"channel","","Creates a new one-shot channel for sending values across asynchronous tasks.",N,N],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"send","","Completes this oneshot with a successful result.",8,[[["self"],["t"]],["result"]]],[11,"poll_cancel","","Polls this `Sender` half to detect whether its associated `Receiver` with has been dropped.",8,[[["self"],["context"]],["poll"]]],[11,"is_canceled","","Tests to see whether this `Sender`'s corresponding `Receiver` has been dropped.",8,[[["self"]],["bool"]]],[11,"drop","","",8,[[["self"]]]],[11,"clone","","",9,[[["self"]],["canceled"]]],[11,"eq","","",9,[[["self"],["canceled"]],["bool"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"description","","",9,[[["self"]],["str"]]],[11,"close","","Gracefully close this receiver, preventing any subsequent attempts to send to it.",7,[[["self"]]]],[11,"try_recv","","Attempts to receive a message outside of the context of a task.",7,[[["self"]],["result",["option","canceled"]]]],[11,"poll","","",7,[[["pinmut"],["context"]],["poll",["result"]]]],[11,"drop","","",7,[[["self"]]]],[11,"from","futures_channel::mpsc","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_poll_next","","",2,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_poll_next","","",3,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"from","futures_channel::oneshot","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_poll","","",7,[[["pinmut"],["context"]],["poll"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N]],"paths":[[3,"Sender"],[3,"UnboundedSender"],[3,"Receiver"],[3,"UnboundedReceiver"],[3,"SendError"],[3,"TrySendError"],[3,"TryRecvError"],[3,"Receiver"],[3,"Sender"],[3,"Canceled"]]};
searchIndex["futures_core"]={"doc":"Core traits and types for asynchronous operations in Rust.","items":[[0,"future","futures_core","Futures.",N,N],[8,"Future","futures_core::future","A future represents an asychronous computation.",N,N],[16,"Output","","The result of the `Future`.",0,N],[10,"poll","","Attempt to resolve the future to a final value, registering the current task for wakeup if the value is not yet available.",0,[[["pinmut"],["context"]],["poll"]]],[3,"FutureObj","","A custom trait object for polling futures, roughly akin to `Box<dyn Future<Output = T> + Send + 'a>`.",N,N],[3,"LocalFutureObj","","A custom trait object for polling futures, roughly akin to `Box<dyn Future<Output = T> + 'a>`.",N,N],[8,"UnsafeFutureObj","","A custom implementation of a future trait object for `FutureObj`, providing a hand-rolled vtable.",N,N],[10,"into_raw","","Convert an owned instance into a (conceptually owned) void pointer.",1,N],[10,"poll","","Poll the future represented by the given void pointer.",1,N],[10,"drop","","Drops the future represented by the given void pointer.",1,N],[8,"TryFuture","","A convenience for futures that return `Result` values that includes a variety of adapters tailored to such futures.",N,N],[16,"Ok","","The type of successful values yielded by this future",2,N],[16,"Error","","The type of failures yielded by this future",2,N],[10,"try_poll","","Poll this `TryFuture` as if it were a `Future`.",2,[[["pinmut"],["context"]],["poll",["result"]]]],[0,"stream","futures_core","Asynchronous streams.",N,N],[8,"Stream","futures_core::stream","A stream of values produced asynchronously.",N,N],[16,"Item","","Values yielded by the stream.",3,N],[10,"poll_next","","Attempt to pull out the next value of this stream, registering the current task for wakeup if the value is not yet available, and returning `None` if the stream is exhausted.",3,[[["pinmut"],["context"]],["poll",["option"]]]],[8,"TryStream","","A convenience for streams that return `Result` values that includes a variety of adapters tailored to such futures.",N,N],[16,"Ok","","The type of successful values yielded by this future",4,N],[16,"Error","","The type of failures yielded by this future",4,N],[10,"try_poll_next","","Poll this `TryStream` as if it were a `Stream`.",4,[[["pinmut"],["context"]],["poll",["option"]]]],[0,"task","futures_core","Task notification.",N,N],[3,"Context","futures_core::task","Information about the currently-running task.",N,N],[4,"Poll","","Indicates whether a value is available or if the current task has been scheduled to receive a wakeup instead.",N,N],[13,"Ready","","Represents that a value is immediately ready.",5,N],[13,"Pending","","Represents that a value is not ready yet.",5,N],[8,"Spawn","","Spawns tasks that poll futures to completion onto its associated task executor.",N,N],[10,"spawn_obj","","Spawns a new task with the given future. The future will be polled until completion.",6,[[["self"],["futureobj"]],["result",["spawnobjerror"]]]],[11,"status","","Determines whether the executor is able to spawn new tasks.",6,[[["self"]],["result",["spawnerrorkind"]]]],[3,"Waker","","A `Waker` is a handle for waking up a task by notifying its executor that it is ready to be run.",N,N],[3,"LocalWaker","","A `LocalWaker` is a handle for waking up a task by notifying its executor that it is ready to be run.",N,N],[8,"UnsafeWake","","An unsafe trait for implementing custom memory management for a `Waker` or `LocalWaker`.",N,N],[10,"clone_raw","","Creates a clone of this `UnsafeWake` and stores it behind a `Waker`.",7,[[["self"]],["waker"]]],[10,"drop_raw","","Drops this instance of `UnsafeWake`, deallocating resources associated with it.",7,N],[10,"wake","","Indicates that the associated task is ready to make progress and should be `poll`ed.",7,N],[11,"wake_local","","Indicates that the associated task is ready to make progress and should be `poll`ed. This function is the same as `wake`, but can only be called from the thread that this `UnsafeWake` is \"local\" to. This allows for implementors to provide specialized wakeup behavior specific to the current thread. This function is called by `LocalWaker::wake`.",7,N],[3,"SpawnErrorKind","","Provides the reason that an executor was unable to spawn.",N,N],[3,"SpawnObjError","","The result of a failed spawn",N,N],[12,"kind","","The kind of error",8,N],[12,"future","","The future for which spawning inside a task was attempted",8,N],[3,"SpawnLocalObjError","","The result of a failed spawn",N,N],[12,"kind","","The kind of error",9,N],[12,"future","","The future for which spawning inside a task was attempted",9,N],[8,"Wake","","A way of waking up a specific task.",N,N],[10,"wake","","Indicates that the associated task is ready to make progress and should be `poll`ed.",10,N],[11,"wake_local","","Indicates that the associated task is ready to make progress and should be `poll`ed. This function is like `wake`, but can only be called from the thread on which this `Wake` was created.",10,N],[5,"local_waker","","Creates a `LocalWaker` from a local `wake`.",N,[[["arc"]],["localwaker"]]],[5,"local_waker_from_nonlocal","","Creates a `LocalWaker` from a non-local `wake`.",N,[[["arc"]],["localwaker"]]],[11,"poll","futures_core::future","",11,[[["pinmut",["futureobj"]],["context"]],["poll"]]],[11,"poll","","",12,[[["pinmut",["localfutureobj"]],["context"]],["poll"]]],[11,"into_result","futures_core::task","",5,[[["self"]],["result"]]],[11,"from_error","","",5,N],[11,"from_ok","","",5,N],[11,"into_result","","",5,[[["self"]],["result"]]],[11,"from_error","","",5,N],[11,"from_ok","","",5,N],[11,"from","futures_core::future","",12,[[["futureobj"]],["localfutureobj"]]],[11,"from","futures_core::task","",13,[[["localwaker"]],["waker"]]],[11,"from","","",5,[[["t"]],["poll"]]],[11,"hash","","",5,N],[11,"clone","","",14,[[["self"]],["localwaker"]]],[11,"clone","","",13,[[["self"]],["waker"]]],[11,"clone","","",5,[[["self"]],["poll"]]],[11,"partial_cmp","","",5,[[["self"],["poll"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["poll"]],["bool"]]],[11,"le","","",5,[[["self"],["poll"]],["bool"]]],[11,"gt","","",5,[[["self"],["poll"]],["bool"]]],[11,"ge","","",5,[[["self"],["poll"]],["bool"]]],[11,"cmp","","",5,[[["self"],["poll"]],["ordering"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures_core::future","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures_core::task","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures_core::future","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures_core::task","",16,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",5,[[["self"],["poll"]],["bool"]]],[11,"ne","","",5,[[["self"],["poll"]],["bool"]]],[11,"drop","","",13,N],[11,"drop","","",14,N],[11,"drop","futures_core::future","",12,N],[11,"from","","",11,[[["box"]],["futureobj"]]],[11,"from","","",12,[[["pinbox"]],["localfutureobj"]]],[11,"from","futures_core::task","",13,[[["arc"]],["waker"]]],[11,"from","futures_core::future","",12,[[["box"]],["localfutureobj"]]],[11,"from","","",11,[[["pinbox"]],["futureobj"]]],[11,"new","","Create a `FutureObj` from a custom trait object representation.",11,[[["f"]],["futureobj"]]],[11,"try_poll","","",11,[[["pinmut"],["context"]],["poll"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"new","","Create a `LocalFutureObj` from a custom trait object representation.",12,[[["f"]],["localfutureobj"]]],[11,"into_future_obj","","Converts the `LocalFutureObj` into a `FutureObj` To make this operation safe one has to ensure that the `UnsafeFutureObj` instance from which this `LocalFutureObj` was created actually implements `Send`.",12,[[["self"]],["futureobj"]]],[11,"try_poll","","",12,[[["pinmut"],["context"]],["poll"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"new","futures_core::task","Create a new task `Context` with the provided `local_waker`, `waker`, and `spawner`.",15,[[["localwaker"],["spawn"]],["context"]]],[11,"local_waker","","Get the `LocalWaker` associated with the current task.",15,[[["self"]],["localwaker"]]],[11,"waker","","Get the `Waker` associated with the current task.",15,[[["self"]],["waker"]]],[11,"spawner","","Get the spawner associated with this task.",15,[[["self"]],["spawn"]]],[11,"with_waker","","Produce a context like the current one, but using the given waker instead.",15,[[["self"],["localwaker"]],["context"]]],[11,"with_spawner","","Produce a context like the current one, but using the given spawner instead.",15,[[["self"],["sp"]],["context"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"map","","Change the ready value of this `Poll` with the closure provided",5,[[["self"],["f"]],["poll"]]],[11,"is_ready","","Returns whether this is `Poll::Ready`",5,[[["self"]],["bool"]]],[11,"is_pending","","Returns whether this is `Poll::Pending`",5,[[["self"]],["bool"]]],[11,"map_ok","","Change the success value of this `Poll` with the closure provided",5,[[["self"],["f"]],["poll",["result"]]]],[11,"map_err","","Change the error value of this `Poll` with the closure provided",5,[[["self"],["f"]],["poll",["result"]]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"new","","Constructs a new `Waker` directly.",13,[[["nonnull",["unsafewake"]]],["waker"]]],[11,"wake","","Wake up the task associated with this `Waker`.",13,N],[11,"will_wake","","Returns whether or not this `Waker` and `other` awaken the same task.",13,[[["self"],["waker"]],["bool"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"new","","Constructs a new `LocalWaker` directly.",14,[[["nonnull",["unsafewake"]]],["localwaker"]]],[11,"wake","","Wake up the task associated with this `LocalWaker`.",14,N],[11,"will_wake","","Returns whether or not this `LocalWaker` and `other` `LocalWaker` awaken the same task.",14,[[["self"],["localwaker"]],["bool"]]],[11,"will_wake_nonlocal","","Returns whether or not this `LocalWaker` and `other` `Waker` awaken the same task.",14,[[["self"],["waker"]],["bool"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"shutdown","","Spawning is failing because the executor has been shut down.",16,[[],["spawnerrorkind"]]],[11,"is_shutdown","","Check whether this error is the `shutdown` error.",16,[[["self"]],["bool"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]]],"paths":[[8,"Future"],[8,"UnsafeFutureObj"],[8,"TryFuture"],[8,"Stream"],[8,"TryStream"],[4,"Poll"],[8,"Spawn"],[8,"UnsafeWake"],[3,"SpawnObjError"],[3,"SpawnLocalObjError"],[8,"Wake"],[3,"FutureObj"],[3,"LocalFutureObj"],[3,"Waker"],[3,"LocalWaker"],[3,"Context"],[3,"SpawnErrorKind"]]};
searchIndex["futures_executor"]={"doc":"Built-in executors and related tools.","items":[[3,"BlockingStream","futures_executor","An iterator which blocks on values from a stream until they become available.",N,N],[3,"LocalPool","","A single-threaded task pool for polling futures to completion.",N,N],[3,"LocalSpawn","","A handle to a `LocalPool` that implements `Spawn`.",N,N],[3,"ThreadPool","","A general-purpose thread pool for scheduling tasks that poll futures to completion.",N,N],[3,"ThreadPoolBuilder","","Thread pool configuration object.",N,N],[3,"Enter","","Represents an executor context.",N,N],[3,"EnterError","","An error returned by `enter` if an execution scope has already been entered.",N,N],[5,"block_on","","Run a future to completion on the current thread.",N,N],[5,"block_on_stream","","Turn a stream into a blocking iterator.",N,[[["s"]],["blockingstream"]]],[5,"enter","","Marks the current thread as being within the dynamic extent of an executor.",N,[[],["result",["enter","entererror"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["localspawn"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new, empty pool of tasks.",0,[[],["localpool"]]],[11,"spawner","","Get a clonable handle to the pool as a [`Spawn`].",0,[[["self"]],["localspawn"]]],[11,"run","","Run all tasks in the pool to completion.",0,[[["self"],["sp"]]]],[11,"run_until","","Runs all the tasks in the pool until the given future completes.",0,N],[11,"default","","",0,[[],["self"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"deref","","",2,N],[11,"deref_mut","","",2,N],[11,"into_inner","","Convert this `BlockingStream` into the inner `Stream` type.",2,[[["self"]],["s"]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"spawn_obj","","",1,[[["self"],["futureobj"]],["result",["spawnobjerror"]]]],[11,"status","","",1,[[["self"]],["result",["spawnerrorkind"]]]],[11,"spawn_local_obj","","Spawn a non-`Send` future onto the associated `LocalPool`.",1,[[["self"],["localfutureobj"]],["result",["spawnlocalobjerror"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new thread pool with the default configuration.",3,[[],["result",["threadpool","error"]]]],[11,"builder","","Create a default thread pool configuration, which can then be customized.",3,[[],["threadpoolbuilder"]]],[11,"run","","Runs the given future with this thread pool as the default spawner for spawning tasks.",3,N],[11,"spawn_obj","","",3,[[["self"],["futureobj"]],["result",["spawnobjerror"]]]],[11,"clone","","",3,[[["self"]],["threadpool"]]],[11,"drop","","",3,[[["self"]]]],[11,"new","","Create a default thread pool configuration.",4,[[],["threadpoolbuilder"]]],[11,"pool_size","","Set size of a future ThreadPool",4,[[["self"],["usize"]],["self"]]],[11,"stack_size","","Set stack size of threads in the pool.",4,[[["self"],["usize"]],["self"]]],[11,"name_prefix","","Set thread name prefix of a future ThreadPool.",4,[[["self"],["s"]],["self"]]],[11,"after_start","","Execute the closure `f` immediately after each worker thread is started, but before running any tasks on it.",4,[[["self"],["f"]],["self"]]],[11,"before_stop","","Execute closure `f` just prior to shutting down each worker thread.",4,[[["self"],["f"]],["self"]]],[11,"create","","Create a `ThreadPool` with the given configuration.",4,[[["self"]],["result",["threadpool","error"]]]],[11,"default","","",4,[[],["self"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"drop","","",6,[[["self"]]]]],"paths":[[3,"LocalPool"],[3,"LocalSpawn"],[3,"BlockingStream"],[3,"ThreadPool"],[3,"ThreadPoolBuilder"],[3,"EnterError"],[3,"Enter"]]};
searchIndex["futures_io"]={"doc":"Asynchronous I/O","items":[[3,"IoVec","futures_io","A specialized byte slice type for performing vectored I/O operations.",N,N],[3,"Error","","The error type for I/O operations of the [`Read`], [`Write`], [`Seek`], and associated traits.",N,N],[4,"ErrorKind","","A list specifying general categories of I/O error.",N,N],[13,"NotFound","","An entity was not found, often a file.",0,N],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",0,N],[13,"ConnectionRefused","","The connection was refused by the remote server.",0,N],[13,"ConnectionReset","","The connection was reset by the remote server.",0,N],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",0,N],[13,"NotConnected","","The network operation failed because it was not connected yet.",0,N],[13,"AddrInUse","","A socket address could not be bound because the address is already in use elsewhere.",0,N],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not local.",0,N],[13,"BrokenPipe","","The operation failed because a pipe was closed.",0,N],[13,"AlreadyExists","","An entity already exists, often a file.",0,N],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was requested to not occur.",0,N],[13,"InvalidInput","","A parameter was incorrect.",0,N],[13,"InvalidData","","Data not valid for the operation were encountered.",0,N],[13,"TimedOut","","The I/O operation's timeout expired, causing it to be canceled.",0,N],[13,"WriteZero","","An error returned when an operation could not be completed because a call to [`write`] returned [`Ok(0)`].",0,N],[13,"Interrupted","","This operation was interrupted.",0,N],[13,"Other","","Any I/O error not part of this list.",0,N],[13,"UnexpectedEof","","An error returned when an operation could not be completed because an \"end of file\" was reached prematurely.",0,N],[6,"Result","","A specialized `Result` type for I/O operations.",N,N],[3,"Initializer","","A type used to conditionally initialize buffers passed to `AsyncRead` methods, modeled after `std`.",N,N],[8,"AsyncRead","","Read bytes asynchronously.",N,N],[11,"initializer","","Determines if this `AsyncRead`er can work with buffers of uninitialized memory.",1,[[["self"]],["initializer"]]],[10,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",1,N],[11,"poll_vectored_read","","Attempt to read from the `AsyncRead` into `vec` using vectored IO operations.",1,N],[8,"AsyncWrite","","Write bytes asynchronously.",N,N],[10,"poll_write","","Attempt to write bytes from `buf` into the object.",2,N],[11,"poll_vectored_write","","Attempt to write bytes from `vec` into the object using vectored IO operations.",2,N],[10,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",2,[[["self"],["context"]],["poll",["result"]]]],[10,"poll_close","","Attempt to close the object.",2,[[["self"],["context"]],["poll",["result"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"zeroing","","Returns a new `Initializer` which will zero out buffers.",3,[[],["initializer"]]],[11,"nop","","Returns a new `Initializer` which will not zero out buffers.",3,[[],["initializer"]]],[11,"should_initialize","","Indicates if a buffer should be initialized.",3,[[["self"]],["bool"]]],[11,"initialize","","Initializes a buffer if necessary.",3,N],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"partial_cmp","","",0,[[["self"],["errorkind"]],["option",["ordering"]]]],[11,"description","","",5,[[["self"]],["str"]]],[11,"cause","","",5,[[["self"]],["option",["error"]]]],[11,"cmp","","",0,[[["self"],["errorkind"]],["ordering"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",0,[[["self"]],["errorkind"]]],[11,"hash","","",0,N],[11,"eq","","",0,[[["self"],["errorkind"]],["bool"]]],[11,"from","","",5,[[["errorkind"]],["error"]]],[11,"from","","",5,[[["intoinnererror"]],["error"]]],[11,"from","","Converts a [`NulError`] into a [`io::Error`].",5,[[["nulerror"]],["error"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"deref","","",4,N],[11,"deref_mut","","",4,N],[11,"new","","Creates a new I/O error from a known kind of error as well as an arbitrary error payload.",5,[[["errorkind"],["e"]],["error"]]],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",5,[[],["error"]]],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",5,[[["i32"]],["error"]]],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",5,[[["self"]],["option",["i32"]]]],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",5,[[["self"]],["option",["error"]]]],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error (if any).",5,[[["self"]],["option",["error"]]]],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",5,[[["self"]],["option",["box"]]]],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",5,[[["self"]],["errorkind"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]]],"paths":[[4,"ErrorKind"],[8,"AsyncRead"],[8,"AsyncWrite"],[3,"Initializer"],[3,"IoVec"],[3,"Error"]]};
searchIndex["futures_sink"]={"doc":"Asynchronous sinks","items":[[4,"VecSinkError","futures_sink","The error type for `Vec` and `VecDequeue` when used as `Sink`s. Values of this type can never be created.",N,N],[8,"Sink","","A `Sink` is a value into which other values can be sent, asynchronously.",N,N],[16,"SinkItem","","The type of value that the sink accepts.",0,N],[16,"SinkError","","The type of value produced by the sink when an error occurs.",0,N],[10,"poll_ready","","Attempts to prepare the `Sink` to receive a value.",0,[[["pinmut"],["context"]],["poll",["result"]]]],[10,"start_send","","Begin the process of sending a value to the sink. Each call to this function must be proceeded by a successful call to `poll_ready` which returned `Ok(Poll::Ready(()))`.",0,N],[10,"poll_flush","","Flush any remaining output from this sink.",0,[[["pinmut"],["context"]],["poll",["result"]]]],[10,"poll_close","","Flush any remaining output and close this sink, if necessary.",0,[[["pinmut"],["context"]],["poll",["result"]]]],[11,"clone","","",1,[[["self"]],["vecsinkerror"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N]],"paths":[[8,"Sink"],[4,"VecSinkError"]]};
searchIndex["futures_util"]={"doc":"Combinators and utilities for working with `Future`s, `Stream`s, `Sink`s, and the `AsyncRead` and `AsyncWrite` traits.","items":[[0,"async_await","futures_util","Await",N,N],[0,"future","","Futures",N,N],[3,"Empty","futures_util::future","A future which is never resolved.",N,N],[3,"Lazy","","A future which, when polled, invokes a closure and yields its result.",N,N],[3,"OptionFuture","","A future representing a value which may or may not be present.",N,N],[3,"PollFn","","A future which wraps a function returning [`Poll`].",N,N],[3,"Ready","","A future that is immediately ready with a value",N,N],[3,"Flatten","","Future for the `flatten` combinator.",N,N],[3,"FlattenStream","","Future for the `flatten_stream` combinator, flattening a future-of-a-stream to get just the result of the final stream as a stream.",N,N],[3,"Fuse","","A future which \"fuses\" a future once it's been resolved.",N,N],[3,"IntoStream","","A type which converts a `Future` into a `Stream` containing a single element.",N,N],[3,"Join","","Future for the `join` combinator, waiting for two futures to complete.",N,N],[3,"Join3","","Future for the `join3` combinator, waiting for three futures to complete.",N,N],[3,"Join4","","Future for the `join4` combinator, waiting for four futures to complete.",N,N],[3,"Join5","","Future for the `join5` combinator, waiting for five futures to complete.",N,N],[3,"Map","","Future for the `map` combinator, changing the type of a future.",N,N],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",N,N],[3,"Inspect","","Do something with the item of a future, passing it on.",N,N],[3,"UnitError","","Future for the `unit_error` combinator, turning a `Future` into a `TryFuture`.",N,N],[3,"WithSpawner","","Future for the `with_spawner` combinator, assigning a [`Spawn`] to be used when spawning other futures.",N,N],[3,"Abortable","","A future which can be remotely short-circuited using an `AbortHandle`.",N,N],[3,"AbortHandle","","A handle to a `Abortable` future.",N,N],[3,"AbortRegistration","","A registration handle for a `Abortable` future. Values of this type can be acquired from `AbortHandle::new` and are used in calls to `Abortable::new`.",N,N],[3,"Aborted","","Indicator that the `Abortable` future was aborted.",N,N],[3,"CatchUnwind","","Future for the `catch_unwind` combinator.",N,N],[3,"Shared","","A future that is cloneable and can be polled in multiple threads. Use `Future::shared()` method to convert any future into a `Shared` future.",N,N],[4,"MaybeDone","","A future that may have completed.",N,N],[13,"Future","","A not-yet-completed future",0,N],[13,"Done","","The output of the completed future",0,N],[13,"Gone","","The empty variant after the result of a [`MaybeDone`] has been taken using the `take_output` method.",0,N],[5,"empty","","Creates a future which never resolves, representing a computation that never finishes.",N,[[],["empty"]]],[5,"lazy","","Creates a new future that allows delayed execution of a closure.",N,[[["f"]],["lazy"]]],[5,"maybe_done","","Wraps a future into a `MaybeDone`",N,[[["fut"]],["maybedone"]]],[5,"poll_fn","","Creates a new future wrapping around a function returning [`Poll`].",N,[[["f"]],["pollfn"]]],[5,"ready","","Create a future that is immediately ready with a value.",N,[[["t"]],["ready"]]],[5,"abortable","","Creates a new `Abortable` future and a `AbortHandle` which can be used to stop it.",N,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"poll","","",1,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"poll","","",2,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"output_mut","","Returns an [`Option`] containing a mutable reference to the output of the future. The output of this method will be [`Some`] if and only if the inner future has been completed and `take_output` has not yet been called.",0,[[["pinmut"]],["option"]]],[11,"take_output","","Attempt to take the output of a `MaybeDone` without driving it towards completion.",0,[[["pinmut"]],["option"]]],[11,"poll","","",0,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["optionfuture"]]],[11,"poll","","",3,[[["pinmut"],["context"]],["poll"]]],[11,"from","","",3,[[["option"]],["self"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"poll","","",4,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["ready"]]],[11,"poll","","",5,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"poll","","",6,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"poll_next","","",7,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"poll","","",8,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"poll_next","","",9,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"poll","","",10,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"poll","","",11,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"poll","","",12,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"poll","","",13,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"poll","","",14,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"poll","","",15,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"poll","","",16,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"poll","","",17,[[["pinmut"],["context"]],["poll",["result"]]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"poll","","",18,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"clone","","",19,[[["self"]],["abortable"]]],[11,"new","","Creates a new `Abortable` future using an existing `AbortRegistration`. `AbortRegistration`s can be acquired through `AbortHandle::new`.",19,[[["fut"],["abortregistration"]],["self"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"clone","","",21,[[["self"]],["aborthandle"]]],[11,"new_pair","","Creates an (`AbortHandle`, `AbortRegistration`) pair which can be used to abort a running future.",21,N],[11,"clone","","",22,[[["self"]],["aborted"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"eq","","",22,[[["self"],["aborted"]],["bool"]]],[11,"poll","","",19,[[["pinmut"],["context"]],["poll"]]],[11,"abort","","Abort the `Abortable` future associated with this handle.",21,[[["self"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"poll","","",23,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"peek","","If any clone of this `Shared` has completed execution, returns its result immediately without blocking. Otherwise, returns None without triggering the work represented by this `Shared`.",24,[[["self"]],["option",["arc"]]]],[11,"poll","","",24,[[["pinmut"],["context"]],["poll"]]],[11,"clone","","",24,[[["self"]],["self"]]],[11,"drop","","",24,[[["self"]]]],[8,"FutureExt","","An extension trait for `Future`s that provides a variety of convenient adapters.",N,N],[11,"map","","Map this future's output to a different type, returning a new future of the resulting type.",25,[[["self"],["f"]],["map"]]],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",25,[[["self"],["f"]],["then"]]],[11,"join","","Joins the result of two futures, waiting for them both to complete.",25,[[["self"],["fut2"]],["join"]]],[11,"join3","","Same as `join`, but with more futures.",25,[[["self"],["fut2"],["fut3"]],["join3"]]],[11,"join4","","Same as `join`, but with more futures.",25,[[["self"],["fut2"],["fut3"],["fut4"]],["join4"]]],[11,"join5","","Same as `join`, but with more futures.",25,[[["self"],["fut2"],["fut3"],["fut4"],["fut5"]],["join5"]]],[11,"into_stream","","Convert this future into a single element stream.",25,[[["self"]],["intostream"]]],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",25,[[["self"]],["flatten"]]],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",25,[[["self"]],["flattenstream"]]],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",25,[[["self"]],["fuse"]]],[11,"inspect","","Do something with the output of a future before passing it on.",25,[[["self"],["f"]],["inspect"]]],[11,"catch_unwind","","Catches unwinding panics while polling the future.",25,[[["self"]],["catchunwind"]]],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",25,[[["self"]],["shared"]]],[11,"boxed","","Wrap the future in a Box, pinning it.",25,[[["self"]],["pinbox"]]],[11,"unit_error","","Turns a `Future` into a `TryFuture` with `Error = ()`.",25,[[["self"]],["uniterror"]]],[11,"with_spawner","","Assigns the provided `Spawn` to be used when spawning tasks from within the future.",25,[[["self"],["sp"]],["withspawner"]]],[11,"poll_unpin","","A convenience for calling `Future::poll` on `Unpin` future types.",25,[[["self"],["context"]],["poll"]]],[0,"try_future","futures_util","Futures",N,N],[3,"AndThen","futures_util::try_future","Future for the `and_then` combinator.",N,N],[3,"ErrInto","","Future for the `err_into` combinator.",N,N],[3,"FlattenSink","","Future for the `flatten_sink` combinator.",N,N],[3,"TryJoin","","Future for the `try_join` combinator, waiting for two futures to complete or for one to error.",N,N],[3,"TryJoin3","","Future for the `try_join3` combinator, waiting for three futures to complete or for one to error.",N,N],[3,"TryJoin4","","Future for the `try_join4` combinator, waiting for four futures to complete or for one to error.",N,N],[3,"TryJoin5","","Future for the `try_join5` combinator, waiting for five futures to complete or for one to error.",N,N],[3,"IntoFuture","","Future for the `into_future` combinator.",N,N],[3,"MapErr","","Future for the `map_err` combinator.",N,N],[3,"MapOk","","Future for the `map_ok` combinator.",N,N],[3,"OrElse","","Future for the `or_else` combinator.",N,N],[3,"UnwrapOrElse","","Future for the `unwrap_or_else` combinator.",N,N],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"poll","","",26,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"poll","","",27,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"poll_ready","","",28,[[["pinmut"],["context"]],["poll",["result"]]]],[11,"start_send","","",28,N],[11,"poll_flush","","",28,[[["pinmut"],["context"]],["poll",["result"]]]],[11,"poll_close","","",28,[[["pinmut"],["context"]],["poll",["result"]]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"poll","","",29,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"poll","","",30,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"poll","","",31,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"poll","","",32,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"poll","","",33,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"poll","","",34,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"poll","","",35,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"poll","","",36,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"poll","","",37,[[["pinmut"],["context"]],["poll"]]],[8,"TryFutureExt","","Adapters specific to [`Result`]-returning futures",N,N],[11,"flatten_sink","","Flattens the execution of this future when the successful result of this future is a [`Sink`].",38,[[["self"]],["flattensink"]]],[11,"map_ok","","Maps this future's success value to a different value.",38,[[["self"],["f"]],["mapok"]]],[11,"map_err","","Maps this future's error value to a different value.",38,[[["self"],["f"]],["maperr"]]],[11,"err_into","","Maps this future's `Error` to a new error type using the `Into` trait.",38,[[["self"]],["errinto"]]],[11,"and_then","","Executes another future after this one resolves successfully. The success value is passed to a closure to create this subsequent future.",38,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Executes another future if this one resolves to an error. The error value is passed to a closure to create this subsequent future.",38,[[["self"],["f"]],["orelse"]]],[11,"unwrap_or_else","","Unwraps this future's ouput, producing a future with this future's `Ok` type as its `Output` type.",38,[[["self"],["f"]],["unwraporelse"]]],[11,"into_future","","Wraps a [`TryFuture`] into a type that implements `Future`.",38,[[["self"]],["intofuture"]]],[11,"try_join","","Joins the result of two futures, waiting for them both to complete or for one to produce an error.",38,[[["self"],["fut2"]],["tryjoin"]]],[11,"try_join3","","Same as `try_join`, but with more futures.",38,[[["self"],["fut2"],["fut3"]],["tryjoin3"]]],[11,"try_join4","","Same as `try_join`, but with more futures.",38,[[["self"],["fut2"],["fut3"],["fut4"]],["tryjoin4"]]],[11,"try_join5","","Same as `try_join`, but with more futures.",38,[[["self"],["fut2"],["fut3"],["fut4"],["fut5"]],["tryjoin5"]]],[0,"stream","futures_util","Streams",N,N],[3,"Iter","futures_util::stream","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"Repeat","","Stream that produces the same element repeatedly.",N,N],[3,"Chain","","An adapter for chaining the output of two streams.",N,N],[3,"Concat","","A stream combinator to concatenate the results of a stream into the first yielded item.",N,N],[3,"Empty","","A stream which contains no elements.",N,N],[3,"Filter","","A stream combinator used to filter the results of a stream and only yield some values.",N,N],[3,"FilterMap","","A combinator used to filter the results of a stream and simultaneously map them to a different type.",N,N],[3,"Flatten","","A combinator used to flatten a stream-of-streams into one long stream of elements.",N,N],[3,"Fold","","A future used to collect all the results of a stream into one generic type.",N,N],[3,"Forward","","Future for the `Stream::forward` combinator, which sends a stream of values to a sink and then flushes the sink.",N,N],[3,"ForEach","","A stream combinator which executes a unit closure over each item on a stream.",N,N],[3,"Fuse","","A stream which \"fuse\"s a stream once it's terminated.",N,N],[3,"StreamFuture","","A combinator used to temporarily convert a stream into a future.",N,N],[3,"Inspect","","Do something with the items of a stream, passing it on.",N,N],[3,"Map","","A stream combinator which will change the type of a stream from one type to another.",N,N],[3,"Next","","A future of the next element of a stream.",N,N],[3,"Once","","A stream which emits single element and then EOF.",N,N],[3,"Peekable","","A `Stream` that implements a `peek` method.",N,N],[3,"PollFn","","A stream which adapts a function returning `Poll`.",N,N],[3,"Select","","An adapter for merging the output of two streams.",N,N],[3,"Skip","","A stream combinator which skips a number of elements before continuing.",N,N],[3,"SkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",N,N],[3,"Take","","A stream combinator which returns a maximum number of elements.",N,N],[3,"TakeWhile","","A stream combinator which takes elements from a stream while a predicate holds.",N,N],[3,"Then","","A stream combinator which chains a computation onto each item produced by a stream.",N,N],[3,"Unfold","","A stream which creates futures, polls them and return their result",N,N],[3,"Zip","","An adapter for merging the output of two streams.",N,N],[3,"BufferUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if possible, delivering results as they become available.",N,N],[3,"Buffered","","An adaptor for a stream of futures to execute the futures concurrently, if possible.",N,N],[3,"CatchUnwind","","Stream for the `catch_unwind` combinator.",N,N],[3,"Chunks","","An adaptor that chunks up elements in a vector.",N,N],[3,"Collect","","A future which collects all of the values of a stream into a vector.",N,N],[3,"ForEachConcurrent","","A stream combinator which executes a unit closure over each item on a stream concurrently.",N,N],[3,"FuturesOrdered","","An unbounded queue of futures.",N,N],[3,"FuturesUnordered","","A set of futures which may complete in any order.",N,N],[3,"SplitStream","","A `Stream` part of the split pair",N,N],[3,"SplitSink","","A `Sink` part of the split pair",N,N],[3,"ReuniteError","","Error indicating a `SplitSink<S>` and `SplitStream<S>` were not two halves of a `Stream + Split`, and thus could not be `reunite`d.",N,N],[12,"0","","",39,N],[12,"1","","",39,N],[5,"iter","","Converts an `Iterator` into a `Stream` which is always ready to yield the next value.",N,[[["i"]],["iter"]]],[5,"repeat","","Create a stream which produces the same item repeatedly.",N,[[["t"]],["repeat"]]],[5,"empty","","Creates a stream which contains no elements.",N,[[],["empty"]]],[5,"once","","Creates a stream of single element",N,[[["fut"]],["once"]]],[5,"poll_fn","","Creates a new stream wrapping around a function returning `Poll`.",N,[[["f"]],["pollfn"]]],[5,"unfold","","Creates a `Stream` from a seed and a closure returning a `Future`.",N,[[["t"],["f"]],["unfold"]]],[5,"futures_ordered","","Converts a list of futures into a `Stream` of results from the futures.",N,[[["i"]],["futuresordered"]]],[5,"futures_unordered","","Converts a list of futures into a [`Stream`] of outputs from the futures.",N,[[["i"]],["futuresunordered"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"poll_next","","",40,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"poll_next","","",41,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"poll_next","","",42,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"fmt","","",43,[[["self"],["formatter"]],["fmtresult"]]],[11,"poll","","",43,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"poll_next","","",44,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",45,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",45,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",45,[[["self"]],["st"]]],[11,"poll_next","","",45,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",46,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",46,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",46,[[["self"]],["st"]]],[11,"poll_next","","",46,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",47,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",47,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",47,[[["self"]],["st"]]],[11,"poll_next","","",47,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"poll","","",48,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"poll","","",49,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"poll","","",50,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"is_done","","Returns whether the underlying stream has finished or not.",51,[[["self"]],["bool"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",51,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",51,[[["self"]],["st"]]],[11,"get_pin_mut","","Acquires a mutable pinned reference to the underlying stream that this combinator is pulling from.",51,[[["pinmut"]],["pinmut"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",51,[[["self"]],["st"]]],[11,"poll_next","","",51,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"poll_ready","","",51,[[["pinmut"],["context"]],["poll",["result"]]]],[11,"start_send","","",51,N],[11,"poll_flush","","",51,[[["pinmut"],["context"]],["poll",["result"]]]],[11,"poll_close","","",51,[[["pinmut"],["context"]],["poll",["result"]]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",52,[[["self"]],["option"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",52,[[["self"]],["option"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",52,[[["self"]],["option"]]],[11,"poll","","",52,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",53,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",53,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",53,[[["self"]],["st"]]],[11,"poll_next","","",53,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",54,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",54,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",54,[[["self"]],["st"]]],[11,"poll_next","","",54,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"poll","","",55,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"poll_next","","",56,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"peek","","Peek retrieves a reference to the next item in the stream.",57,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"poll_next","","",57,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"poll_next","","",58,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"poll_next","","",59,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",60,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",60,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",60,[[["self"]],["st"]]],[11,"poll_next","","",60,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",61,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",61,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",61,[[["self"]],["st"]]],[11,"poll_next","","",61,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",62,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",62,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",62,[[["self"]],["st"]]],[11,"poll_next","","",62,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",63,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",63,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",63,[[["self"]],["st"]]],[11,"poll_next","","",63,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"poll_next","","",64,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"poll_next","","",65,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"poll_next","","",66,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",67,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",67,[[["self"]],["st"]]],[11,"get_pin_mut","","Acquires a pinned mutable reference to the underlying stream that this combinator is pulling from.",67,[[["pinmut"]],["pinmut"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",67,[[["self"]],["st"]]],[11,"poll_next","","",67,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"poll_ready","","",67,[[["pinmut"],["context"]],["poll",["result"]]]],[11,"start_send","","",67,N],[11,"poll_flush","","",67,[[["pinmut"],["context"]],["poll",["result"]]]],[11,"poll_close","","",67,[[["pinmut"],["context"]],["poll",["result"]]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",68,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",68,[[["self"]],["st"]]],[11,"get_pin_mut","","Acquires a mutable pinned reference to the underlying stream that this combinator is pulling from.",68,[[["pinmut"]],["pinmut"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",68,[[["self"]],["st"]]],[11,"poll_next","","",68,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"poll_ready","","",68,[[["pinmut"],["context"]],["poll",["result"]]]],[11,"start_send","","",68,N],[11,"poll_flush","","",68,[[["pinmut"],["context"]],["poll",["result"]]]],[11,"poll_close","","",68,[[["pinmut"],["context"]],["poll",["result"]]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"poll_next","","",69,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",70,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",70,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",70,[[["self"]],["st"]]],[11,"poll_next","","",70,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"poll","","",71,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"poll","","",72,[[["pinmut"],["context"]],["poll"]]],[11,"new","","Constructs a new, empty `FuturesOrdered`",73,[[],["futuresordered"]]],[11,"len","","Returns the number of futures contained in the queue.",73,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the queue contains no futures",73,[[["self"]],["bool"]]],[11,"push","","Push a future into the queue.",73,[[["self"],["fut"]]]],[11,"default","","",73,[[],["futuresordered"]]],[11,"poll_next","","",73,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"from_iter","","",73,[[["t"]],["self"]]],[11,"new","","Constructs a new, empty [`FuturesUnordered`].",74,[[],["futuresunordered"]]],[11,"default","","",74,[[],["futuresunordered"]]],[11,"len","","Returns the number of futures contained in the set.",74,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the set contains no futures.",74,[[["self"]],["bool"]]],[11,"push","","Push a future into the set.",74,[[["self"],["fut"]]]],[11,"iter_mut","","Returns an iterator that allows modifying each future in the set.",74,[[["self"]],["itermut"]]],[11,"iter_pin_mut","","Returns an iterator that allows modifying each future in the set.",74,[[["pinmut"]],["iterpinmut"]]],[11,"poll_next","","",74,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"drop","","",74,[[["self"]]]],[11,"from_iter","","",74,[[["i"]],["self"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",75,[[["self"],["splitsink"]],["result",["reuniteerror"]]]],[11,"poll_next","","",75,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",76,[[["self"],["splitstream"]],["result",["reuniteerror"]]]],[11,"poll_ready","","",76,[[["pinmut"],["context"]],["poll",["result"]]]],[11,"start_send","","",76,N],[11,"poll_flush","","",76,[[["pinmut"],["context"]],["poll",["result"]]]],[11,"poll_close","","",76,[[["pinmut"],["context"]],["poll",["result"]]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"description","","",39,[[["self"]],["str"]]],[8,"StreamExt","","An extension trait for `Stream`s that provides a variety of convenient combinator functions.",N,N],[11,"next","","Creates a future that resolves to the next item in the stream.",77,[[["self"]],["next"]]],[11,"into_future","","Converts this stream into a future of `(next_item, tail_of_stream)`. If the stream terminates, then the next item is [`None`].",77,[[["self"]],["streamfuture"]]],[11,"map","","Maps this stream's items to a different type, returning a new stream of the resulting type.",77,[[["self"],["f"]],["map"]]],[11,"filter","","Filters the values produced by this stream according to the provided asynchronous predicate.",77,[[["self"],["f"]],["filter"]]],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type according to the provided asynchronous closure.",77,[[["self"],["f"]],["filtermap"]]],[11,"then","","Computes from this stream's items new items of a different type using an asynchronous closure.",77,[[["self"],["f"]],["then"]]],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",77,[[["self"]],["collect"]]],[11,"concat","","Concatenate all items of a stream into a single extendable destination, returning a future representing the end result.",77,[[["self"]],["concat"]]],[11,"fold","","Execute an accumulating asynchronous computation over a stream, collecting all the values into one final result.",77,[[["self"],["t"],["f"]],["fold"]]],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",77,[[["self"]],["flatten"]]],[11,"skip_while","","Skip elements on this stream while the provided asynchronous predicate resolves to `true`.",77,[[["self"],["f"]],["skipwhile"]]],[11,"take_while","","Take elements from this stream while the provided asynchronous predicate resolves to `true`.",77,[[["self"],["f"]],["takewhile"]]],[11,"for_each","","Runs this stream to completion, executing the provided asynchronous closure for each element on the stream.",77,[[["self"],["f"]],["foreach"]]],[11,"for_each_concurrent","","Runs this stream to completion, executing the provided asynchronous closure for each element on the stream concurrently as elements become available.",77,N],[11,"take","","Creates a new stream of at most `n` items of the underlying stream.",77,[[["self"],["u64"]],["take"]]],[11,"skip","","Creates a new stream which skips `n` items of the underlying stream.",77,[[["self"],["u64"]],["skip"]]],[11,"fuse","","Fuse a stream such that `poll_next` will never again be called once it has finished.",77,[[["self"]],["fuse"]]],[11,"by_ref","","Borrows a stream, rather than consuming it.",77,[[["self"]],["self"]]],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",77,[[["self"]],["catchunwind"]]],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",77,[[["self"],["usize"]],["buffered"]]],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",77,[[["self"],["usize"]],["bufferunordered"]]],[11,"zip","","An adapter for zipping two streams together.",77,[[["self"],["st"]],["zip"]]],[11,"chain","","Adapter for chaining two stream.",77,[[["self"],["st"]],["chain"]]],[11,"peekable","","Creates a new stream which exposes a `peek` method.",77,[[["self"]],["peekable"]]],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",77,[[["self"],["usize"]],["chunks"]]],[11,"select","","This combinator will attempt to pull items from both streams. Each stream will be polled in a round-robin fashion, and whenever a stream is ready to yield an item that item is yielded.",77,[[["self"],["st"]],["select"]]],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",77,[[["self"],["s"]],["forward"]]],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",77,N],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",77,[[["self"],["f"]],["inspect"]]],[11,"left_stream","","Wrap this stream in an `Either` stream, making it the left-hand variant of that `Either`.",77,[[["self"]],["either"]]],[11,"right_stream","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",77,[[["self"]],["either"]]],[11,"poll_next_unpin","","A convenience method for calling [`Stream::poll_next`] on [`Unpin`] stream types.",77,[[["self"],["context"]],["poll",["option"]]]],[0,"try_stream","futures_util","Streams",N,N],[3,"ErrInto","futures_util::try_stream","Stream for the `err_into` combinator.",N,N],[3,"IntoStream","","Stream for the `into_stream` combinator.",N,N],[3,"MapOk","","Stream for the `map_ok` combinator.",N,N],[3,"MapErr","","Stream for the `map_err` combinator.",N,N],[3,"TryNext","","A future which attempts to collect all of the values of a stream.",N,N],[3,"TryForEach","","A stream combinator which attempts to execute an async closure over each future in a stream.",N,N],[3,"TryFilterMap","","A combinator that attempts to filter the results of a stream and simultaneously map them to a different type.",N,N],[3,"TryFold","","The future for the `TryStream::fold` method.",N,N],[3,"TrySkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",N,N],[3,"TryBufferUnordered","","A stream returned by the `try_buffer_unordered` method",N,N],[3,"TryCollect","","A future which attempts to collect all of the values of a stream.",N,N],[3,"TryForEachConcurrent","","A stream combinator which executes a unit closure over each item on a stream concurrently.",N,N],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"poll_next","","",78,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",79,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",79,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",79,[[["self"]],["st"]]],[11,"poll_next","","",79,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"poll_next","","",80,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"poll_next","","",81,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"poll","","",82,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"poll","","",83,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",84,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",84,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",84,[[["self"]],["st"]]],[11,"poll_next","","",84,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"poll","","",85,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",86,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",86,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",86,[[["self"]],["st"]]],[11,"poll_next","","",86,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",87,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",87,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",87,[[["self"]],["st"]]],[11,"poll_next","","",87,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result"]]],[11,"poll","","",88,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result"]]],[11,"poll","","",89,[[["pinmut"],["context"]],["poll"]]],[8,"TryStreamExt","","Adapters specific to `Result`-returning streams",N,N],[11,"err_into","","Wraps the current stream in a new stream which converts the error type into the one provided.",90,[[["self"]],["errinto"]]],[11,"map_ok","","Wraps the current stream in a new stream which maps the success value using the provided closure.",90,[[["self"],["f"]],["mapok"]]],[11,"map_err","","Wraps the current stream in a new stream which maps the error value using the provided closure.",90,[[["self"],["f"]],["maperr"]]],[11,"into_stream","","Wraps a [`TryStream`] into a type that implements `Stream`",90,[[["self"]],["intostream"]]],[11,"try_next","","Creates a future that attempts to resolve the next item in the stream. If an error is encountered before the next item, the error is returned instead.",90,[[["self"]],["trynext"]]],[11,"try_for_each","","Attempts to run this stream to completion, executing the provided asynchronous closure for each element on the stream.",90,[[["self"],["f"]],["tryforeach"]]],[11,"try_skip_while","","Skip elements on this stream while the provided asynchronous predicate resolves to `true`.",90,[[["self"],["f"]],["tryskipwhile"]]],[11,"try_for_each_concurrent","","Attempts to run this stream to completion, executing the provided asynchronous closure for each element on the stream concurrently as elements become available, exiting as soon as an error occurs.",90,N],[11,"try_collect","","Attempt to Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",90,[[["self"]],["trycollect"]]],[11,"try_filter_map","","Attempt to filter the values produced by this stream while simultaneously mapping them to a different type according to the provided asynchronous closure.",90,[[["self"],["f"]],["tryfiltermap"]]],[11,"try_fold","","Attempt to execute an accumulating asynchronous computation over a stream, collecting all the values into one final result.",90,[[["self"],["t"],["f"]],["tryfold"]]],[11,"try_buffer_unordered","","Attempt to execute several futures from a stream concurrently.",90,[[["self"],["usize"]],["trybufferunordered"]]],[0,"sink","futures_util","Sinks",N,N],[3,"Close","futures_util::sink","Future for the `close` combinator, which polls the sink until all data has been closed.",N,N],[3,"Drain","","A sink that will discard all items given to it.",N,N],[3,"Fanout","","Sink that clones incoming items and forwards them to two sinks at the same time.",N,N],[3,"Flush","","Future for the `flush` combinator, which polls the sink until all data has been flushed.",N,N],[3,"SinkErrInto","","A sink combinator to change the error type of a sink.",N,N],[3,"SinkMapErr","","Sink for the `Sink::sink_map_err` combinator.",N,N],[3,"Send","","Future for the `Sink::send` combinator, which sends a value to a sink and then waits until the sink has fully flushed.",N,N],[3,"SendAll","","Future for the `Sink::send_all` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",N,N],[3,"With","","Sink for the `Sink::with` combinator, chaining a computation to run prior to pushing a value into the underlying sink.",N,N],[3,"WithFlatMap","","Sink for the `Sink::with_flat_map` combinator, chaining a computation that returns an iterator to run prior to pushing a value into the underlying sink.",N,N],[3,"Buffer","","Sink for the `Sink::buffer` combinator, which buffers up to some fixed number of values when the underlying sink is unable to accept them.",N,N],[4,"DrainError","","The error type for the [`Drain`] sink.",N,N],[5,"drain","","Create a sink that will just discard all items given to it.",N,[[],["drain"]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[11,"poll","","",91,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"poll_ready","","",92,[[["pinmut"],["context"]],["poll",["result"]]]],[11,"start_send","","",92,N],[11,"poll_flush","","",92,[[["pinmut"],["context"]],["poll",["result"]]]],[11,"poll_close","","",92,[[["pinmut"],["context"]],["poll",["result"]]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"into_any","","Convert this drain error into any type",93,[[["self"]],["t"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sinks.",94,N],[11,"fmt","","",94,[[["self"],["formatter"]],["fmtresult"]]],[11,"poll_ready","","",94,[[["pinmut"],["context"]],["poll",["result"]]]],[11,"start_send","","",94,N],[11,"poll_flush","","",94,[[["pinmut"],["context"]],["poll",["result"]]]],[11,"poll_close","","",94,[[["pinmut"],["context"]],["poll",["result"]]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"poll","","",95,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Get a shared reference to the inner sink.",96,[[["self"]],["si"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",96,[[["self"]],["si"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",96,[[["self"]],["si"]]],[11,"poll_ready","","",96,[[["pinmut"],["context"]],["poll",["result"]]]],[11,"start_send","","",96,N],[11,"poll_flush","","",96,[[["pinmut"],["context"]],["poll",["result"]]]],[11,"poll_close","","",96,[[["pinmut"],["context"]],["poll",["result"]]]],[11,"poll_next","","",96,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Get a shared reference to the inner sink.",97,[[["self"]],["si"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",97,[[["self"]],["si"]]],[11,"get_pin_mut","","Get a pinned reference to the inner sink.",97,[[["pinmut"]],["pinmut"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",97,[[["self"]],["si"]]],[11,"poll_ready","","",97,[[["pinmut"],["context"]],["poll",["result"]]]],[11,"start_send","","",97,N],[11,"poll_flush","","",97,[[["pinmut"],["context"]],["poll",["result"]]]],[11,"poll_close","","",97,[[["pinmut"],["context"]],["poll",["result"]]]],[11,"poll_next","","",97,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result"]]],[11,"poll","","",98,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",99,[[["self"],["formatter"]],["result"]]],[11,"poll","","",99,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",100,[[["self"],["formatter"]],["result"]]],[11,"poll_next","","",100,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"get_ref","","Get a shared reference to the inner sink.",100,[[["self"]],["si"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",100,[[["self"]],["si"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",100,[[["self"]],["si"]]],[11,"poll_ready","","",100,[[["pinmut"],["context"]],["poll",["result"]]]],[11,"start_send","","",100,N],[11,"poll_flush","","",100,[[["pinmut"],["context"]],["poll",["result"]]]],[11,"poll_close","","",100,[[["pinmut"],["context"]],["poll",["result"]]]],[11,"fmt","","",101,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Get a shared reference to the inner sink.",101,[[["self"]],["si"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",101,[[["self"]],["si"]]],[11,"get_pin_mut","","Get a pinned mutable reference to the inner sink.",101,[[["pinmut"]],["pinmut"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",101,[[["self"]],["si"]]],[11,"poll_next","","",101,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"poll_ready","","",101,[[["pinmut"],["context"]],["poll",["result"]]]],[11,"start_send","","",101,N],[11,"poll_flush","","",101,[[["pinmut"],["context"]],["poll",["result"]]]],[11,"poll_close","","",101,[[["pinmut"],["context"]],["poll",["result"]]]],[11,"fmt","","",102,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Get a shared reference to the inner sink.",102,[[["self"]],["si"]]],[11,"poll_next","","",102,[[["pinmut"],["context"]],["poll",["option"]]]],[11,"poll_ready","","",102,[[["pinmut"],["context"]],["poll",["result"]]]],[11,"start_send","","",102,N],[11,"poll_flush","","",102,[[["pinmut"],["context"]],["poll",["result"]]]],[11,"poll_close","","",102,[[["pinmut"],["context"]],["poll",["result"]]]],[8,"SinkExt","","An extension trait for `Sink`s that provides a variety of convenient combinator functions.",N,N],[11,"with","","Composes a function in front of the sink.",103,[[["self"],["f"]],["with"]]],[11,"with_flat_map","","Composes a function in front of the sink.",103,[[["self"],["f"]],["withflatmap"]]],[11,"sink_map_err","","Transforms the error returned by the sink.",103,[[["self"],["f"]],["sinkmaperr"]]],[11,"sink_err_into","","Map this sink's error to a different error type using the `Into` trait.",103,[[["self"]],["sinkerrinto"]]],[11,"buffer","","Adds a fixed-size buffer to the current sink.",103,[[["self"],["usize"]],["buffer"]]],[11,"close","","Close the sink.",103,[[["self"]],["close"]]],[11,"fanout","","Fanout items to multiple sinks.",103,[[["self"],["si"]],["fanout"]]],[11,"flush","","Flush the sync, processing all pending items.",103,[[["self"]],["flush"]]],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",103,N],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",103,[[["self"],["st"]],["sendall"]]],[11,"left_sink","","Wrap this sink in an `Either` sink, making it the left-hand variant of that `Either`.",103,[[["self"]],["either"]]],[11,"right_sink","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",103,[[["self"]],["either"]]],[0,"task","futures_util","Task notification",N,N],[3,"SpawnError","futures_util::task","The result of a failed spawn",N,N],[12,"kind","","The kind of error",104,N],[3,"JoinHandle","","The join handle returned by `spawn_with_handle`.",N,N],[3,"LocalWakerRef","","A `LocalWaker` that is only valid for a given lifetime.",N,N],[3,"AtomicWaker","","A synchronization primitive for task wakeup.",N,N],[5,"local_waker_ref","","Creates a reference to a `LocalWaker` from a local `wake`.",N,[[["arc"]],["localwakerref"]]],[5,"local_waker_ref_from_nonlocal","","Creates a reference to a `LocalWaker` from a non-local `wake`.",N,[[["arc"]],["localwakerref"]]],[11,"fmt","","",104,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result"]]],[11,"forget","","Drops this handle without canceling the underlying future.",105,[[["self"]]]],[11,"poll","","",105,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new [`LocalWakerRef`] from a [`LocalWaker`].",106,[[["localwaker"]],["self"]]],[11,"deref","","",106,[[["self"]],["localwaker"]]],[11,"new","","Create an `AtomicWaker`.",107,[[],["atomicwaker"]]],[11,"register","","Registers the waker to be notified on calls to `wake`.",107,[[["self"],["waker"]]]],[11,"wake","","Calls `wake` on the last `Waker` passed to `register`.",107,[[["self"]]]],[11,"default","","",107,[[],["self"]]],[11,"fmt","","",107,[[["self"],["formatter"]],["result"]]],[8,"SpawnExt","","Extension trait for `Spawn`",N,N],[11,"spawn","","Spawns a task that polls the given future with output `()` to completion.",108,[[["self"],["fut"]],["result",["spawnerror"]]]],[11,"spawn_with_handle","","Spawns a task that polls the given future to completion and returns a future that resolves to the spawned future's output.",108,[[["self"],["fut"]],["result",["joinhandle","spawnerror"]]]],[0,"io","futures_util","IO",N,N],[8,"AsyncRead","futures_util::io","Read bytes asynchronously.",N,N],[11,"initializer","","Determines if this `AsyncRead`er can work with buffers of uninitialized memory.",109,[[["self"]],["initializer"]]],[10,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",109,N],[11,"poll_vectored_read","","Attempt to read from the `AsyncRead` into `vec` using vectored IO operations.",109,N],[8,"AsyncWrite","","Write bytes asynchronously.",N,N],[10,"poll_write","","Attempt to write bytes from `buf` into the object.",110,N],[11,"poll_vectored_write","","Attempt to write bytes from `vec` into the object using vectored IO operations.",110,N],[10,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",110,[[["self"],["context"]],["poll",["result"]]]],[10,"poll_close","","Attempt to close the object.",110,[[["self"],["context"]],["poll",["result"]]]],[3,"IoVec","","A specialized byte slice type for performing vectored I/O operations.",N,N],[3,"AllowStdIo","","A simple wrapper type which allows types which implement only implement `std::io::Read` or `std::io::Write` to be used in contexts which expect an `AsyncRead` or `AsyncWrite`.",N,N],[3,"CopyInto","","A future which will copy all data from a reader into a writer.",N,N],[3,"Flush","","A future used to fully flush an I/O object.",N,N],[3,"Read","","A future which can be used to easily read available number of bytes to fill a buffer.",N,N],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",N,N],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",N,N],[3,"Close","","A future used to fully close an I/O object.",N,N],[3,"ReadHalf","","The readable half of an object returned from `AsyncRead::split`.",N,N],[3,"WriteHalf","","The writable half of an object returned from `AsyncRead::split`.",N,N],[3,"Window","","A owned window around an underlying buffer.",N,N],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",N,N],[11,"fmt","","",111,[[["self"],["formatter"]],["result"]]],[11,"clone","","",111,[[["self"]],["allowstdio"]]],[11,"eq","","",111,[[["self"],["allowstdio"]],["bool"]]],[11,"ne","","",111,[[["self"],["allowstdio"]],["bool"]]],[11,"cmp","","",111,[[["self"],["allowstdio"]],["ordering"]]],[11,"partial_cmp","","",111,[[["self"],["allowstdio"]],["option",["ordering"]]]],[11,"lt","","",111,[[["self"],["allowstdio"]],["bool"]]],[11,"le","","",111,[[["self"],["allowstdio"]],["bool"]]],[11,"gt","","",111,[[["self"],["allowstdio"]],["bool"]]],[11,"ge","","",111,[[["self"],["allowstdio"]],["bool"]]],[11,"hash","","",111,N],[11,"new","","Creates a new `AllowStdIo` from an existing IO object.",111,[[["t"]],["self"]]],[11,"get_ref","","Returns a reference to the contained IO object.",111,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the contained IO object.",111,[[["self"]],["t"]]],[11,"into_inner","","Consumes self and returns the contained IO object.",111,[[["self"]],["t"]]],[11,"write","","",111,N],[11,"flush","","",111,[[["self"]],["result"]]],[11,"write_all","","",111,N],[11,"write_fmt","","",111,[[["self"],["arguments"]],["result"]]],[11,"poll_write","","",111,N],[11,"poll_flush","","",111,[[["self"],["context"]],["poll",["result"]]]],[11,"poll_close","","",111,[[["self"],["context"]],["poll",["result"]]]],[11,"read","","",111,N],[11,"read_to_end","","",111,[[["self"],["vec"]],["result",["usize"]]]],[11,"read_to_string","","",111,[[["self"],["string"]],["result",["usize"]]]],[11,"read_exact","","",111,N],[11,"poll_read","","",111,N],[11,"fmt","","",112,[[["self"],["formatter"]],["result"]]],[11,"poll","","",112,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result"]]],[11,"poll","","",113,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result"]]],[11,"poll","","",114,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",115,[[["self"],["formatter"]],["result"]]],[11,"poll","","",115,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",116,[[["self"],["formatter"]],["result"]]],[11,"poll","","",116,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result"]]],[11,"poll","","",117,[[["pinmut"],["context"]],["poll"]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result"]]],[11,"poll_read","","",118,N],[11,"poll_vectored_read","","",118,N],[11,"poll_write","","",119,N],[11,"poll_vectored_write","","",119,N],[11,"poll_flush","","",119,[[["self"],["context"]],["poll",["result"]]]],[11,"poll_close","","",119,[[["self"],["context"]],["poll",["result"]]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new window around the buffer `t` defaulting to the entire slice.",120,[[["t"]],["window"]]],[11,"get_ref","","Gets a shared reference to the underlying buffer inside of this `Window`.",120,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable reference to the underlying buffer inside of this `Window`.",120,[[["self"]],["t"]]],[11,"into_inner","","Consumes this `Window`, returning the underlying buffer.",120,[[["self"]],["t"]]],[11,"start","","Returns the starting index of this window into the underlying buffer `T`.",120,[[["self"]],["usize"]]],[11,"end","","Returns the end index of this window into the underlying buffer `T`.",120,[[["self"]],["usize"]]],[11,"set_start","","Changes the starting index of this window to the index specified.",120,[[["self"],["usize"]],["window"]]],[11,"set_end","","Changes the end index of this window to the index specified.",120,[[["self"],["usize"]],["window"]]],[11,"as_ref","","",120,N],[11,"as_mut","","",120,N],[11,"fmt","","",121,[[["self"],["formatter"]],["result"]]],[11,"poll","","",121,[[["pinmut"],["context"]],["poll",["result"]]]],[8,"AsyncReadExt","","An extension trait which adds utility methods to `AsyncRead` types.",N,N],[11,"copy_into","","Creates a future which copies all the bytes from one object to another.",122,[[["self"],["w"]],["copyinto"]]],[11,"read","","Tries to read some bytes directly into the given `buf` in asynchronous manner, returning a future type.",122,N],[11,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if end of file (EOF) is hit sooner.",122,N],[11,"read_to_end","","Creates a future which will read all the bytes from this `AsyncRead`.",122,[[["self"],["vec"]],["readtoend"]]],[11,"split","","Helper method for splitting this read/write object into two halves.",122,N],[8,"AsyncWriteExt","","An extension trait which adds utility methods to `AsyncWrite` types.",N,N],[11,"flush","","Creates a future which will entirely flush this `AsyncWrite`.",123,[[["self"]],["flush"]]],[11,"close","","Creates a future which will entirely close this `AsyncWrite`.",123,[[["self"]],["close"]]],[11,"write_all","","Write data into this object.",123,N],[14,"try_ready","futures_util","Extracts the successful type of a `Poll<Result<T, E>>`.",N,N],[14,"try_poll","","Extracts `Poll<T>` from `Poll<Result<T, E>>`.",N,N],[14,"ready","","Extracts the successful type of a `Poll<T>`.",N,N],[14,"poll","","A macro which returns the result of polling a future once within the current `async` context.",N,N],[14,"pending","","A macro which yields to the event loop once.",N,N],[14,"join","","Polls multiple futures simultaneously, returning a tuple of all results once complete.",N,N],[14,"try_join","","Polls multiple futures simultaneously, resolving to a [`Result`] containing either a tuple of the successful outputs or an error.",N,N],[14,"select","","Polls multiple futures simultaneously, executing the branch for the future that finishes first.",N,N],[14,"spawn","","Spawns a task onto the context's executor that polls the given future with output `()` to completion.",N,N],[14,"spawn_with_handle","","Spawns a task onto the context's executor that polls the given future to completion and returns a future that resolves to the spawned future's output.",N,N],[11,"deref","futures_util::io","",124,N],[11,"deref_mut","","",124,N],[11,"spawn","futures_util::task","Spawns a task that polls the given future with output `()` to completion.",108,[[["self"],["fut"]],["result",["spawnerror"]]]],[11,"spawn_with_handle","","Spawns a task that polls the given future to completion and returns a future that resolves to the spawned future's output.",108,[[["self"],["fut"]],["result",["joinhandle","spawnerror"]]]],[11,"borrow","futures_util::io","",124,[[["self"]],["t"]]],[11,"get_type_id","","",124,[[["self"]],["typeid"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]]],"paths":[[4,"MaybeDone"],[3,"Empty"],[3,"Lazy"],[3,"OptionFuture"],[3,"PollFn"],[3,"Ready"],[3,"Flatten"],[3,"FlattenStream"],[3,"Fuse"],[3,"IntoStream"],[3,"Join"],[3,"Join3"],[3,"Join4"],[3,"Join5"],[3,"Map"],[3,"Then"],[3,"Inspect"],[3,"UnitError"],[3,"WithSpawner"],[3,"Abortable"],[3,"AbortRegistration"],[3,"AbortHandle"],[3,"Aborted"],[3,"CatchUnwind"],[3,"Shared"],[8,"FutureExt"],[3,"AndThen"],[3,"ErrInto"],[3,"FlattenSink"],[3,"TryJoin"],[3,"TryJoin3"],[3,"TryJoin4"],[3,"TryJoin5"],[3,"IntoFuture"],[3,"MapErr"],[3,"MapOk"],[3,"OrElse"],[3,"UnwrapOrElse"],[8,"TryFutureExt"],[3,"ReuniteError"],[3,"Iter"],[3,"Repeat"],[3,"Chain"],[3,"Concat"],[3,"Empty"],[3,"Filter"],[3,"FilterMap"],[3,"Flatten"],[3,"Fold"],[3,"Forward"],[3,"ForEach"],[3,"Fuse"],[3,"StreamFuture"],[3,"Inspect"],[3,"Map"],[3,"Next"],[3,"Once"],[3,"Peekable"],[3,"PollFn"],[3,"Select"],[3,"Skip"],[3,"SkipWhile"],[3,"Take"],[3,"TakeWhile"],[3,"Then"],[3,"Unfold"],[3,"Zip"],[3,"BufferUnordered"],[3,"Buffered"],[3,"CatchUnwind"],[3,"Chunks"],[3,"Collect"],[3,"ForEachConcurrent"],[3,"FuturesOrdered"],[3,"FuturesUnordered"],[3,"SplitStream"],[3,"SplitSink"],[8,"StreamExt"],[3,"ErrInto"],[3,"IntoStream"],[3,"MapOk"],[3,"MapErr"],[3,"TryNext"],[3,"TryForEach"],[3,"TryFilterMap"],[3,"TryFold"],[3,"TrySkipWhile"],[3,"TryBufferUnordered"],[3,"TryCollect"],[3,"TryForEachConcurrent"],[8,"TryStreamExt"],[3,"Close"],[3,"Drain"],[4,"DrainError"],[3,"Fanout"],[3,"Flush"],[3,"SinkErrInto"],[3,"SinkMapErr"],[3,"Send"],[3,"SendAll"],[3,"With"],[3,"WithFlatMap"],[3,"Buffer"],[8,"SinkExt"],[3,"SpawnError"],[3,"JoinHandle"],[3,"LocalWakerRef"],[3,"AtomicWaker"],[8,"SpawnExt"],[8,"AsyncRead"],[8,"AsyncWrite"],[3,"AllowStdIo"],[3,"CopyInto"],[3,"Flush"],[3,"Read"],[3,"ReadExact"],[3,"ReadToEnd"],[3,"Close"],[3,"ReadHalf"],[3,"WriteHalf"],[3,"Window"],[3,"WriteAll"],[8,"AsyncReadExt"],[8,"AsyncWriteExt"],[3,"IoVec"]]};
searchIndex["iovec"]={"doc":"A specialized byte slice type for performing vectored I/O operations.","items":[[3,"IoVec","iovec","A specialized byte slice type for performing vectored I/O operations.",N,N],[0,"unix","","IoVec extensions for Unix platforms.",N,N],[5,"as_os_slice","iovec::unix","Convert a slice of `IoVec` refs to a slice of `libc::iovec`.",N,N],[5,"as_os_slice_mut","","Convert a mutable slice of `IoVec` refs to a mutable slice of `libc::iovec`.",N,N],[17,"MAX_LENGTH","iovec","Max length of an `IoVec` slice.",N,N],[11,"deref","","",0,N],[11,"deref_mut","","",0,N],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]]],"paths":[[3,"IoVec"]]};
searchIndex["lazy_static"]={"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",N,[[["t"]]]],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",N,N],[14,"lazy_static","","",N,N]],"paths":[]};
searchIndex["libc"]={"doc":"Crate docs","items":[[3,"group","libc","",N,N],[12,"gr_name","","",0,N],[12,"gr_passwd","","",0,N],[12,"gr_gid","","",0,N],[12,"gr_mem","","",0,N],[3,"utimbuf","","",N,N],[12,"actime","","",1,N],[12,"modtime","","",1,N],[3,"timeval","","",N,N],[12,"tv_sec","","",2,N],[12,"tv_usec","","",2,N],[3,"timespec","","",N,N],[12,"tv_sec","","",3,N],[12,"tv_nsec","","",3,N],[3,"rlimit","","",N,N],[12,"rlim_cur","","",4,N],[12,"rlim_max","","",4,N],[3,"rusage","","",N,N],[12,"ru_utime","","",5,N],[12,"ru_stime","","",5,N],[12,"ru_maxrss","","",5,N],[12,"ru_ixrss","","",5,N],[12,"ru_idrss","","",5,N],[12,"ru_isrss","","",5,N],[12,"ru_minflt","","",5,N],[12,"ru_majflt","","",5,N],[12,"ru_nswap","","",5,N],[12,"ru_inblock","","",5,N],[12,"ru_oublock","","",5,N],[12,"ru_msgsnd","","",5,N],[12,"ru_msgrcv","","",5,N],[12,"ru_nsignals","","",5,N],[12,"ru_nvcsw","","",5,N],[12,"ru_nivcsw","","",5,N],[3,"in_addr","","",N,N],[12,"s_addr","","",6,N],[3,"in6_addr","","",N,N],[12,"s6_addr","","",7,N],[3,"ip_mreq","","",N,N],[12,"imr_multiaddr","","",8,N],[12,"imr_interface","","",8,N],[3,"ipv6_mreq","","",N,N],[12,"ipv6mr_multiaddr","","",9,N],[12,"ipv6mr_interface","","",9,N],[3,"hostent","","",N,N],[12,"h_name","","",10,N],[12,"h_aliases","","",10,N],[12,"h_addrtype","","",10,N],[12,"h_length","","",10,N],[12,"h_addr_list","","",10,N],[3,"iovec","","",N,N],[12,"iov_base","","",11,N],[12,"iov_len","","",11,N],[3,"pollfd","","",N,N],[12,"fd","","",12,N],[12,"events","","",12,N],[12,"revents","","",12,N],[3,"winsize","","",N,N],[12,"ws_row","","",13,N],[12,"ws_col","","",13,N],[12,"ws_xpixel","","",13,N],[12,"ws_ypixel","","",13,N],[3,"linger","","",N,N],[12,"l_onoff","","",14,N],[12,"l_linger","","",14,N],[3,"sigval","","",N,N],[12,"sival_ptr","","",15,N],[3,"itimerval","","",N,N],[12,"it_interval","","",16,N],[12,"it_value","","",16,N],[3,"tms","","",N,N],[12,"tms_utime","","",17,N],[12,"tms_stime","","",17,N],[12,"tms_cutime","","",17,N],[12,"tms_cstime","","",17,N],[3,"sockaddr","","",N,N],[12,"sa_len","","",18,N],[12,"sa_family","","",18,N],[12,"sa_data","","",18,N],[3,"sockaddr_in6","","",N,N],[12,"sin6_len","","",19,N],[12,"sin6_family","","",19,N],[12,"sin6_port","","",19,N],[12,"sin6_flowinfo","","",19,N],[12,"sin6_addr","","",19,N],[12,"sin6_scope_id","","",19,N],[3,"sockaddr_un","","",N,N],[12,"sun_len","","",20,N],[12,"sun_family","","",20,N],[12,"sun_path","","",20,N],[3,"passwd","","",N,N],[12,"pw_name","","",21,N],[12,"pw_passwd","","",21,N],[12,"pw_uid","","",21,N],[12,"pw_gid","","",21,N],[12,"pw_change","","",21,N],[12,"pw_class","","",21,N],[12,"pw_gecos","","",21,N],[12,"pw_dir","","",21,N],[12,"pw_shell","","",21,N],[12,"pw_expire","","",21,N],[3,"ifaddrs","","",N,N],[12,"ifa_next","","",22,N],[12,"ifa_name","","",22,N],[12,"ifa_flags","","",22,N],[12,"ifa_addr","","",22,N],[12,"ifa_netmask","","",22,N],[12,"ifa_dstaddr","","",22,N],[12,"ifa_data","","",22,N],[3,"fd_set","","",N,N],[3,"tm","","",N,N],[12,"tm_sec","","",23,N],[12,"tm_min","","",23,N],[12,"tm_hour","","",23,N],[12,"tm_mday","","",23,N],[12,"tm_mon","","",23,N],[12,"tm_year","","",23,N],[12,"tm_wday","","",23,N],[12,"tm_yday","","",23,N],[12,"tm_isdst","","",23,N],[12,"tm_gmtoff","","",23,N],[12,"tm_zone","","",23,N],[3,"utsname","","",N,N],[12,"sysname","","",24,N],[12,"nodename","","",24,N],[12,"release","","",24,N],[12,"version","","",24,N],[12,"machine","","",24,N],[3,"msghdr","","",N,N],[12,"msg_name","","",25,N],[12,"msg_namelen","","",25,N],[12,"msg_iov","","",25,N],[12,"msg_iovlen","","",25,N],[12,"msg_control","","",25,N],[12,"msg_controllen","","",25,N],[12,"msg_flags","","",25,N],[3,"cmsghdr","","",N,N],[12,"cmsg_len","","",26,N],[12,"cmsg_level","","",26,N],[12,"cmsg_type","","",26,N],[3,"fsid_t","","",N,N],[3,"if_nameindex","","",N,N],[12,"if_index","","",27,N],[12,"if_name","","",27,N],[3,"aiocb","","",N,N],[12,"aio_fildes","","",28,N],[12,"aio_offset","","",28,N],[12,"aio_buf","","",28,N],[12,"aio_nbytes","","",28,N],[12,"aio_reqprio","","",28,N],[12,"aio_sigevent","","",28,N],[12,"aio_lio_opcode","","",28,N],[3,"utmpx","","",N,N],[12,"ut_user","","",29,N],[12,"ut_id","","",29,N],[12,"ut_line","","",29,N],[12,"ut_pid","","",29,N],[12,"ut_type","","",29,N],[12,"ut_tv","","",29,N],[12,"ut_host","","",29,N],[3,"glob_t","","",N,N],[12,"gl_pathc","","",30,N],[12,"gl_offs","","",30,N],[12,"gl_pathv","","",30,N],[3,"sockaddr_storage","","",N,N],[12,"ss_len","","",31,N],[12,"ss_family","","",31,N],[3,"addrinfo","","",N,N],[12,"ai_flags","","",32,N],[12,"ai_family","","",32,N],[12,"ai_socktype","","",32,N],[12,"ai_protocol","","",32,N],[12,"ai_addrlen","","",32,N],[12,"ai_canonname","","",32,N],[12,"ai_addr","","",32,N],[12,"ai_next","","",32,N],[3,"mach_timebase_info","","",N,N],[12,"numer","","",33,N],[12,"denom","","",33,N],[3,"stat","","",N,N],[12,"st_dev","","",34,N],[12,"st_mode","","",34,N],[12,"st_nlink","","",34,N],[12,"st_ino","","",34,N],[12,"st_uid","","",34,N],[12,"st_gid","","",34,N],[12,"st_rdev","","",34,N],[12,"st_atime","","",34,N],[12,"st_atime_nsec","","",34,N],[12,"st_mtime","","",34,N],[12,"st_mtime_nsec","","",34,N],[12,"st_ctime","","",34,N],[12,"st_ctime_nsec","","",34,N],[12,"st_birthtime","","",34,N],[12,"st_birthtime_nsec","","",34,N],[12,"st_size","","",34,N],[12,"st_blocks","","",34,N],[12,"st_blksize","","",34,N],[12,"st_flags","","",34,N],[12,"st_gen","","",34,N],[12,"st_lspare","","",34,N],[12,"st_qspare","","",34,N],[3,"dirent","","",N,N],[12,"d_ino","","",35,N],[12,"d_seekoff","","",35,N],[12,"d_reclen","","",35,N],[12,"d_namlen","","",35,N],[12,"d_type","","",35,N],[12,"d_name","","",35,N],[3,"pthread_mutex_t","","",N,N],[3,"pthread_mutexattr_t","","",N,N],[3,"pthread_cond_t","","",N,N],[3,"pthread_condattr_t","","",N,N],[3,"pthread_rwlock_t","","",N,N],[3,"pthread_rwlockattr_t","","",N,N],[3,"siginfo_t","","",N,N],[12,"si_signo","","",36,N],[12,"si_errno","","",36,N],[12,"si_code","","",36,N],[12,"si_pid","","",36,N],[12,"si_uid","","",36,N],[12,"si_status","","",36,N],[12,"si_addr","","",36,N],[3,"sigaction","","",N,N],[12,"sa_sigaction","","",37,N],[12,"sa_mask","","",37,N],[12,"sa_flags","","",37,N],[3,"stack_t","","",N,N],[12,"ss_sp","","",38,N],[12,"ss_size","","",38,N],[12,"ss_flags","","",38,N],[3,"fstore_t","","",N,N],[12,"fst_flags","","",39,N],[12,"fst_posmode","","",39,N],[12,"fst_offset","","",39,N],[12,"fst_length","","",39,N],[12,"fst_bytesalloc","","",39,N],[3,"radvisory","","",N,N],[12,"ra_offset","","",40,N],[12,"ra_count","","",40,N],[3,"statvfs","","",N,N],[12,"f_bsize","","",41,N],[12,"f_frsize","","",41,N],[12,"f_blocks","","",41,N],[12,"f_bfree","","",41,N],[12,"f_bavail","","",41,N],[12,"f_files","","",41,N],[12,"f_ffree","","",41,N],[12,"f_favail","","",41,N],[12,"f_fsid","","",41,N],[12,"f_flag","","",41,N],[12,"f_namemax","","",41,N],[3,"Dl_info","","",N,N],[12,"dli_fname","","",42,N],[12,"dli_fbase","","",42,N],[12,"dli_sname","","",42,N],[12,"dli_saddr","","",42,N],[3,"sockaddr_in","","",N,N],[12,"sin_len","","",43,N],[12,"sin_family","","",43,N],[12,"sin_port","","",43,N],[12,"sin_addr","","",43,N],[12,"sin_zero","","",43,N],[3,"statfs","","",N,N],[12,"f_bsize","","",44,N],[12,"f_iosize","","",44,N],[12,"f_blocks","","",44,N],[12,"f_bfree","","",44,N],[12,"f_bavail","","",44,N],[12,"f_files","","",44,N],[12,"f_ffree","","",44,N],[12,"f_fsid","","",44,N],[12,"f_owner","","",44,N],[12,"f_type","","",44,N],[12,"f_flags","","",44,N],[12,"f_fssubtype","","",44,N],[12,"f_fstypename","","",44,N],[12,"f_mntonname","","",44,N],[12,"f_mntfromname","","",44,N],[12,"f_reserved","","",44,N],[3,"kevent","","",N,N],[12,"ident","","",45,N],[12,"filter","","",45,N],[12,"flags","","",45,N],[12,"fflags","","",45,N],[12,"data","","",45,N],[12,"udata","","",45,N],[3,"kevent64_s","","",N,N],[12,"ident","","",46,N],[12,"filter","","",46,N],[12,"flags","","",46,N],[12,"fflags","","",46,N],[12,"data","","",46,N],[12,"udata","","",46,N],[12,"ext","","",46,N],[3,"dqblk","","",N,N],[12,"dqb_bhardlimit","","",47,N],[12,"dqb_bsoftlimit","","",47,N],[12,"dqb_curbytes","","",47,N],[12,"dqb_ihardlimit","","",47,N],[12,"dqb_isoftlimit","","",47,N],[12,"dqb_curinodes","","",47,N],[12,"dqb_btime","","",47,N],[12,"dqb_itime","","",47,N],[12,"dqb_id","","",47,N],[12,"dqb_spare","","",47,N],[3,"termios","","",N,N],[12,"c_iflag","","",48,N],[12,"c_oflag","","",48,N],[12,"c_cflag","","",48,N],[12,"c_lflag","","",48,N],[12,"c_cc","","",48,N],[12,"c_ispeed","","",48,N],[12,"c_ospeed","","",48,N],[3,"flock","","",N,N],[12,"l_start","","",49,N],[12,"l_len","","",49,N],[12,"l_pid","","",49,N],[12,"l_type","","",49,N],[12,"l_whence","","",49,N],[3,"sf_hdtr","","",N,N],[12,"headers","","",50,N],[12,"hdr_cnt","","",50,N],[12,"trailers","","",50,N],[12,"trl_cnt","","",50,N],[3,"lconv","","",N,N],[12,"decimal_point","","",51,N],[12,"thousands_sep","","",51,N],[12,"grouping","","",51,N],[12,"int_curr_symbol","","",51,N],[12,"currency_symbol","","",51,N],[12,"mon_decimal_point","","",51,N],[12,"mon_thousands_sep","","",51,N],[12,"mon_grouping","","",51,N],[12,"positive_sign","","",51,N],[12,"negative_sign","","",51,N],[12,"int_frac_digits","","",51,N],[12,"frac_digits","","",51,N],[12,"p_cs_precedes","","",51,N],[12,"p_sep_by_space","","",51,N],[12,"n_cs_precedes","","",51,N],[12,"n_sep_by_space","","",51,N],[12,"p_sign_posn","","",51,N],[12,"n_sign_posn","","",51,N],[12,"int_p_cs_precedes","","",51,N],[12,"int_n_cs_precedes","","",51,N],[12,"int_p_sep_by_space","","",51,N],[12,"int_n_sep_by_space","","",51,N],[12,"int_p_sign_posn","","",51,N],[12,"int_n_sign_posn","","",51,N],[3,"sigevent","","",N,N],[12,"sigev_notify","","",52,N],[12,"sigev_signo","","",52,N],[12,"sigev_value","","",52,N],[12,"sigev_notify_attributes","","",52,N],[3,"pthread_attr_t","","",N,N],[4,"c_void","","",N,N],[4,"FILE","","",N,N],[4,"fpos_t","","",N,N],[4,"DIR","","",N,N],[4,"locale_t","","",N,N],[4,"timezone","","",N,N],[5,"FD_CLR","","",N,N],[5,"FD_ISSET","","",N,N],[5,"FD_SET","","",N,N],[5,"FD_ZERO","","",N,N],[5,"WTERMSIG","","",N,[[["c_int"]],["c_int"]]],[5,"WIFEXITED","","",N,[[["c_int"]],["bool"]]],[5,"WEXITSTATUS","","",N,[[["c_int"]],["c_int"]]],[5,"WCOREDUMP","","",N,[[["c_int"]],["bool"]]],[5,"WSTOPSIG","","",N,[[["c_int"]],["c_int"]]],[5,"_WSTATUS","","",N,[[["c_int"]],["c_int"]]],[5,"WIFCONTINUED","","",N,[[["c_int"]],["bool"]]],[5,"WIFSIGNALED","","",N,[[["c_int"]],["bool"]]],[5,"WIFSTOPPED","","",N,[[["c_int"]],["bool"]]],[5,"isalnum","","",N,N],[5,"isalpha","","",N,N],[5,"iscntrl","","",N,N],[5,"isdigit","","",N,N],[5,"isgraph","","",N,N],[5,"islower","","",N,N],[5,"isprint","","",N,N],[5,"ispunct","","",N,N],[5,"isspace","","",N,N],[5,"isupper","","",N,N],[5,"isxdigit","","",N,N],[5,"tolower","","",N,N],[5,"toupper","","",N,N],[5,"fopen","","",N,N],[5,"freopen","","",N,N],[5,"fflush","","",N,N],[5,"fclose","","",N,N],[5,"remove","","",N,N],[5,"rename","","",N,N],[5,"tmpfile","","",N,N],[5,"setvbuf","","",N,N],[5,"setbuf","","",N,N],[5,"getchar","","",N,N],[5,"putchar","","",N,N],[5,"fgetc","","",N,N],[5,"fgets","","",N,N],[5,"fputc","","",N,N],[5,"fputs","","",N,N],[5,"puts","","",N,N],[5,"ungetc","","",N,N],[5,"fread","","",N,N],[5,"fwrite","","",N,N],[5,"fseek","","",N,N],[5,"ftell","","",N,N],[5,"rewind","","",N,N],[5,"fgetpos","","",N,N],[5,"fsetpos","","",N,N],[5,"feof","","",N,N],[5,"ferror","","",N,N],[5,"perror","","",N,N],[5,"atoi","","",N,N],[5,"strtod","","",N,N],[5,"strtol","","",N,N],[5,"strtoul","","",N,N],[5,"calloc","","",N,N],[5,"malloc","","",N,N],[5,"realloc","","",N,N],[5,"free","","",N,N],[5,"abort","","",N,N],[5,"exit","","",N,N],[5,"_exit","","",N,N],[5,"atexit","","",N,N],[5,"system","","",N,N],[5,"getenv","","",N,N],[5,"strcpy","","",N,N],[5,"strncpy","","",N,N],[5,"strcat","","",N,N],[5,"strncat","","",N,N],[5,"strcmp","","",N,N],[5,"strncmp","","",N,N],[5,"strcoll","","",N,N],[5,"strchr","","",N,N],[5,"strrchr","","",N,N],[5,"strspn","","",N,N],[5,"strcspn","","",N,N],[5,"strdup","","",N,N],[5,"strpbrk","","",N,N],[5,"strstr","","",N,N],[5,"strlen","","",N,N],[5,"strnlen","","",N,N],[5,"strerror","","",N,N],[5,"strtok","","",N,N],[5,"strxfrm","","",N,N],[5,"wcslen","","",N,N],[5,"wcstombs","","",N,N],[5,"memchr","","",N,N],[5,"memcmp","","",N,N],[5,"memcpy","","",N,N],[5,"memmove","","",N,N],[5,"memset","","",N,N],[5,"abs","","",N,N],[5,"atof","","",N,N],[5,"labs","","",N,N],[5,"rand","","",N,N],[5,"srand","","",N,N],[5,"getgrnam","","",N,N],[5,"getgrgid","","",N,N],[5,"endpwent","","",N,N],[5,"getpwnam","","",N,N],[5,"getpwuid","","",N,N],[5,"fprintf","","",N,N],[5,"printf","","",N,N],[5,"snprintf","","",N,N],[5,"sprintf","","",N,N],[5,"fscanf","","",N,N],[5,"scanf","","",N,N],[5,"sscanf","","",N,N],[5,"getchar_unlocked","","",N,N],[5,"putchar_unlocked","","",N,N],[5,"socket","","",N,N],[5,"connect","","",N,N],[5,"listen","","",N,N],[5,"accept","","",N,N],[5,"getpeername","","",N,N],[5,"getsockname","","",N,N],[5,"setsockopt","","",N,N],[5,"socketpair","","",N,N],[5,"sendto","","",N,N],[5,"shutdown","","",N,N],[5,"chmod","","",N,N],[5,"fchmod","","",N,N],[5,"fstat","","",N,N],[5,"mkdir","","",N,N],[5,"stat","","",N,N],[5,"popen","","",N,N],[5,"pclose","","",N,N],[5,"fdopen","","",N,N],[5,"fileno","","",N,N],[5,"open","","",N,N],[5,"creat","","",N,N],[5,"fcntl","","",N,N],[5,"opendir","","",N,N],[5,"readdir","","",N,N],[5,"readdir_r","","",N,N],[5,"closedir","","",N,N],[5,"rewinddir","","",N,N],[5,"openat","","",N,N],[5,"faccessat","","",N,N],[5,"fchmodat","","",N,N],[5,"fchown","","",N,N],[5,"fchownat","","",N,N],[5,"fstatat","","",N,N],[5,"linkat","","",N,N],[5,"mkdirat","","",N,N],[5,"readlinkat","","",N,N],[5,"renameat","","",N,N],[5,"symlinkat","","",N,N],[5,"unlinkat","","",N,N],[5,"access","","",N,N],[5,"alarm","","",N,N],[5,"chdir","","",N,N],[5,"fchdir","","",N,N],[5,"chown","","",N,N],[5,"lchown","","",N,N],[5,"close","","",N,N],[5,"dup","","",N,N],[5,"dup2","","",N,N],[5,"execl","","",N,N],[5,"execle","","",N,N],[5,"execlp","","",N,N],[5,"execv","","",N,N],[5,"execve","","",N,N],[5,"execvp","","",N,N],[5,"fork","","",N,N],[5,"fpathconf","","",N,N],[5,"getcwd","","",N,N],[5,"getegid","","",N,N],[5,"geteuid","","",N,N],[5,"getgid","","",N,N],[5,"getgroups","","",N,N],[5,"getlogin","","",N,N],[5,"getopt","","",N,N],[5,"getpgid","","",N,N],[5,"getpgrp","","",N,N],[5,"getpid","","",N,N],[5,"getppid","","",N,N],[5,"getuid","","",N,N],[5,"isatty","","",N,N],[5,"link","","",N,N],[5,"lseek","","",N,N],[5,"pathconf","","",N,N],[5,"pause","","",N,N],[5,"pipe","","",N,N],[5,"posix_memalign","","",N,N],[5,"read","","",N,N],[5,"rmdir","","",N,N],[5,"seteuid","","",N,N],[5,"setgid","","",N,N],[5,"setpgid","","",N,N],[5,"setsid","","",N,N],[5,"setuid","","",N,N],[5,"sleep","","",N,N],[5,"nanosleep","","",N,N],[5,"tcgetpgrp","","",N,N],[5,"tcsetpgrp","","",N,N],[5,"ttyname","","",N,N],[5,"unlink","","",N,N],[5,"wait","","",N,N],[5,"waitpid","","",N,N],[5,"write","","",N,N],[5,"pread","","",N,N],[5,"pwrite","","",N,N],[5,"umask","","",N,N],[5,"utime","","",N,N],[5,"kill","","",N,N],[5,"mlock","","",N,N],[5,"munlock","","",N,N],[5,"mlockall","","",N,N],[5,"munlockall","","",N,N],[5,"mmap","","",N,N],[5,"munmap","","",N,N],[5,"if_nametoindex","","",N,N],[5,"if_indextoname","","",N,N],[5,"lstat","","",N,N],[5,"fsync","","",N,N],[5,"setenv","","",N,N],[5,"unsetenv","","",N,N],[5,"symlink","","",N,N],[5,"ftruncate","","",N,N],[5,"signal","","",N,N],[5,"getrlimit","","",N,N],[5,"setrlimit","","",N,N],[5,"getrusage","","",N,N],[5,"getdtablesize","","",N,N],[5,"realpath","","",N,N],[5,"flock","","",N,N],[5,"gettimeofday","","",N,N],[5,"times","","",N,N],[5,"pthread_self","","",N,N],[5,"pthread_create","","",N,N],[5,"pthread_join","","",N,N],[5,"pthread_atfork","","",N,N],[5,"pthread_exit","","",N,N],[5,"pthread_attr_init","","",N,N],[5,"pthread_attr_destroy","","",N,N],[5,"pthread_attr_setstacksize","","",N,N],[5,"pthread_attr_setdetachstate","","",N,N],[5,"pthread_detach","","",N,N],[5,"sched_yield","","",N,N],[5,"pthread_key_create","","",N,N],[5,"pthread_key_delete","","",N,N],[5,"pthread_getspecific","","",N,N],[5,"pthread_setspecific","","",N,N],[5,"pthread_mutex_init","","",N,N],[5,"pthread_mutex_destroy","","",N,N],[5,"pthread_mutex_lock","","",N,N],[5,"pthread_mutex_trylock","","",N,N],[5,"pthread_mutex_unlock","","",N,N],[5,"pthread_mutexattr_init","","",N,N],[5,"pthread_mutexattr_destroy","","",N,N],[5,"pthread_mutexattr_settype","","",N,N],[5,"pthread_cond_init","","",N,N],[5,"pthread_cond_wait","","",N,N],[5,"pthread_cond_timedwait","","",N,N],[5,"pthread_cond_signal","","",N,N],[5,"pthread_cond_broadcast","","",N,N],[5,"pthread_cond_destroy","","",N,N],[5,"pthread_condattr_init","","",N,N],[5,"pthread_condattr_destroy","","",N,N],[5,"pthread_rwlock_init","","",N,N],[5,"pthread_rwlock_destroy","","",N,N],[5,"pthread_rwlock_rdlock","","",N,N],[5,"pthread_rwlock_tryrdlock","","",N,N],[5,"pthread_rwlock_wrlock","","",N,N],[5,"pthread_rwlock_trywrlock","","",N,N],[5,"pthread_rwlock_unlock","","",N,N],[5,"pthread_rwlockattr_init","","",N,N],[5,"pthread_rwlockattr_destroy","","",N,N],[5,"pthread_sigmask","","",N,N],[5,"pthread_kill","","",N,N],[5,"strerror_r","","",N,N],[5,"getsockopt","","",N,N],[5,"raise","","",N,N],[5,"sigaction","","",N,N],[5,"sigaltstack","","",N,N],[5,"sigwait","","",N,N],[5,"utimes","","",N,N],[5,"dlopen","","",N,N],[5,"dlerror","","",N,N],[5,"dlsym","","",N,N],[5,"dlclose","","",N,N],[5,"dladdr","","",N,N],[5,"getaddrinfo","","",N,N],[5,"freeaddrinfo","","",N,N],[5,"gai_strerror","","",N,N],[5,"res_init","","",N,N],[5,"gmtime_r","","",N,N],[5,"localtime_r","","",N,N],[5,"mktime","","",N,N],[5,"time","","",N,N],[5,"gmtime","","",N,N],[5,"localtime","","",N,N],[5,"mknod","","",N,N],[5,"uname","","",N,N],[5,"daemon","","",N,N],[5,"gethostname","","",N,N],[5,"chroot","","",N,N],[5,"usleep","","",N,N],[5,"send","","",N,N],[5,"recv","","",N,N],[5,"putenv","","",N,N],[5,"poll","","",N,N],[5,"select","","",N,N],[5,"setlocale","","",N,N],[5,"localeconv","","",N,N],[5,"sem_destroy","","",N,N],[5,"sem_open","","",N,N],[5,"sem_close","","",N,N],[5,"sem_unlink","","",N,N],[5,"sem_wait","","",N,N],[5,"sem_trywait","","",N,N],[5,"sem_post","","",N,N],[5,"sem_init","","",N,N],[5,"statvfs","","",N,N],[5,"fstatvfs","","",N,N],[5,"readlink","","",N,N],[5,"sigemptyset","","",N,N],[5,"sigaddset","","",N,N],[5,"sigfillset","","",N,N],[5,"sigdelset","","",N,N],[5,"sigismember","","",N,N],[5,"sigprocmask","","",N,N],[5,"sigpending","","",N,N],[5,"timegm","","",N,N],[5,"getsid","","",N,N],[5,"sysconf","","",N,N],[5,"mkfifo","","",N,N],[5,"pselect","","",N,N],[5,"fseeko","","",N,N],[5,"ftello","","",N,N],[5,"tcdrain","","",N,N],[5,"cfgetispeed","","",N,N],[5,"cfgetospeed","","",N,N],[5,"cfmakeraw","","",N,N],[5,"cfsetispeed","","",N,N],[5,"cfsetospeed","","",N,N],[5,"cfsetspeed","","",N,N],[5,"tcgetattr","","",N,N],[5,"tcsetattr","","",N,N],[5,"tcflow","","",N,N],[5,"tcflush","","",N,N],[5,"tcgetsid","","",N,N],[5,"tcsendbreak","","",N,N],[5,"mkstemp","","",N,N],[5,"mkdtemp","","",N,N],[5,"tmpnam","","",N,N],[5,"openlog","","",N,N],[5,"closelog","","",N,N],[5,"setlogmask","","",N,N],[5,"syslog","","",N,N],[5,"nice","","",N,N],[5,"grantpt","","",N,N],[5,"posix_openpt","","",N,N],[5,"ptsname","","",N,N],[5,"unlockpt","","",N,N],[5,"getifaddrs","","",N,N],[5,"freeifaddrs","","",N,N],[5,"setgroups","","",N,N],[5,"ioctl","","",N,N],[5,"kqueue","","",N,N],[5,"unmount","","",N,N],[5,"syscall","","",N,N],[5,"getpwnam_r","","",N,N],[5,"getpwuid_r","","",N,N],[5,"getpwent","","",N,N],[5,"setpwent","","",N,N],[5,"getprogname","","",N,N],[5,"setprogname","","",N,N],[5,"getloadavg","","",N,N],[5,"if_nameindex","","",N,N],[5,"if_freenameindex","","",N,N],[5,"getpeereid","","",N,N],[5,"glob","","",N,N],[5,"globfree","","",N,N],[5,"posix_madvise","","",N,N],[5,"shm_unlink","","",N,N],[5,"seekdir","","",N,N],[5,"telldir","","",N,N],[5,"madvise","","",N,N],[5,"msync","","",N,N],[5,"recvfrom","","",N,N],[5,"mkstemps","","",N,N],[5,"futimes","","",N,N],[5,"nl_langinfo","","",N,N],[5,"bind","","",N,N],[5,"writev","","",N,N],[5,"readv","","",N,N],[5,"sendmsg","","",N,N],[5,"recvmsg","","",N,N],[5,"sync","","",N,N],[5,"aio_read","","",N,N],[5,"aio_write","","",N,N],[5,"aio_fsync","","",N,N],[5,"aio_error","","",N,N],[5,"aio_return","","",N,N],[5,"aio_suspend","","",N,N],[5,"aio_cancel","","",N,N],[5,"lio_listio","","",N,N],[5,"dirfd","","",N,N],[5,"lutimes","","",N,N],[5,"getutxent","","",N,N],[5,"getutxid","","",N,N],[5,"getutxline","","",N,N],[5,"pututxline","","",N,N],[5,"setutxent","","",N,N],[5,"endutxent","","",N,N],[5,"utmpxname","","",N,N],[5,"getnameinfo","","",N,N],[5,"mincore","","",N,N],[5,"sysctlnametomib","","",N,N],[5,"mprotect","","",N,N],[5,"shm_open","","",N,N],[5,"sysctl","","",N,N],[5,"sysctlbyname","","",N,N],[5,"mach_absolute_time","","",N,N],[5,"mach_timebase_info","","",N,N],[5,"pthread_setname_np","","",N,N],[5,"pthread_get_stackaddr_np","","",N,N],[5,"pthread_get_stacksize_np","","",N,N],[5,"pthread_condattr_setpshared","","",N,N],[5,"pthread_condattr_getpshared","","",N,N],[5,"pthread_mutexattr_setpshared","","",N,N],[5,"pthread_mutexattr_getpshared","","",N,N],[5,"pthread_rwlockattr_getpshared","","",N,N],[5,"pthread_rwlockattr_setpshared","","",N,N],[5,"__error","","",N,N],[5,"backtrace","","",N,N],[5,"statfs","","",N,N],[5,"fstatfs","","",N,N],[5,"kevent","","",N,N],[5,"kevent64","","",N,N],[5,"mount","","",N,N],[5,"ptrace","","",N,N],[5,"quotactl","","",N,N],[5,"sethostname","","",N,N],[5,"sendfile","","",N,N],[5,"openpty","","",N,N],[5,"forkpty","","",N,N],[5,"duplocale","","",N,N],[5,"freelocale","","",N,N],[5,"localeconv_l","","",N,N],[5,"newlocale","","",N,N],[5,"uselocale","","",N,N],[5,"querylocale","","",N,N],[5,"getpriority","","",N,N],[5,"setpriority","","",N,N],[5,"getxattr","","",N,N],[5,"fgetxattr","","",N,N],[5,"setxattr","","",N,N],[5,"fsetxattr","","",N,N],[5,"listxattr","","",N,N],[5,"flistxattr","","",N,N],[5,"removexattr","","",N,N],[5,"fremovexattr","","",N,N],[5,"initgroups","","",N,N],[5,"waitid","","",N,N],[5,"brk","","",N,N],[5,"sbrk","","",N,N],[5,"settimeofday","","",N,N],[11,"clone","","",53,[[["self"]],["pthread_attr_t"]]],[11,"clone","","",28,[[["self"]],["aiocb"]]],[11,"clone","","",29,[[["self"]],["utmpx"]]],[11,"clone","","",30,[[["self"]],["glob_t"]]],[11,"clone","","",31,[[["self"]],["sockaddr_storage"]]],[11,"clone","","",32,[[["self"]],["addrinfo"]]],[11,"clone","","",33,[[["self"]],["mach_timebase_info"]]],[11,"clone","","",34,[[["self"]],["stat"]]],[11,"clone","","",35,[[["self"]],["dirent"]]],[11,"clone","","",54,[[["self"]],["pthread_mutex_t"]]],[11,"clone","","",55,[[["self"]],["pthread_mutexattr_t"]]],[11,"clone","","",56,[[["self"]],["pthread_cond_t"]]],[11,"clone","","",57,[[["self"]],["pthread_condattr_t"]]],[11,"clone","","",58,[[["self"]],["pthread_rwlock_t"]]],[11,"clone","","",59,[[["self"]],["pthread_rwlockattr_t"]]],[11,"clone","","",36,[[["self"]],["siginfo_t"]]],[11,"clone","","",37,[[["self"]],["sigaction"]]],[11,"clone","","",38,[[["self"]],["stack_t"]]],[11,"clone","","",39,[[["self"]],["fstore_t"]]],[11,"clone","","",40,[[["self"]],["radvisory"]]],[11,"clone","","",41,[[["self"]],["statvfs"]]],[11,"clone","","",42,[[["self"]],["dl_info"]]],[11,"clone","","",43,[[["self"]],["sockaddr_in"]]],[11,"clone","","",44,[[["self"]],["statfs"]]],[11,"clone","","",45,[[["self"]],["kevent"]]],[11,"clone","","",46,[[["self"]],["kevent64_s"]]],[11,"clone","","",47,[[["self"]],["dqblk"]]],[11,"clone","","",48,[[["self"]],["termios"]]],[11,"clone","","",49,[[["self"]],["flock"]]],[11,"clone","","",50,[[["self"]],["sf_hdtr"]]],[11,"clone","","",51,[[["self"]],["lconv"]]],[11,"clone","","",52,[[["self"]],["sigevent"]]],[11,"clone","","",18,[[["self"]],["sockaddr"]]],[11,"clone","","",19,[[["self"]],["sockaddr_in6"]]],[11,"clone","","",20,[[["self"]],["sockaddr_un"]]],[11,"clone","","",21,[[["self"]],["passwd"]]],[11,"clone","","",22,[[["self"]],["ifaddrs"]]],[11,"clone","","",60,[[["self"]],["fd_set"]]],[11,"clone","","",23,[[["self"]],["tm"]]],[11,"clone","","",24,[[["self"]],["utsname"]]],[11,"clone","","",25,[[["self"]],["msghdr"]]],[11,"clone","","",26,[[["self"]],["cmsghdr"]]],[11,"clone","","",61,[[["self"]],["fsid_t"]]],[11,"clone","","",27,[[["self"]],["if_nameindex"]]],[11,"clone","","",0,[[["self"]],["group"]]],[11,"clone","","",1,[[["self"]],["utimbuf"]]],[11,"clone","","",2,[[["self"]],["timeval"]]],[11,"clone","","",3,[[["self"]],["timespec"]]],[11,"clone","","",4,[[["self"]],["rlimit"]]],[11,"clone","","",5,[[["self"]],["rusage"]]],[11,"clone","","",6,[[["self"]],["in_addr"]]],[11,"clone","","",7,[[["self"]],["in6_addr"]]],[11,"clone","","",8,[[["self"]],["ip_mreq"]]],[11,"clone","","",9,[[["self"]],["ipv6_mreq"]]],[11,"clone","","",10,[[["self"]],["hostent"]]],[11,"clone","","",11,[[["self"]],["iovec"]]],[11,"clone","","",12,[[["self"]],["pollfd"]]],[11,"clone","","",13,[[["self"]],["winsize"]]],[11,"clone","","",14,[[["self"]],["linger"]]],[11,"clone","","",15,[[["self"]],["sigval"]]],[11,"clone","","",16,[[["self"]],["itimerval"]]],[11,"clone","","",17,[[["self"]],["tms"]]],[6,"int8_t","","",N,N],[6,"int16_t","","",N,N],[6,"int32_t","","",N,N],[6,"int64_t","","",N,N],[6,"uint8_t","","",N,N],[6,"uint16_t","","",N,N],[6,"uint32_t","","",N,N],[6,"uint64_t","","",N,N],[6,"c_schar","","",N,N],[6,"c_uchar","","",N,N],[6,"c_short","","",N,N],[6,"c_ushort","","",N,N],[6,"c_int","","",N,N],[6,"c_uint","","",N,N],[6,"c_float","","",N,N],[6,"c_double","","",N,N],[6,"c_longlong","","",N,N],[6,"c_ulonglong","","",N,N],[6,"intmax_t","","",N,N],[6,"uintmax_t","","",N,N],[6,"size_t","","",N,N],[6,"ptrdiff_t","","",N,N],[6,"intptr_t","","",N,N],[6,"uintptr_t","","",N,N],[6,"ssize_t","","",N,N],[6,"pid_t","","",N,N],[6,"uid_t","","",N,N],[6,"gid_t","","",N,N],[6,"in_addr_t","","",N,N],[6,"in_port_t","","",N,N],[6,"sighandler_t","","",N,N],[6,"cc_t","","",N,N],[6,"c_char","","",N,N],[6,"wchar_t","","",N,N],[6,"off_t","","",N,N],[6,"useconds_t","","",N,N],[6,"blkcnt_t","","",N,N],[6,"socklen_t","","",N,N],[6,"sa_family_t","","",N,N],[6,"pthread_t","","",N,N],[6,"nfds_t","","",N,N],[6,"clock_t","","",N,N],[6,"time_t","","",N,N],[6,"suseconds_t","","",N,N],[6,"dev_t","","",N,N],[6,"ino_t","","",N,N],[6,"mode_t","","",N,N],[6,"nlink_t","","",N,N],[6,"blksize_t","","",N,N],[6,"rlim_t","","",N,N],[6,"mach_timebase_info_data_t","","",N,N],[6,"pthread_key_t","","",N,N],[6,"sigset_t","","",N,N],[6,"fsblkcnt_t","","",N,N],[6,"fsfilcnt_t","","",N,N],[6,"speed_t","","",N,N],[6,"tcflag_t","","",N,N],[6,"nl_item","","",N,N],[6,"id_t","","",N,N],[6,"sem_t","","",N,N],[6,"idtype_t","","",N,N],[6,"c_long","","",N,N],[6,"c_ulong","","",N,N],[17,"SIG_DFL","","",N,N],[17,"SIG_IGN","","",N,N],[17,"SIG_ERR","","",N,N],[17,"DT_FIFO","","",N,N],[17,"DT_CHR","","",N,N],[17,"DT_DIR","","",N,N],[17,"DT_BLK","","",N,N],[17,"DT_REG","","",N,N],[17,"DT_LNK","","",N,N],[17,"DT_SOCK","","",N,N],[17,"FD_CLOEXEC","","",N,N],[17,"USRQUOTA","","",N,N],[17,"GRPQUOTA","","",N,N],[17,"SIGIOT","","",N,N],[17,"S_ISUID","","",N,N],[17,"S_ISGID","","",N,N],[17,"S_ISVTX","","",N,N],[17,"POLLIN","","",N,N],[17,"POLLPRI","","",N,N],[17,"POLLOUT","","",N,N],[17,"POLLERR","","",N,N],[17,"POLLHUP","","",N,N],[17,"POLLNVAL","","",N,N],[17,"IF_NAMESIZE","","",N,N],[17,"RTLD_LAZY","","",N,N],[17,"LOG_EMERG","","",N,N],[17,"LOG_ALERT","","",N,N],[17,"LOG_CRIT","","",N,N],[17,"LOG_ERR","","",N,N],[17,"LOG_WARNING","","",N,N],[17,"LOG_NOTICE","","",N,N],[17,"LOG_INFO","","",N,N],[17,"LOG_DEBUG","","",N,N],[17,"LOG_KERN","","",N,N],[17,"LOG_USER","","",N,N],[17,"LOG_MAIL","","",N,N],[17,"LOG_DAEMON","","",N,N],[17,"LOG_AUTH","","",N,N],[17,"LOG_SYSLOG","","",N,N],[17,"LOG_LPR","","",N,N],[17,"LOG_NEWS","","",N,N],[17,"LOG_UUCP","","",N,N],[17,"LOG_LOCAL0","","",N,N],[17,"LOG_LOCAL1","","",N,N],[17,"LOG_LOCAL2","","",N,N],[17,"LOG_LOCAL3","","",N,N],[17,"LOG_LOCAL4","","",N,N],[17,"LOG_LOCAL5","","",N,N],[17,"LOG_LOCAL6","","",N,N],[17,"LOG_LOCAL7","","",N,N],[17,"LOG_PID","","",N,N],[17,"LOG_CONS","","",N,N],[17,"LOG_ODELAY","","",N,N],[17,"LOG_NDELAY","","",N,N],[17,"LOG_NOWAIT","","",N,N],[17,"LOG_PRIMASK","","",N,N],[17,"LOG_FACMASK","","",N,N],[17,"PRIO_PROCESS","","",N,N],[17,"PRIO_PGRP","","",N,N],[17,"PRIO_USER","","",N,N],[17,"PRIO_MIN","","",N,N],[17,"PRIO_MAX","","",N,N],[17,"LC_ALL","","",N,N],[17,"LC_COLLATE","","",N,N],[17,"LC_CTYPE","","",N,N],[17,"LC_MONETARY","","",N,N],[17,"LC_NUMERIC","","",N,N],[17,"LC_TIME","","",N,N],[17,"LC_MESSAGES","","",N,N],[17,"FIOCLEX","","",N,N],[17,"FIONBIO","","",N,N],[17,"PATH_MAX","","",N,N],[17,"SA_ONSTACK","","",N,N],[17,"SA_SIGINFO","","",N,N],[17,"SA_RESTART","","",N,N],[17,"SA_RESETHAND","","",N,N],[17,"SA_NOCLDSTOP","","",N,N],[17,"SA_NODEFER","","",N,N],[17,"SA_NOCLDWAIT","","",N,N],[17,"SS_ONSTACK","","",N,N],[17,"SS_DISABLE","","",N,N],[17,"SIGCHLD","","",N,N],[17,"SIGBUS","","",N,N],[17,"SIGUSR1","","",N,N],[17,"SIGUSR2","","",N,N],[17,"SIGCONT","","",N,N],[17,"SIGSTOP","","",N,N],[17,"SIGTSTP","","",N,N],[17,"SIGURG","","",N,N],[17,"SIGIO","","",N,N],[17,"SIGSYS","","",N,N],[17,"SIGTTIN","","",N,N],[17,"SIGTTOU","","",N,N],[17,"SIGXCPU","","",N,N],[17,"SIGXFSZ","","",N,N],[17,"SIGVTALRM","","",N,N],[17,"SIGPROF","","",N,N],[17,"SIGWINCH","","",N,N],[17,"SIGINFO","","",N,N],[17,"SIG_SETMASK","","",N,N],[17,"SIG_BLOCK","","",N,N],[17,"SIG_UNBLOCK","","",N,N],[17,"IPV6_MULTICAST_LOOP","","",N,N],[17,"IPV6_V6ONLY","","",N,N],[17,"ST_RDONLY","","",N,N],[17,"NCCS","","",N,N],[17,"O_ACCMODE","","",N,N],[17,"O_RDONLY","","",N,N],[17,"O_WRONLY","","",N,N],[17,"O_RDWR","","",N,N],[17,"O_APPEND","","",N,N],[17,"O_CREAT","","",N,N],[17,"O_TRUNC","","",N,N],[17,"O_EXCL","","",N,N],[17,"O_ASYNC","","",N,N],[17,"O_SYNC","","",N,N],[17,"O_NONBLOCK","","",N,N],[17,"O_NOFOLLOW","","",N,N],[17,"O_SHLOCK","","",N,N],[17,"O_EXLOCK","","",N,N],[17,"O_FSYNC","","",N,N],[17,"O_NDELAY","","",N,N],[17,"F_GETOWN","","",N,N],[17,"F_SETOWN","","",N,N],[17,"MNT_FORCE","","",N,N],[17,"Q_SYNC","","",N,N],[17,"Q_QUOTAON","","",N,N],[17,"Q_QUOTAOFF","","",N,N],[17,"TCIOFF","","",N,N],[17,"TCION","","",N,N],[17,"TCOOFF","","",N,N],[17,"TCOON","","",N,N],[17,"TCIFLUSH","","",N,N],[17,"TCOFLUSH","","",N,N],[17,"TCIOFLUSH","","",N,N],[17,"TCSANOW","","",N,N],[17,"TCSADRAIN","","",N,N],[17,"TCSAFLUSH","","",N,N],[17,"VEOF","","",N,N],[17,"VEOL","","",N,N],[17,"VEOL2","","",N,N],[17,"VERASE","","",N,N],[17,"VWERASE","","",N,N],[17,"VKILL","","",N,N],[17,"VREPRINT","","",N,N],[17,"VINTR","","",N,N],[17,"VQUIT","","",N,N],[17,"VSUSP","","",N,N],[17,"VDSUSP","","",N,N],[17,"VSTART","","",N,N],[17,"VSTOP","","",N,N],[17,"VLNEXT","","",N,N],[17,"VDISCARD","","",N,N],[17,"VMIN","","",N,N],[17,"VTIME","","",N,N],[17,"VSTATUS","","",N,N],[17,"_POSIX_VDISABLE","","",N,N],[17,"IGNBRK","","",N,N],[17,"BRKINT","","",N,N],[17,"IGNPAR","","",N,N],[17,"PARMRK","","",N,N],[17,"INPCK","","",N,N],[17,"ISTRIP","","",N,N],[17,"INLCR","","",N,N],[17,"IGNCR","","",N,N],[17,"ICRNL","","",N,N],[17,"IXON","","",N,N],[17,"IXOFF","","",N,N],[17,"IXANY","","",N,N],[17,"IMAXBEL","","",N,N],[17,"OPOST","","",N,N],[17,"ONLCR","","",N,N],[17,"OXTABS","","",N,N],[17,"ONOEOT","","",N,N],[17,"CIGNORE","","",N,N],[17,"CSIZE","","",N,N],[17,"CS5","","",N,N],[17,"CS6","","",N,N],[17,"CS7","","",N,N],[17,"CS8","","",N,N],[17,"CSTOPB","","",N,N],[17,"CREAD","","",N,N],[17,"PARENB","","",N,N],[17,"PARODD","","",N,N],[17,"HUPCL","","",N,N],[17,"CLOCAL","","",N,N],[17,"ECHOKE","","",N,N],[17,"ECHOE","","",N,N],[17,"ECHOK","","",N,N],[17,"ECHO","","",N,N],[17,"ECHONL","","",N,N],[17,"ECHOPRT","","",N,N],[17,"ECHOCTL","","",N,N],[17,"ISIG","","",N,N],[17,"ICANON","","",N,N],[17,"ALTWERASE","","",N,N],[17,"IEXTEN","","",N,N],[17,"EXTPROC","","",N,N],[17,"TOSTOP","","",N,N],[17,"FLUSHO","","",N,N],[17,"NOKERNINFO","","",N,N],[17,"PENDIN","","",N,N],[17,"NOFLSH","","",N,N],[17,"MDMBUF","","",N,N],[17,"WNOHANG","","",N,N],[17,"WUNTRACED","","",N,N],[17,"RTLD_NOW","","",N,N],[17,"RTLD_NEXT","","",N,N],[17,"RTLD_DEFAULT","","",N,N],[17,"RTLD_SELF","","",N,N],[17,"LOG_CRON","","",N,N],[17,"LOG_AUTHPRIV","","",N,N],[17,"LOG_FTP","","",N,N],[17,"LOG_PERROR","","",N,N],[17,"PIPE_BUF","","",N,N],[17,"_UTX_USERSIZE","","",N,N],[17,"_UTX_LINESIZE","","",N,N],[17,"_UTX_IDSIZE","","",N,N],[17,"_UTX_HOSTSIZE","","",N,N],[17,"EMPTY","","",N,N],[17,"RUN_LVL","","",N,N],[17,"BOOT_TIME","","",N,N],[17,"OLD_TIME","","",N,N],[17,"NEW_TIME","","",N,N],[17,"INIT_PROCESS","","",N,N],[17,"LOGIN_PROCESS","","",N,N],[17,"USER_PROCESS","","",N,N],[17,"DEAD_PROCESS","","",N,N],[17,"ACCOUNTING","","",N,N],[17,"SIGNATURE","","",N,N],[17,"SHUTDOWN_TIME","","",N,N],[17,"LC_COLLATE_MASK","","",N,N],[17,"LC_CTYPE_MASK","","",N,N],[17,"LC_MESSAGES_MASK","","",N,N],[17,"LC_MONETARY_MASK","","",N,N],[17,"LC_NUMERIC_MASK","","",N,N],[17,"LC_TIME_MASK","","",N,N],[17,"LC_ALL_MASK","","",N,N],[17,"CODESET","","",N,N],[17,"D_T_FMT","","",N,N],[17,"D_FMT","","",N,N],[17,"T_FMT","","",N,N],[17,"T_FMT_AMPM","","",N,N],[17,"AM_STR","","",N,N],[17,"PM_STR","","",N,N],[17,"DAY_1","","",N,N],[17,"DAY_2","","",N,N],[17,"DAY_3","","",N,N],[17,"DAY_4","","",N,N],[17,"DAY_5","","",N,N],[17,"DAY_6","","",N,N],[17,"DAY_7","","",N,N],[17,"ABDAY_1","","",N,N],[17,"ABDAY_2","","",N,N],[17,"ABDAY_3","","",N,N],[17,"ABDAY_4","","",N,N],[17,"ABDAY_5","","",N,N],[17,"ABDAY_6","","",N,N],[17,"ABDAY_7","","",N,N],[17,"MON_1","","",N,N],[17,"MON_2","","",N,N],[17,"MON_3","","",N,N],[17,"MON_4","","",N,N],[17,"MON_5","","",N,N],[17,"MON_6","","",N,N],[17,"MON_7","","",N,N],[17,"MON_8","","",N,N],[17,"MON_9","","",N,N],[17,"MON_10","","",N,N],[17,"MON_11","","",N,N],[17,"MON_12","","",N,N],[17,"ABMON_1","","",N,N],[17,"ABMON_2","","",N,N],[17,"ABMON_3","","",N,N],[17,"ABMON_4","","",N,N],[17,"ABMON_5","","",N,N],[17,"ABMON_6","","",N,N],[17,"ABMON_7","","",N,N],[17,"ABMON_8","","",N,N],[17,"ABMON_9","","",N,N],[17,"ABMON_10","","",N,N],[17,"ABMON_11","","",N,N],[17,"ABMON_12","","",N,N],[17,"ERA","","",N,N],[17,"ERA_D_FMT","","",N,N],[17,"ERA_D_T_FMT","","",N,N],[17,"ERA_T_FMT","","",N,N],[17,"ALT_DIGITS","","",N,N],[17,"RADIXCHAR","","",N,N],[17,"THOUSEP","","",N,N],[17,"YESEXPR","","",N,N],[17,"NOEXPR","","",N,N],[17,"YESSTR","","",N,N],[17,"NOSTR","","",N,N],[17,"CRNCYSTR","","",N,N],[17,"D_MD_ORDER","","",N,N],[17,"EXIT_FAILURE","","",N,N],[17,"EXIT_SUCCESS","","",N,N],[17,"RAND_MAX","","",N,N],[17,"EOF","","",N,N],[17,"SEEK_SET","","",N,N],[17,"SEEK_CUR","","",N,N],[17,"SEEK_END","","",N,N],[17,"_IOFBF","","",N,N],[17,"_IONBF","","",N,N],[17,"_IOLBF","","",N,N],[17,"BUFSIZ","","",N,N],[17,"FOPEN_MAX","","",N,N],[17,"FILENAME_MAX","","",N,N],[17,"L_tmpnam","","",N,N],[17,"TMP_MAX","","",N,N],[17,"_PC_LINK_MAX","","",N,N],[17,"_PC_MAX_CANON","","",N,N],[17,"_PC_MAX_INPUT","","",N,N],[17,"_PC_NAME_MAX","","",N,N],[17,"_PC_PATH_MAX","","",N,N],[17,"_PC_PIPE_BUF","","",N,N],[17,"_PC_CHOWN_RESTRICTED","","",N,N],[17,"_PC_NO_TRUNC","","",N,N],[17,"_PC_VDISABLE","","",N,N],[17,"O_DSYNC","","",N,N],[17,"O_NOCTTY","","",N,N],[17,"O_CLOEXEC","","",N,N],[17,"O_DIRECTORY","","",N,N],[17,"S_IFIFO","","",N,N],[17,"S_IFCHR","","",N,N],[17,"S_IFBLK","","",N,N],[17,"S_IFDIR","","",N,N],[17,"S_IFREG","","",N,N],[17,"S_IFLNK","","",N,N],[17,"S_IFSOCK","","",N,N],[17,"S_IFMT","","",N,N],[17,"S_IEXEC","","",N,N],[17,"S_IWRITE","","",N,N],[17,"S_IREAD","","",N,N],[17,"S_IRWXU","","",N,N],[17,"S_IXUSR","","",N,N],[17,"S_IWUSR","","",N,N],[17,"S_IRUSR","","",N,N],[17,"S_IRWXG","","",N,N],[17,"S_IXGRP","","",N,N],[17,"S_IWGRP","","",N,N],[17,"S_IRGRP","","",N,N],[17,"S_IRWXO","","",N,N],[17,"S_IXOTH","","",N,N],[17,"S_IWOTH","","",N,N],[17,"S_IROTH","","",N,N],[17,"F_OK","","",N,N],[17,"R_OK","","",N,N],[17,"W_OK","","",N,N],[17,"X_OK","","",N,N],[17,"STDIN_FILENO","","",N,N],[17,"STDOUT_FILENO","","",N,N],[17,"STDERR_FILENO","","",N,N],[17,"F_LOCK","","",N,N],[17,"F_TEST","","",N,N],[17,"F_TLOCK","","",N,N],[17,"F_ULOCK","","",N,N],[17,"F_GETLK","","",N,N],[17,"F_SETLK","","",N,N],[17,"F_SETLKW","","",N,N],[17,"SIGHUP","","",N,N],[17,"SIGINT","","",N,N],[17,"SIGQUIT","","",N,N],[17,"SIGILL","","",N,N],[17,"SIGABRT","","",N,N],[17,"SIGEMT","","",N,N],[17,"SIGFPE","","",N,N],[17,"SIGKILL","","",N,N],[17,"SIGSEGV","","",N,N],[17,"SIGPIPE","","",N,N],[17,"SIGALRM","","",N,N],[17,"SIGTERM","","",N,N],[17,"PROT_NONE","","",N,N],[17,"PROT_READ","","",N,N],[17,"PROT_WRITE","","",N,N],[17,"PROT_EXEC","","",N,N],[17,"MAP_FILE","","",N,N],[17,"MAP_SHARED","","",N,N],[17,"MAP_PRIVATE","","",N,N],[17,"MAP_FIXED","","",N,N],[17,"MAP_ANON","","",N,N],[17,"MAP_FAILED","","",N,N],[17,"MCL_CURRENT","","",N,N],[17,"MCL_FUTURE","","",N,N],[17,"MS_ASYNC","","",N,N],[17,"MS_INVALIDATE","","",N,N],[17,"MS_SYNC","","",N,N],[17,"MS_KILLPAGES","","",N,N],[17,"MS_DEACTIVATE","","",N,N],[17,"EPERM","","",N,N],[17,"ENOENT","","",N,N],[17,"ESRCH","","",N,N],[17,"EINTR","","",N,N],[17,"EIO","","",N,N],[17,"ENXIO","","",N,N],[17,"E2BIG","","",N,N],[17,"ENOEXEC","","",N,N],[17,"EBADF","","",N,N],[17,"ECHILD","","",N,N],[17,"EDEADLK","","",N,N],[17,"ENOMEM","","",N,N],[17,"EACCES","","",N,N],[17,"EFAULT","","",N,N],[17,"ENOTBLK","","",N,N],[17,"EBUSY","","",N,N],[17,"EEXIST","","",N,N],[17,"EXDEV","","",N,N],[17,"ENODEV","","",N,N],[17,"ENOTDIR","","",N,N],[17,"EISDIR","","",N,N],[17,"EINVAL","","",N,N],[17,"ENFILE","","",N,N],[17,"EMFILE","","",N,N],[17,"ENOTTY","","",N,N],[17,"ETXTBSY","","",N,N],[17,"EFBIG","","",N,N],[17,"ENOSPC","","",N,N],[17,"ESPIPE","","",N,N],[17,"EROFS","","",N,N],[17,"EMLINK","","",N,N],[17,"EPIPE","","",N,N],[17,"EDOM","","",N,N],[17,"ERANGE","","",N,N],[17,"EAGAIN","","",N,N],[17,"EWOULDBLOCK","","",N,N],[17,"EINPROGRESS","","",N,N],[17,"EALREADY","","",N,N],[17,"ENOTSOCK","","",N,N],[17,"EDESTADDRREQ","","",N,N],[17,"EMSGSIZE","","",N,N],[17,"EPROTOTYPE","","",N,N],[17,"ENOPROTOOPT","","",N,N],[17,"EPROTONOSUPPORT","","",N,N],[17,"ESOCKTNOSUPPORT","","",N,N],[17,"ENOTSUP","","",N,N],[17,"EPFNOSUPPORT","","",N,N],[17,"EAFNOSUPPORT","","",N,N],[17,"EADDRINUSE","","",N,N],[17,"EADDRNOTAVAIL","","",N,N],[17,"ENETDOWN","","",N,N],[17,"ENETUNREACH","","",N,N],[17,"ENETRESET","","",N,N],[17,"ECONNABORTED","","",N,N],[17,"ECONNRESET","","",N,N],[17,"ENOBUFS","","",N,N],[17,"EISCONN","","",N,N],[17,"ENOTCONN","","",N,N],[17,"ESHUTDOWN","","",N,N],[17,"ETOOMANYREFS","","",N,N],[17,"ETIMEDOUT","","",N,N],[17,"ECONNREFUSED","","",N,N],[17,"ELOOP","","",N,N],[17,"ENAMETOOLONG","","",N,N],[17,"EHOSTDOWN","","",N,N],[17,"EHOSTUNREACH","","",N,N],[17,"ENOTEMPTY","","",N,N],[17,"EPROCLIM","","",N,N],[17,"EUSERS","","",N,N],[17,"EDQUOT","","",N,N],[17,"ESTALE","","",N,N],[17,"EREMOTE","","",N,N],[17,"EBADRPC","","",N,N],[17,"ERPCMISMATCH","","",N,N],[17,"EPROGUNAVAIL","","",N,N],[17,"EPROGMISMATCH","","",N,N],[17,"EPROCUNAVAIL","","",N,N],[17,"ENOLCK","","",N,N],[17,"ENOSYS","","",N,N],[17,"EFTYPE","","",N,N],[17,"EAUTH","","",N,N],[17,"ENEEDAUTH","","",N,N],[17,"EPWROFF","","",N,N],[17,"EDEVERR","","",N,N],[17,"EOVERFLOW","","",N,N],[17,"EBADEXEC","","",N,N],[17,"EBADARCH","","",N,N],[17,"ESHLIBVERS","","",N,N],[17,"EBADMACHO","","",N,N],[17,"ECANCELED","","",N,N],[17,"EIDRM","","",N,N],[17,"ENOMSG","","",N,N],[17,"EILSEQ","","",N,N],[17,"ENOATTR","","",N,N],[17,"EBADMSG","","",N,N],[17,"EMULTIHOP","","",N,N],[17,"ENODATA","","",N,N],[17,"ENOLINK","","",N,N],[17,"ENOSR","","",N,N],[17,"ENOSTR","","",N,N],[17,"EPROTO","","",N,N],[17,"ETIME","","",N,N],[17,"EOPNOTSUPP","","",N,N],[17,"ENOPOLICY","","",N,N],[17,"ENOTRECOVERABLE","","",N,N],[17,"EOWNERDEAD","","",N,N],[17,"EQFULL","","",N,N],[17,"ELAST","","",N,N],[17,"EAI_SYSTEM","","",N,N],[17,"F_DUPFD","","",N,N],[17,"F_DUPFD_CLOEXEC","","",N,N],[17,"F_GETFD","","",N,N],[17,"F_SETFD","","",N,N],[17,"F_GETFL","","",N,N],[17,"F_SETFL","","",N,N],[17,"F_PREALLOCATE","","",N,N],[17,"F_RDADVISE","","",N,N],[17,"F_RDAHEAD","","",N,N],[17,"F_NOCACHE","","",N,N],[17,"F_GETPATH","","",N,N],[17,"F_FULLFSYNC","","",N,N],[17,"F_FREEZE_FS","","",N,N],[17,"F_THAW_FS","","",N,N],[17,"F_GLOBAL_NOCACHE","","",N,N],[17,"F_NODIRECT","","",N,N],[17,"F_ALLOCATECONTIG","","",N,N],[17,"F_ALLOCATEALL","","",N,N],[17,"F_PEOFPOSMODE","","",N,N],[17,"F_VOLPOSMODE","","",N,N],[17,"AT_FDCWD","","",N,N],[17,"AT_EACCESS","","",N,N],[17,"AT_SYMLINK_NOFOLLOW","","",N,N],[17,"AT_SYMLINK_FOLLOW","","",N,N],[17,"AT_REMOVEDIR","","",N,N],[17,"TIOCMODG","","",N,N],[17,"TIOCMODS","","",N,N],[17,"TIOCM_LE","","",N,N],[17,"TIOCM_DTR","","",N,N],[17,"TIOCM_RTS","","",N,N],[17,"TIOCM_ST","","",N,N],[17,"TIOCM_SR","","",N,N],[17,"TIOCM_CTS","","",N,N],[17,"TIOCM_CAR","","",N,N],[17,"TIOCM_CD","","",N,N],[17,"TIOCM_RNG","","",N,N],[17,"TIOCM_RI","","",N,N],[17,"TIOCM_DSR","","",N,N],[17,"TIOCEXCL","","",N,N],[17,"TIOCNXCL","","",N,N],[17,"TIOCFLUSH","","",N,N],[17,"TIOCGETD","","",N,N],[17,"TIOCSETD","","",N,N],[17,"TIOCIXON","","",N,N],[17,"TIOCIXOFF","","",N,N],[17,"TIOCSBRK","","",N,N],[17,"TIOCCBRK","","",N,N],[17,"TIOCSDTR","","",N,N],[17,"TIOCCDTR","","",N,N],[17,"TIOCGPGRP","","",N,N],[17,"TIOCSPGRP","","",N,N],[17,"TIOCOUTQ","","",N,N],[17,"TIOCSTI","","",N,N],[17,"TIOCNOTTY","","",N,N],[17,"TIOCPKT","","",N,N],[17,"TIOCPKT_DATA","","",N,N],[17,"TIOCPKT_FLUSHREAD","","",N,N],[17,"TIOCPKT_FLUSHWRITE","","",N,N],[17,"TIOCPKT_STOP","","",N,N],[17,"TIOCPKT_START","","",N,N],[17,"TIOCPKT_NOSTOP","","",N,N],[17,"TIOCPKT_DOSTOP","","",N,N],[17,"TIOCPKT_IOCTL","","",N,N],[17,"TIOCSTOP","","",N,N],[17,"TIOCSTART","","",N,N],[17,"TIOCMSET","","",N,N],[17,"TIOCMBIS","","",N,N],[17,"TIOCMBIC","","",N,N],[17,"TIOCMGET","","",N,N],[17,"TIOCREMOTE","","",N,N],[17,"TIOCGWINSZ","","",N,N],[17,"TIOCSWINSZ","","",N,N],[17,"TIOCUCNTL","","",N,N],[17,"TIOCSTAT","","",N,N],[17,"TIOCSCONS","","",N,N],[17,"TIOCCONS","","",N,N],[17,"TIOCSCTTY","","",N,N],[17,"TIOCEXT","","",N,N],[17,"TIOCSIG","","",N,N],[17,"TIOCDRAIN","","",N,N],[17,"TIOCMSDTRWAIT","","",N,N],[17,"TIOCMGDTRWAIT","","",N,N],[17,"TIOCSDRAINWAIT","","",N,N],[17,"TIOCGDRAINWAIT","","",N,N],[17,"TIOCDSIMICROCODE","","",N,N],[17,"TIOCPTYGRANT","","",N,N],[17,"TIOCPTYGNAME","","",N,N],[17,"TIOCPTYUNLK","","",N,N],[17,"B0","","",N,N],[17,"B50","","",N,N],[17,"B75","","",N,N],[17,"B110","","",N,N],[17,"B134","","",N,N],[17,"B150","","",N,N],[17,"B200","","",N,N],[17,"B300","","",N,N],[17,"B600","","",N,N],[17,"B1200","","",N,N],[17,"B1800","","",N,N],[17,"B2400","","",N,N],[17,"B4800","","",N,N],[17,"B9600","","",N,N],[17,"B19200","","",N,N],[17,"B38400","","",N,N],[17,"B7200","","",N,N],[17,"B14400","","",N,N],[17,"B28800","","",N,N],[17,"B57600","","",N,N],[17,"B76800","","",N,N],[17,"B115200","","",N,N],[17,"B230400","","",N,N],[17,"EXTA","","",N,N],[17,"EXTB","","",N,N],[17,"SIGTRAP","","",N,N],[17,"GLOB_APPEND","","",N,N],[17,"GLOB_DOOFFS","","",N,N],[17,"GLOB_ERR","","",N,N],[17,"GLOB_MARK","","",N,N],[17,"GLOB_NOCHECK","","",N,N],[17,"GLOB_NOSORT","","",N,N],[17,"GLOB_NOESCAPE","","",N,N],[17,"GLOB_NOSPACE","","",N,N],[17,"GLOB_ABORTED","","",N,N],[17,"GLOB_NOMATCH","","",N,N],[17,"POSIX_MADV_NORMAL","","",N,N],[17,"POSIX_MADV_RANDOM","","",N,N],[17,"POSIX_MADV_SEQUENTIAL","","",N,N],[17,"POSIX_MADV_WILLNEED","","",N,N],[17,"POSIX_MADV_DONTNEED","","",N,N],[17,"_SC_IOV_MAX","","",N,N],[17,"_SC_GETGR_R_SIZE_MAX","","",N,N],[17,"_SC_GETPW_R_SIZE_MAX","","",N,N],[17,"_SC_LOGIN_NAME_MAX","","",N,N],[17,"_SC_MQ_PRIO_MAX","","",N,N],[17,"_SC_THREAD_ATTR_STACKADDR","","",N,N],[17,"_SC_THREAD_ATTR_STACKSIZE","","",N,N],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",N,N],[17,"_SC_THREAD_KEYS_MAX","","",N,N],[17,"_SC_THREAD_PRIO_INHERIT","","",N,N],[17,"_SC_THREAD_PRIO_PROTECT","","",N,N],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",N,N],[17,"_SC_THREAD_PROCESS_SHARED","","",N,N],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",N,N],[17,"_SC_THREAD_STACK_MIN","","",N,N],[17,"_SC_THREAD_THREADS_MAX","","",N,N],[17,"_SC_THREADS","","",N,N],[17,"_SC_TTY_NAME_MAX","","",N,N],[17,"_SC_ATEXIT_MAX","","",N,N],[17,"_SC_XOPEN_CRYPT","","",N,N],[17,"_SC_XOPEN_ENH_I18N","","",N,N],[17,"_SC_XOPEN_LEGACY","","",N,N],[17,"_SC_XOPEN_REALTIME","","",N,N],[17,"_SC_XOPEN_REALTIME_THREADS","","",N,N],[17,"_SC_XOPEN_SHM","","",N,N],[17,"_SC_XOPEN_UNIX","","",N,N],[17,"_SC_XOPEN_VERSION","","",N,N],[17,"_SC_XOPEN_XCU_VERSION","","",N,N],[17,"PTHREAD_PROCESS_PRIVATE","","",N,N],[17,"PTHREAD_PROCESS_SHARED","","",N,N],[17,"PTHREAD_CREATE_JOINABLE","","",N,N],[17,"PTHREAD_CREATE_DETACHED","","",N,N],[17,"PTHREAD_STACK_MIN","","",N,N],[17,"RLIMIT_CPU","","",N,N],[17,"RLIMIT_FSIZE","","",N,N],[17,"RLIMIT_DATA","","",N,N],[17,"RLIMIT_STACK","","",N,N],[17,"RLIMIT_CORE","","",N,N],[17,"RLIMIT_AS","","",N,N],[17,"RLIMIT_RSS","","",N,N],[17,"RLIMIT_MEMLOCK","","",N,N],[17,"RLIMIT_NPROC","","",N,N],[17,"RLIMIT_NOFILE","","",N,N],[17,"RLIM_NLIMITS","","",N,N],[17,"_RLIMIT_POSIX_FLAG","","",N,N],[17,"RLIM_INFINITY","","",N,N],[17,"RUSAGE_SELF","","",N,N],[17,"RUSAGE_CHILDREN","","",N,N],[17,"MADV_NORMAL","","",N,N],[17,"MADV_RANDOM","","",N,N],[17,"MADV_SEQUENTIAL","","",N,N],[17,"MADV_WILLNEED","","",N,N],[17,"MADV_DONTNEED","","",N,N],[17,"MADV_FREE","","",N,N],[17,"MADV_ZERO_WIRED_PAGES","","",N,N],[17,"MADV_FREE_REUSABLE","","",N,N],[17,"MADV_FREE_REUSE","","",N,N],[17,"MADV_CAN_REUSE","","",N,N],[17,"MINCORE_INCORE","","",N,N],[17,"MINCORE_REFERENCED","","",N,N],[17,"MINCORE_MODIFIED","","",N,N],[17,"MINCORE_REFERENCED_OTHER","","",N,N],[17,"MINCORE_MODIFIED_OTHER","","",N,N],[17,"AF_UNSPEC","","",N,N],[17,"AF_LOCAL","","",N,N],[17,"AF_UNIX","","",N,N],[17,"AF_INET","","",N,N],[17,"AF_IMPLINK","","",N,N],[17,"AF_PUP","","",N,N],[17,"AF_CHAOS","","",N,N],[17,"AF_NS","","",N,N],[17,"AF_ISO","","",N,N],[17,"AF_OSI","","",N,N],[17,"AF_ECMA","","",N,N],[17,"AF_DATAKIT","","",N,N],[17,"AF_CCITT","","",N,N],[17,"AF_SNA","","",N,N],[17,"AF_DECnet","","",N,N],[17,"AF_DLI","","",N,N],[17,"AF_LAT","","",N,N],[17,"AF_HYLINK","","",N,N],[17,"AF_APPLETALK","","",N,N],[17,"AF_ROUTE","","",N,N],[17,"AF_LINK","","",N,N],[17,"pseudo_AF_XTP","","",N,N],[17,"AF_COIP","","",N,N],[17,"AF_CNT","","",N,N],[17,"pseudo_AF_RTIP","","",N,N],[17,"AF_IPX","","",N,N],[17,"AF_SIP","","",N,N],[17,"pseudo_AF_PIP","","",N,N],[17,"AF_ISDN","","",N,N],[17,"AF_E164","","",N,N],[17,"pseudo_AF_KEY","","",N,N],[17,"AF_INET6","","",N,N],[17,"AF_NATM","","",N,N],[17,"AF_SYSTEM","","",N,N],[17,"AF_NETBIOS","","",N,N],[17,"AF_PPP","","",N,N],[17,"pseudo_AF_HDRCMPLT","","",N,N],[17,"PF_UNSPEC","","",N,N],[17,"PF_LOCAL","","",N,N],[17,"PF_UNIX","","",N,N],[17,"PF_INET","","",N,N],[17,"PF_IMPLINK","","",N,N],[17,"PF_PUP","","",N,N],[17,"PF_CHAOS","","",N,N],[17,"PF_NS","","",N,N],[17,"PF_ISO","","",N,N],[17,"PF_OSI","","",N,N],[17,"PF_ECMA","","",N,N],[17,"PF_DATAKIT","","",N,N],[17,"PF_CCITT","","",N,N],[17,"PF_SNA","","",N,N],[17,"PF_DECnet","","",N,N],[17,"PF_DLI","","",N,N],[17,"PF_LAT","","",N,N],[17,"PF_HYLINK","","",N,N],[17,"PF_APPLETALK","","",N,N],[17,"PF_ROUTE","","",N,N],[17,"PF_LINK","","",N,N],[17,"PF_XTP","","",N,N],[17,"PF_COIP","","",N,N],[17,"PF_CNT","","",N,N],[17,"PF_SIP","","",N,N],[17,"PF_IPX","","",N,N],[17,"PF_RTIP","","",N,N],[17,"PF_PIP","","",N,N],[17,"PF_ISDN","","",N,N],[17,"PF_KEY","","",N,N],[17,"PF_INET6","","",N,N],[17,"PF_NATM","","",N,N],[17,"PF_SYSTEM","","",N,N],[17,"PF_NETBIOS","","",N,N],[17,"PF_PPP","","",N,N],[17,"NET_RT_DUMP","","",N,N],[17,"NET_RT_FLAGS","","",N,N],[17,"NET_RT_IFLIST","","",N,N],[17,"SOMAXCONN","","",N,N],[17,"SOCK_MAXADDRLEN","","",N,N],[17,"SOCK_STREAM","","",N,N],[17,"SOCK_DGRAM","","",N,N],[17,"SOCK_RAW","","",N,N],[17,"SOCK_RDM","","",N,N],[17,"SOCK_SEQPACKET","","",N,N],[17,"IPPROTO_ICMP","","",N,N],[17,"IPPROTO_ICMPV6","","",N,N],[17,"IPPROTO_TCP","","",N,N],[17,"IPPROTO_IP","","",N,N],[17,"IPPROTO_IPV6","","",N,N],[17,"IP_MULTICAST_TTL","","",N,N],[17,"IP_MULTICAST_LOOP","","",N,N],[17,"IP_TTL","","",N,N],[17,"IP_HDRINCL","","",N,N],[17,"IP_ADD_MEMBERSHIP","","",N,N],[17,"IP_DROP_MEMBERSHIP","","",N,N],[17,"IPV6_JOIN_GROUP","","",N,N],[17,"IPV6_LEAVE_GROUP","","",N,N],[17,"TCP_NODELAY","","",N,N],[17,"TCP_KEEPALIVE","","",N,N],[17,"SOL_SOCKET","","",N,N],[17,"SO_DEBUG","","",N,N],[17,"SO_ACCEPTCONN","","",N,N],[17,"SO_REUSEADDR","","",N,N],[17,"SO_KEEPALIVE","","",N,N],[17,"SO_DONTROUTE","","",N,N],[17,"SO_BROADCAST","","",N,N],[17,"SO_USELOOPBACK","","",N,N],[17,"SO_LINGER","","",N,N],[17,"SO_OOBINLINE","","",N,N],[17,"SO_REUSEPORT","","",N,N],[17,"SO_TIMESTAMP","","",N,N],[17,"SO_DONTTRUNC","","",N,N],[17,"SO_WANTMORE","","",N,N],[17,"SO_WANTOOBFLAG","","",N,N],[17,"SO_SNDBUF","","",N,N],[17,"SO_RCVBUF","","",N,N],[17,"SO_SNDLOWAT","","",N,N],[17,"SO_RCVLOWAT","","",N,N],[17,"SO_SNDTIMEO","","",N,N],[17,"SO_RCVTIMEO","","",N,N],[17,"SO_ERROR","","",N,N],[17,"SO_TYPE","","",N,N],[17,"SO_NREAD","","",N,N],[17,"SO_NKE","","",N,N],[17,"SO_NOSIGPIPE","","",N,N],[17,"SO_NOADDRERR","","",N,N],[17,"SO_NWRITE","","",N,N],[17,"MSG_OOB","","",N,N],[17,"MSG_PEEK","","",N,N],[17,"MSG_DONTROUTE","","",N,N],[17,"MSG_EOR","","",N,N],[17,"MSG_TRUNC","","",N,N],[17,"MSG_CTRUNC","","",N,N],[17,"MSG_WAITALL","","",N,N],[17,"MSG_DONTWAIT","","",N,N],[17,"MSG_EOF","","",N,N],[17,"MSG_FLUSH","","",N,N],[17,"MSG_HOLD","","",N,N],[17,"MSG_SEND","","",N,N],[17,"MSG_HAVEMORE","","",N,N],[17,"MSG_RCVMORE","","",N,N],[17,"SCM_RIGHTS","","",N,N],[17,"SCM_TIMESTAMP","","",N,N],[17,"SCM_CREDS","","",N,N],[17,"IFF_LOOPBACK","","",N,N],[17,"SHUT_RD","","",N,N],[17,"SHUT_WR","","",N,N],[17,"SHUT_RDWR","","",N,N],[17,"LOCK_SH","","",N,N],[17,"LOCK_EX","","",N,N],[17,"LOCK_NB","","",N,N],[17,"LOCK_UN","","",N,N],[17,"MAP_COPY","","",N,N],[17,"MAP_RENAME","","",N,N],[17,"MAP_NORESERVE","","",N,N],[17,"MAP_NOEXTEND","","",N,N],[17,"MAP_HASSEMAPHORE","","",N,N],[17,"MAP_NOCACHE","","",N,N],[17,"MAP_JIT","","",N,N],[17,"IPPROTO_RAW","","",N,N],[17,"_SC_ARG_MAX","","",N,N],[17,"_SC_CHILD_MAX","","",N,N],[17,"_SC_CLK_TCK","","",N,N],[17,"_SC_NGROUPS_MAX","","",N,N],[17,"_SC_OPEN_MAX","","",N,N],[17,"_SC_JOB_CONTROL","","",N,N],[17,"_SC_SAVED_IDS","","",N,N],[17,"_SC_VERSION","","",N,N],[17,"_SC_BC_BASE_MAX","","",N,N],[17,"_SC_BC_DIM_MAX","","",N,N],[17,"_SC_BC_SCALE_MAX","","",N,N],[17,"_SC_BC_STRING_MAX","","",N,N],[17,"_SC_COLL_WEIGHTS_MAX","","",N,N],[17,"_SC_EXPR_NEST_MAX","","",N,N],[17,"_SC_LINE_MAX","","",N,N],[17,"_SC_RE_DUP_MAX","","",N,N],[17,"_SC_2_VERSION","","",N,N],[17,"_SC_2_C_BIND","","",N,N],[17,"_SC_2_C_DEV","","",N,N],[17,"_SC_2_CHAR_TERM","","",N,N],[17,"_SC_2_FORT_DEV","","",N,N],[17,"_SC_2_FORT_RUN","","",N,N],[17,"_SC_2_LOCALEDEF","","",N,N],[17,"_SC_2_SW_DEV","","",N,N],[17,"_SC_2_UPE","","",N,N],[17,"_SC_STREAM_MAX","","",N,N],[17,"_SC_TZNAME_MAX","","",N,N],[17,"_SC_ASYNCHRONOUS_IO","","",N,N],[17,"_SC_PAGESIZE","","",N,N],[17,"_SC_MEMLOCK","","",N,N],[17,"_SC_MEMLOCK_RANGE","","",N,N],[17,"_SC_MEMORY_PROTECTION","","",N,N],[17,"_SC_MESSAGE_PASSING","","",N,N],[17,"_SC_PRIORITIZED_IO","","",N,N],[17,"_SC_PRIORITY_SCHEDULING","","",N,N],[17,"_SC_REALTIME_SIGNALS","","",N,N],[17,"_SC_SEMAPHORES","","",N,N],[17,"_SC_FSYNC","","",N,N],[17,"_SC_SHARED_MEMORY_OBJECTS","","",N,N],[17,"_SC_SYNCHRONIZED_IO","","",N,N],[17,"_SC_TIMERS","","",N,N],[17,"_SC_AIO_LISTIO_MAX","","",N,N],[17,"_SC_AIO_MAX","","",N,N],[17,"_SC_AIO_PRIO_DELTA_MAX","","",N,N],[17,"_SC_DELAYTIMER_MAX","","",N,N],[17,"_SC_MQ_OPEN_MAX","","",N,N],[17,"_SC_MAPPED_FILES","","",N,N],[17,"_SC_RTSIG_MAX","","",N,N],[17,"_SC_SEM_NSEMS_MAX","","",N,N],[17,"_SC_SEM_VALUE_MAX","","",N,N],[17,"_SC_SIGQUEUE_MAX","","",N,N],[17,"_SC_TIMER_MAX","","",N,N],[17,"_SC_NPROCESSORS_CONF","","",N,N],[17,"_SC_NPROCESSORS_ONLN","","",N,N],[17,"_SC_2_PBS","","",N,N],[17,"_SC_2_PBS_ACCOUNTING","","",N,N],[17,"_SC_2_PBS_CHECKPOINT","","",N,N],[17,"_SC_2_PBS_LOCATE","","",N,N],[17,"_SC_2_PBS_MESSAGE","","",N,N],[17,"_SC_2_PBS_TRACK","","",N,N],[17,"_SC_ADVISORY_INFO","","",N,N],[17,"_SC_BARRIERS","","",N,N],[17,"_SC_CLOCK_SELECTION","","",N,N],[17,"_SC_CPUTIME","","",N,N],[17,"_SC_FILE_LOCKING","","",N,N],[17,"_SC_HOST_NAME_MAX","","",N,N],[17,"_SC_MONOTONIC_CLOCK","","",N,N],[17,"_SC_READER_WRITER_LOCKS","","",N,N],[17,"_SC_REGEXP","","",N,N],[17,"_SC_SHELL","","",N,N],[17,"_SC_SPAWN","","",N,N],[17,"_SC_SPIN_LOCKS","","",N,N],[17,"_SC_SPORADIC_SERVER","","",N,N],[17,"_SC_THREAD_CPUTIME","","",N,N],[17,"_SC_THREAD_SPORADIC_SERVER","","",N,N],[17,"_SC_TIMEOUTS","","",N,N],[17,"_SC_TRACE","","",N,N],[17,"_SC_TRACE_EVENT_FILTER","","",N,N],[17,"_SC_TRACE_INHERIT","","",N,N],[17,"_SC_TRACE_LOG","","",N,N],[17,"_SC_TYPED_MEMORY_OBJECTS","","",N,N],[17,"_SC_V6_ILP32_OFF32","","",N,N],[17,"_SC_V6_ILP32_OFFBIG","","",N,N],[17,"_SC_V6_LP64_OFF64","","",N,N],[17,"_SC_V6_LPBIG_OFFBIG","","",N,N],[17,"_SC_IPV6","","",N,N],[17,"_SC_RAW_SOCKETS","","",N,N],[17,"_SC_SYMLOOP_MAX","","",N,N],[17,"_SC_PAGE_SIZE","","",N,N],[17,"_SC_XOPEN_STREAMS","","",N,N],[17,"_SC_XBS5_ILP32_OFF32","","",N,N],[17,"_SC_XBS5_ILP32_OFFBIG","","",N,N],[17,"_SC_XBS5_LP64_OFF64","","",N,N],[17,"_SC_XBS5_LPBIG_OFFBIG","","",N,N],[17,"_SC_SS_REPL_MAX","","",N,N],[17,"_SC_TRACE_EVENT_NAME_MAX","","",N,N],[17,"_SC_TRACE_NAME_MAX","","",N,N],[17,"_SC_TRACE_SYS_MAX","","",N,N],[17,"_SC_TRACE_USER_EVENT_MAX","","",N,N],[17,"_SC_PASS_MAX","","",N,N],[17,"PTHREAD_MUTEX_NORMAL","","",N,N],[17,"PTHREAD_MUTEX_ERRORCHECK","","",N,N],[17,"PTHREAD_MUTEX_RECURSIVE","","",N,N],[17,"PTHREAD_MUTEX_DEFAULT","","",N,N],[17,"_PTHREAD_MUTEX_SIG_init","","",N,N],[17,"_PTHREAD_COND_SIG_init","","",N,N],[17,"_PTHREAD_RWLOCK_SIG_init","","",N,N],[17,"PTHREAD_MUTEX_INITIALIZER","","",N,N],[17,"PTHREAD_COND_INITIALIZER","","",N,N],[17,"PTHREAD_RWLOCK_INITIALIZER","","",N,N],[17,"SIGSTKSZ","","",N,N],[17,"FD_SETSIZE","","",N,N],[17,"ST_NOSUID","","",N,N],[17,"EVFILT_READ","","",N,N],[17,"EVFILT_WRITE","","",N,N],[17,"EVFILT_AIO","","",N,N],[17,"EVFILT_VNODE","","",N,N],[17,"EVFILT_PROC","","",N,N],[17,"EVFILT_SIGNAL","","",N,N],[17,"EVFILT_TIMER","","",N,N],[17,"EVFILT_MACHPORT","","",N,N],[17,"EVFILT_FS","","",N,N],[17,"EVFILT_USER","","",N,N],[17,"EVFILT_VM","","",N,N],[17,"EV_ADD","","",N,N],[17,"EV_DELETE","","",N,N],[17,"EV_ENABLE","","",N,N],[17,"EV_DISABLE","","",N,N],[17,"EV_ONESHOT","","",N,N],[17,"EV_CLEAR","","",N,N],[17,"EV_RECEIPT","","",N,N],[17,"EV_DISPATCH","","",N,N],[17,"EV_FLAG0","","",N,N],[17,"EV_POLL","","",N,N],[17,"EV_FLAG1","","",N,N],[17,"EV_OOBAND","","",N,N],[17,"EV_ERROR","","",N,N],[17,"EV_EOF","","",N,N],[17,"EV_SYSFLAGS","","",N,N],[17,"NOTE_TRIGGER","","",N,N],[17,"NOTE_FFNOP","","",N,N],[17,"NOTE_FFAND","","",N,N],[17,"NOTE_FFOR","","",N,N],[17,"NOTE_FFCOPY","","",N,N],[17,"NOTE_FFCTRLMASK","","",N,N],[17,"NOTE_FFLAGSMASK","","",N,N],[17,"NOTE_LOWAT","","",N,N],[17,"NOTE_DELETE","","",N,N],[17,"NOTE_WRITE","","",N,N],[17,"NOTE_EXTEND","","",N,N],[17,"NOTE_ATTRIB","","",N,N],[17,"NOTE_LINK","","",N,N],[17,"NOTE_RENAME","","",N,N],[17,"NOTE_REVOKE","","",N,N],[17,"NOTE_NONE","","",N,N],[17,"NOTE_EXIT","","",N,N],[17,"NOTE_FORK","","",N,N],[17,"NOTE_EXEC","","",N,N],[17,"NOTE_REAP","","",N,N],[17,"NOTE_SIGNAL","","",N,N],[17,"NOTE_EXITSTATUS","","",N,N],[17,"NOTE_EXIT_DETAIL","","",N,N],[17,"NOTE_PDATAMASK","","",N,N],[17,"NOTE_PCTRLMASK","","",N,N],[17,"NOTE_EXIT_REPARENTED","","",N,N],[17,"NOTE_EXIT_DETAIL_MASK","","",N,N],[17,"NOTE_EXIT_DECRYPTFAIL","","",N,N],[17,"NOTE_EXIT_MEMORY","","",N,N],[17,"NOTE_EXIT_CSERROR","","",N,N],[17,"NOTE_VM_PRESSURE","","",N,N],[17,"NOTE_VM_PRESSURE_TERMINATE","","",N,N],[17,"NOTE_VM_PRESSURE_SUDDEN_TERMINATE","","",N,N],[17,"NOTE_VM_ERROR","","",N,N],[17,"NOTE_SECONDS","","",N,N],[17,"NOTE_USECONDS","","",N,N],[17,"NOTE_NSECONDS","","",N,N],[17,"NOTE_ABSOLUTE","","",N,N],[17,"NOTE_LEEWAY","","",N,N],[17,"NOTE_CRITICAL","","",N,N],[17,"NOTE_BACKGROUND","","",N,N],[17,"NOTE_TRACK","","",N,N],[17,"NOTE_TRACKERR","","",N,N],[17,"NOTE_CHILD","","",N,N],[17,"OCRNL","","",N,N],[17,"ONOCR","","",N,N],[17,"ONLRET","","",N,N],[17,"OFILL","","",N,N],[17,"NLDLY","","",N,N],[17,"TABDLY","","",N,N],[17,"CRDLY","","",N,N],[17,"FFDLY","","",N,N],[17,"BSDLY","","",N,N],[17,"VTDLY","","",N,N],[17,"OFDEL","","",N,N],[17,"NL0","","",N,N],[17,"NL1","","",N,N],[17,"TAB0","","",N,N],[17,"TAB1","","",N,N],[17,"TAB2","","",N,N],[17,"CR0","","",N,N],[17,"CR1","","",N,N],[17,"CR2","","",N,N],[17,"CR3","","",N,N],[17,"FF0","","",N,N],[17,"FF1","","",N,N],[17,"BS0","","",N,N],[17,"BS1","","",N,N],[17,"TAB3","","",N,N],[17,"VT0","","",N,N],[17,"VT1","","",N,N],[17,"IUTF8","","",N,N],[17,"CRTSCTS","","",N,N],[17,"NI_MAXHOST","","",N,N],[17,"Q_GETQUOTA","","",N,N],[17,"Q_SETQUOTA","","",N,N],[17,"RTLD_LOCAL","","",N,N],[17,"RTLD_FIRST","","",N,N],[17,"RTLD_NODELETE","","",N,N],[17,"RTLD_NOLOAD","","",N,N],[17,"RTLD_GLOBAL","","",N,N],[17,"_WSTOPPED","","",N,N],[17,"LOG_NETINFO","","",N,N],[17,"LOG_REMOTEAUTH","","",N,N],[17,"LOG_INSTALL","","",N,N],[17,"LOG_RAS","","",N,N],[17,"LOG_LAUNCHD","","",N,N],[17,"LOG_NFACILITIES","","",N,N],[17,"CTLTYPE","","",N,N],[17,"CTLTYPE_NODE","","",N,N],[17,"CTLTYPE_INT","","",N,N],[17,"CTLTYPE_STRING","","",N,N],[17,"CTLTYPE_QUAD","","",N,N],[17,"CTLTYPE_OPAQUE","","",N,N],[17,"CTLTYPE_STRUCT","","",N,N],[17,"CTLFLAG_RD","","",N,N],[17,"CTLFLAG_WR","","",N,N],[17,"CTLFLAG_RW","","",N,N],[17,"CTLFLAG_NOLOCK","","",N,N],[17,"CTLFLAG_ANYBODY","","",N,N],[17,"CTLFLAG_SECURE","","",N,N],[17,"CTLFLAG_MASKED","","",N,N],[17,"CTLFLAG_NOAUTO","","",N,N],[17,"CTLFLAG_KERN","","",N,N],[17,"CTLFLAG_LOCKED","","",N,N],[17,"CTLFLAG_OID2","","",N,N],[17,"CTL_UNSPEC","","",N,N],[17,"CTL_KERN","","",N,N],[17,"CTL_VM","","",N,N],[17,"CTL_VFS","","",N,N],[17,"CTL_NET","","",N,N],[17,"CTL_DEBUG","","",N,N],[17,"CTL_HW","","",N,N],[17,"CTL_MACHDEP","","",N,N],[17,"CTL_USER","","",N,N],[17,"CTL_MAXID","","",N,N],[17,"KERN_OSTYPE","","",N,N],[17,"KERN_OSRELEASE","","",N,N],[17,"KERN_OSREV","","",N,N],[17,"KERN_VERSION","","",N,N],[17,"KERN_MAXVNODES","","",N,N],[17,"KERN_MAXPROC","","",N,N],[17,"KERN_MAXFILES","","",N,N],[17,"KERN_ARGMAX","","",N,N],[17,"KERN_SECURELVL","","",N,N],[17,"KERN_HOSTNAME","","",N,N],[17,"KERN_HOSTID","","",N,N],[17,"KERN_CLOCKRATE","","",N,N],[17,"KERN_VNODE","","",N,N],[17,"KERN_PROC","","",N,N],[17,"KERN_FILE","","",N,N],[17,"KERN_PROF","","",N,N],[17,"KERN_POSIX1","","",N,N],[17,"KERN_NGROUPS","","",N,N],[17,"KERN_JOB_CONTROL","","",N,N],[17,"KERN_SAVED_IDS","","",N,N],[17,"KERN_BOOTTIME","","",N,N],[17,"KERN_NISDOMAINNAME","","",N,N],[17,"KERN_DOMAINNAME","","",N,N],[17,"KERN_MAXPARTITIONS","","",N,N],[17,"KERN_KDEBUG","","",N,N],[17,"KERN_UPDATEINTERVAL","","",N,N],[17,"KERN_OSRELDATE","","",N,N],[17,"KERN_NTP_PLL","","",N,N],[17,"KERN_BOOTFILE","","",N,N],[17,"KERN_MAXFILESPERPROC","","",N,N],[17,"KERN_MAXPROCPERUID","","",N,N],[17,"KERN_DUMPDEV","","",N,N],[17,"KERN_IPC","","",N,N],[17,"KERN_DUMMY","","",N,N],[17,"KERN_PS_STRINGS","","",N,N],[17,"KERN_USRSTACK32","","",N,N],[17,"KERN_LOGSIGEXIT","","",N,N],[17,"KERN_SYMFILE","","",N,N],[17,"KERN_PROCARGS","","",N,N],[17,"KERN_NETBOOT","","",N,N],[17,"KERN_SYSV","","",N,N],[17,"KERN_AFFINITY","","",N,N],[17,"KERN_TRANSLATE","","",N,N],[17,"KERN_CLASSIC","","",N,N],[17,"KERN_EXEC","","",N,N],[17,"KERN_CLASSICHANDLER","","",N,N],[17,"KERN_AIOMAX","","",N,N],[17,"KERN_AIOPROCMAX","","",N,N],[17,"KERN_AIOTHREADS","","",N,N],[17,"KERN_COREFILE","","",N,N],[17,"KERN_COREDUMP","","",N,N],[17,"KERN_SUGID_COREDUMP","","",N,N],[17,"KERN_PROCDELAYTERM","","",N,N],[17,"KERN_SHREG_PRIVATIZABLE","","",N,N],[17,"KERN_LOW_PRI_WINDOW","","",N,N],[17,"KERN_LOW_PRI_DELAY","","",N,N],[17,"KERN_POSIX","","",N,N],[17,"KERN_USRSTACK64","","",N,N],[17,"KERN_NX_PROTECTION","","",N,N],[17,"KERN_TFP","","",N,N],[17,"KERN_PROCNAME","","",N,N],[17,"KERN_THALTSTACK","","",N,N],[17,"KERN_SPECULATIVE_READS","","",N,N],[17,"KERN_OSVERSION","","",N,N],[17,"KERN_SAFEBOOT","","",N,N],[17,"KERN_RAGEVNODE","","",N,N],[17,"KERN_TTY","","",N,N],[17,"KERN_CHECKOPENEVT","","",N,N],[17,"KERN_THREADNAME","","",N,N],[17,"KERN_MAXID","","",N,N],[17,"KERN_RAGE_PROC","","",N,N],[17,"KERN_RAGE_THREAD","","",N,N],[17,"KERN_UNRAGE_PROC","","",N,N],[17,"KERN_UNRAGE_THREAD","","",N,N],[17,"KERN_OPENEVT_PROC","","",N,N],[17,"KERN_UNOPENEVT_PROC","","",N,N],[17,"KERN_TFP_POLICY","","",N,N],[17,"KERN_TFP_POLICY_DENY","","",N,N],[17,"KERN_TFP_POLICY_DEFAULT","","",N,N],[17,"KERN_KDEFLAGS","","",N,N],[17,"KERN_KDDFLAGS","","",N,N],[17,"KERN_KDENABLE","","",N,N],[17,"KERN_KDSETBUF","","",N,N],[17,"KERN_KDGETBUF","","",N,N],[17,"KERN_KDSETUP","","",N,N],[17,"KERN_KDREMOVE","","",N,N],[17,"KERN_KDSETREG","","",N,N],[17,"KERN_KDGETREG","","",N,N],[17,"KERN_KDREADTR","","",N,N],[17,"KERN_KDPIDTR","","",N,N],[17,"KERN_KDTHRMAP","","",N,N],[17,"KERN_KDPIDEX","","",N,N],[17,"KERN_KDSETRTCDEC","","",N,N],[17,"KERN_KDGETENTROPY","","",N,N],[17,"KERN_KDWRITETR","","",N,N],[17,"KERN_KDWRITEMAP","","",N,N],[17,"KERN_KDENABLE_BG_TRACE","","",N,N],[17,"KERN_KDDISABLE_BG_TRACE","","",N,N],[17,"KERN_KDREADCURTHRMAP","","",N,N],[17,"KERN_KDSET_TYPEFILTER","","",N,N],[17,"KERN_KDBUFWAIT","","",N,N],[17,"KERN_KDCPUMAP","","",N,N],[17,"KERN_PROC_ALL","","",N,N],[17,"KERN_PROC_PID","","",N,N],[17,"KERN_PROC_PGRP","","",N,N],[17,"KERN_PROC_SESSION","","",N,N],[17,"KERN_PROC_TTY","","",N,N],[17,"KERN_PROC_UID","","",N,N],[17,"KERN_PROC_RUID","","",N,N],[17,"KERN_PROC_LCID","","",N,N],[17,"KIPC_MAXSOCKBUF","","",N,N],[17,"KIPC_SOCKBUF_WASTE","","",N,N],[17,"KIPC_SOMAXCONN","","",N,N],[17,"KIPC_MAX_LINKHDR","","",N,N],[17,"KIPC_MAX_PROTOHDR","","",N,N],[17,"KIPC_MAX_HDR","","",N,N],[17,"KIPC_MAX_DATALEN","","",N,N],[17,"KIPC_MBSTAT","","",N,N],[17,"KIPC_NMBCLUSTERS","","",N,N],[17,"KIPC_SOQLIMITCOMPAT","","",N,N],[17,"VM_METER","","",N,N],[17,"VM_LOADAVG","","",N,N],[17,"VM_MACHFACTOR","","",N,N],[17,"VM_SWAPUSAGE","","",N,N],[17,"VM_MAXID","","",N,N],[17,"HW_MACHINE","","",N,N],[17,"HW_MODEL","","",N,N],[17,"HW_NCPU","","",N,N],[17,"HW_BYTEORDER","","",N,N],[17,"HW_PHYSMEM","","",N,N],[17,"HW_USERMEM","","",N,N],[17,"HW_PAGESIZE","","",N,N],[17,"HW_DISKNAMES","","",N,N],[17,"HW_DISKSTATS","","",N,N],[17,"HW_EPOCH","","",N,N],[17,"HW_FLOATINGPT","","",N,N],[17,"HW_MACHINE_ARCH","","",N,N],[17,"HW_VECTORUNIT","","",N,N],[17,"HW_BUS_FREQ","","",N,N],[17,"HW_CPU_FREQ","","",N,N],[17,"HW_CACHELINE","","",N,N],[17,"HW_L1ICACHESIZE","","",N,N],[17,"HW_L1DCACHESIZE","","",N,N],[17,"HW_L2SETTINGS","","",N,N],[17,"HW_L2CACHESIZE","","",N,N],[17,"HW_L3SETTINGS","","",N,N],[17,"HW_L3CACHESIZE","","",N,N],[17,"HW_TB_FREQ","","",N,N],[17,"HW_MEMSIZE","","",N,N],[17,"HW_AVAILCPU","","",N,N],[17,"HW_MAXID","","",N,N],[17,"USER_CS_PATH","","",N,N],[17,"USER_BC_BASE_MAX","","",N,N],[17,"USER_BC_DIM_MAX","","",N,N],[17,"USER_BC_SCALE_MAX","","",N,N],[17,"USER_BC_STRING_MAX","","",N,N],[17,"USER_COLL_WEIGHTS_MAX","","",N,N],[17,"USER_EXPR_NEST_MAX","","",N,N],[17,"USER_LINE_MAX","","",N,N],[17,"USER_RE_DUP_MAX","","",N,N],[17,"USER_POSIX2_VERSION","","",N,N],[17,"USER_POSIX2_C_BIND","","",N,N],[17,"USER_POSIX2_C_DEV","","",N,N],[17,"USER_POSIX2_CHAR_TERM","","",N,N],[17,"USER_POSIX2_FORT_DEV","","",N,N],[17,"USER_POSIX2_FORT_RUN","","",N,N],[17,"USER_POSIX2_LOCALEDEF","","",N,N],[17,"USER_POSIX2_SW_DEV","","",N,N],[17,"USER_POSIX2_UPE","","",N,N],[17,"USER_STREAM_MAX","","",N,N],[17,"USER_TZNAME_MAX","","",N,N],[17,"USER_MAXID","","",N,N],[17,"CTL_DEBUG_NAME","","",N,N],[17,"CTL_DEBUG_VALUE","","",N,N],[17,"CTL_DEBUG_MAXID","","",N,N],[17,"POLLRDNORM","","",N,N],[17,"POLLWRNORM","","",N,N],[17,"POLLRDBAND","","",N,N],[17,"POLLWRBAND","","",N,N],[17,"PRIO_DARWIN_THREAD","","",N,N],[17,"PRIO_DARWIN_PROCESS","","",N,N],[17,"PRIO_DARWIN_BG","","",N,N],[17,"PRIO_DARWIN_NONUI","","",N,N],[17,"SEM_FAILED","","",N,N],[17,"SIGEV_NONE","","",N,N],[17,"SIGEV_SIGNAL","","",N,N],[17,"SIGEV_THREAD","","",N,N],[17,"AIO_CANCELED","","",N,N],[17,"AIO_NOTCANCELED","","",N,N],[17,"AIO_ALLDONE","","",N,N],[17,"AIO_LISTIO_MAX","","",N,N],[17,"LIO_NOP","","",N,N],[17,"LIO_WRITE","","",N,N],[17,"LIO_READ","","",N,N],[17,"LIO_WAIT","","",N,N],[17,"LIO_NOWAIT","","",N,N],[17,"WEXITED","","",N,N],[17,"WSTOPPED","","",N,N],[17,"WCONTINUED","","",N,N],[17,"WNOWAIT","","",N,N],[17,"P_ALL","","",N,N],[17,"P_PID","","",N,N],[17,"P_PGID","","",N,N],[17,"XATTR_NOFOLLOW","","",N,N],[17,"XATTR_CREATE","","",N,N],[17,"XATTR_REPLACE","","",N,N],[17,"XATTR_NOSECURITY","","",N,N],[17,"XATTR_NODEFAULT","","",N,N],[17,"XATTR_SHOWCOMPRESSION","","",N,N],[17,"__PTHREAD_MUTEX_SIZE__","","",N,N],[17,"__PTHREAD_COND_SIZE__","","",N,N],[17,"__PTHREAD_CONDATTR_SIZE__","","",N,N],[17,"__PTHREAD_RWLOCK_SIZE__","","",N,N],[17,"__PTHREAD_RWLOCKATTR_SIZE__","","",N,N],[17,"TIOCTIMESTAMP","","",N,N],[17,"TIOCDCDTIMESTAMP","","",N,N],[17,"FIONREAD","","",N,N],[11,"into","","",62,[[["self"]],["u"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"sockaddr"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"passwd"],[3,"ifaddrs"],[3,"tm"],[3,"utsname"],[3,"msghdr"],[3,"cmsghdr"],[3,"if_nameindex"],[3,"aiocb"],[3,"utmpx"],[3,"glob_t"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"mach_timebase_info"],[3,"stat"],[3,"dirent"],[3,"siginfo_t"],[3,"sigaction"],[3,"stack_t"],[3,"fstore_t"],[3,"radvisory"],[3,"statvfs"],[3,"Dl_info"],[3,"sockaddr_in"],[3,"statfs"],[3,"kevent"],[3,"kevent64_s"],[3,"dqblk"],[3,"termios"],[3,"flock"],[3,"sf_hdtr"],[3,"lconv"],[3,"sigevent"],[3,"pthread_attr_t"],[3,"pthread_mutex_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"pthread_rwlock_t"],[3,"pthread_rwlockattr_t"],[3,"fd_set"],[3,"fsid_t"],[4,"c_void"],[4,"FILE"],[4,"fpos_t"]]};
searchIndex["num_cpus"]={"doc":"A crate with utilities to determine the number of CPUs available on the current system.","items":[[5,"get","num_cpus","Returns the number of available CPUs of the current system.",N,[[],["usize"]]],[5,"get_physical","","Returns the number of physical cores of the current system.",N,[[],["usize"]]]],"paths":[]};
searchIndex["pin_utils"]={"doc":"Utilities for pinning","items":[[14,"pin_mut","pin_utils","Pins a value on the stack.",N,N],[14,"unsafe_pinned","","A pinned projection of a struct field.",N,N],[14,"unsafe_unpinned","","An unpinned projection of a struct field.",N,N]],"paths":[]};
searchIndex["slab"]={"doc":"Pre-allocated storage for a uniform data type.","items":[[3,"Slab","slab","Pre-allocated storage for a uniform data type",N,N],[3,"VacantEntry","","A handle to an vacant entry in a `Slab`.",N,N],[3,"Iter","","An iterator over the values stored in the `Slab`",N,N],[3,"IterMut","","A mutable iterator over the values stored in the `Slab`",N,N],[11,"clone","","",0,[[["self"]],["slab"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new, empty `Slab`.",0,[[],["slab"]]],[11,"with_capacity","","Construct a new, empty `Slab` with the specified capacity.",0,[[["usize"]],["slab"]]],[11,"capacity","","Returns the number of values the slab can store without reallocating.",0,[[["self"]],["usize"]]],[11,"reserve","","Reserves capacity for at least `additional` more values to be stored without allocating.",0,[[["self"],["usize"]]]],[11,"reserve_exact","","Reserves the minimum capacity required to store exactly `additional` more values.",0,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Shrinks the capacity of the slab as much as possible.",0,[[["self"]]]],[11,"clear","","Clear the slab of all values",0,[[["self"]]]],[11,"len","","Returns the number of stored values",0,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if no values are stored in the slab",0,[[["self"]],["bool"]]],[11,"iter","","Returns an iterator over the slab",0,[[["self"]],["iter"]]],[11,"iter_mut","","Returns an iterator that allows modifying each value.",0,[[["self"]],["itermut"]]],[11,"get","","Returns a reference to the value associated with the given key",0,[[["self"],["usize"]],["option"]]],[11,"get_mut","","Returns a mutable reference to the value associated with the given key",0,[[["self"],["usize"]],["option"]]],[11,"get_unchecked","","Returns a reference to the value associated with the given key without performing bounds checking.",0,[[["self"],["usize"]],["t"]]],[11,"get_unchecked_mut","","Returns a mutable reference to the value associated with the given key without performing bounds checking.",0,[[["self"],["usize"]],["t"]]],[11,"insert","","Insert a value in the slab, returning key assigned to the value",0,[[["self"],["t"]],["usize"]]],[11,"vacant_entry","","Returns a handle to a vacant entry allowing for further manipulation.",0,[[["self"]],["vacantentry"]]],[11,"remove","","Removes and returns the value associated with the given key.",0,[[["self"],["usize"]],["t"]]],[11,"contains","","Returns `true` if a value is associated with the given key.",0,[[["self"],["usize"]],["bool"]]],[11,"retain","","Retain only the elements specified by the predicate.",0,[[["self"],["f"]]]],[11,"index","","",0,[[["self"],["usize"]],["t"]]],[11,"index_mut","","",0,[[["self"],["usize"]],["t"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"insert","","Insert a value in the entry, returning a mutable reference to the value.",1,[[["self"],["t"]],["t"]]],[11,"key","","Return the key associated with this entry.",1,[[["self"]],["usize"]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"next","","",3,[[["self"]],["option"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]]],"paths":[[3,"Slab"],[3,"VacantEntry"],[3,"Iter"],[3,"IterMut"]]};
initSearch(searchIndex);
