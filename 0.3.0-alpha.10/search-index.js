var N = null;var searchIndex = {};
searchIndex["futures"]={"doc":"Abstractions for asynchronous programming.","items":[[14,"try_ready","futures","Extracts the successful type of a `Poll<Result<T, E>>`.",N,N],[14,"try_poll","","Extracts `Poll<T>` from `Poll<Result<T, E>>`.",N,N],[14,"ready","","Extracts the successful type of a `Poll<T>`.",N,N],[14,"join","","Polls multiple futures simultaneously, returning a tuple of all results once complete.",N,N],[14,"try_join","","Polls multiple futures simultaneously, resolving to a [`Result`] containing either a tuple of the successful outputs or an error.",N,N],[14,"select","","Polls multiple futures and streams simultaneously, executing the branch for the future that finishes first. Futures passed to `select!` must be `Unpin` and implement `FusedFuture`. Futures and streams which are not already fused can be fused using the `.fuse()` method. Note, though, that fusing a future or stream directly in the call to `select!` will not be enough to prevent it from being polled after completion if the `select!` call is in a loop, so when `select!`ing in a loop, users should take care to `fuse()` outside of the loop.",N,N],[14,"pending","","A macro which yields to the event loop once.",N,N],[14,"poll","","A macro which returns the result of polling a future once within the current `async` context.",N,N],[0,"channel","","Cross-task communication.",N,N],[0,"oneshot","futures::channel","A channel for sending a single message between asynchronous tasks.",N,N],[3,"Receiver","futures::channel::oneshot","A future for a value that will be provided by another asynchronous task.",N,N],[3,"Sender","","A means of transmitting a single value to another task.",N,N],[5,"channel","","Creates a new one-shot channel for sending values across asynchronous tasks.",N,N],[3,"Canceled","","Error returned from a `Receiver` when the corresponding `Sender` is dropped.",N,N],[0,"mpsc","futures::channel","A multi-producer, single-consumer queue for sending values across asynchronous tasks.",N,N],[3,"Sender","futures::channel::mpsc","The transmission end of a bounded mpsc channel.",N,N],[3,"UnboundedSender","","The transmission end of an unbounded mpsc channel.",N,N],[3,"Receiver","","The receiving end of a bounded mpsc channel.",N,N],[3,"UnboundedReceiver","","The receiving end of an unbounded mpsc channel.",N,N],[3,"SendError","","The error type for `Sender`s used as `Sink`s.",N,N],[3,"TrySendError","","The error type returned from `try_send`.",N,N],[3,"TryRecvError","","The error type returned from `try_next`.",N,N],[5,"channel","","Creates a bounded mpsc channel for communicating between asynchronous tasks.",N,N],[5,"unbounded","","Creates an unbounded mpsc channel for communicating between asynchronous tasks.",N,N],[0,"compat","futures","Interop between `futures` 0.1 and 0.3.",N,N],[3,"Compat","futures::compat","Converts a futures 0.3 `TryFuture`, `TryStream` or `Sink` into a futures 0.1 `Future`, `Stream` or `Sink`.",N,N],[3,"Compat01As03","","Converts a futures 0.1 Future, Stream, AsyncRead, or AsyncWrite object to a futures 0.3-compatible version,",N,N],[6,"Executor01Future","","A future that can run on a futures 0.1 `Executor`.",N,N],[3,"Executor01As03","","Converts a futures 0.1 `Executor` into a futures 0.3 `Spawn`.",N,N],[8,"Executor01CompatExt","","Extension trait for futures 0.1 `Executor`.",N,N],[10,"compat","","Converts a futures 0.1 `Executor` into a futures 0.3 `Spawn`.",0,[[["self"]],["executor01as03"]]],[8,"Future01CompatExt","","Extension trait for futures 0.1 `Future`",N,N],[11,"compat","","Converts a futures 0.1 `Future<Item = T, Error = E>` into a futures 0.3 `Future<Output = Result<T, E>>`.",1,[[["self"]],["compat01as03"]]],[8,"Stream01CompatExt","","Extension trait for futures 0.1 `Stream`",N,N],[11,"compat","","Converts a futures 0.1 `Stream<Item = T, Error = E>` into a futures 0.3 `Stream<Item = Result<T, E>>`.",2,[[["self"]],["compat01as03"]]],[3,"TokioDefaultSpawner","","A spawner that delegates to `tokio`'s `DefaultExecutor`, will panic if used in the context of a task that is not running on `tokio`'s executor.",N,N],[0,"executor","futures","Task execution.",N,N],[3,"BlockingStream","futures::executor","An iterator which blocks on values from a stream until they become available.",N,N],[3,"Enter","","Represents an executor context.",N,N],[3,"EnterError","","An error returned by `enter` if an execution scope has already been entered.",N,N],[3,"LocalSpawner","","A handle to a `LocalPool` that implements `Spawn`.",N,N],[3,"LocalPool","","A single-threaded task pool for polling futures to completion.",N,N],[3,"ThreadPool","","A general-purpose thread pool for scheduling tasks that poll futures to completion.",N,N],[3,"ThreadPoolBuilder","","Thread pool configuration object.",N,N],[5,"block_on","","Run a future to completion on the current thread.",N,N],[5,"block_on_stream","","Turn a stream into a blocking iterator.",N,[[["s"]],["blockingstream"]]],[5,"enter","","Marks the current thread as being within the dynamic extent of an executor.",N,[[],["result",["enter","entererror"]]]],[0,"future","futures","Asynchronous values.",N,N],[8,"Future","futures::future","A future represents an asynchronous computation.",N,N],[16,"Output","","The result of the `Future`.",3,N],[10,"poll","","Attempt to resolve the future to a final value, registering the current task for wakeup if the value is not yet available.",3,[[["pin"],["localwaker"]],["poll"]]],[8,"TryFuture","","A convenience for futures that return `Result` values that includes a variety of adapters tailored to such futures.",N,N],[16,"Ok","","The type of successful values yielded by this future",4,N],[16,"Error","","The type of failures yielded by this future",4,N],[10,"try_poll","","Poll this `TryFuture` as if it were a `Future`.",4,[[["pin"],["localwaker"]],["poll",["result"]]]],[8,"FusedFuture","","A `Future` or `TryFuture` which tracks whether or not the underlying future should no longer be polled.",N,N],[10,"is_terminated","","Returns `true` if the underlying future should no longer be polled.",5,[[["self"]],["bool"]]],[3,"FutureObj","","A custom trait object for polling futures, roughly akin to `Box<dyn Future<Output = T> + Send + 'a>`.",N,N],[3,"LocalFutureObj","","A custom trait object for polling futures, roughly akin to `Box<dyn Future<Output = T> + 'a>`.",N,N],[8,"UnsafeFutureObj","","A custom implementation of a future trait object for `FutureObj`, providing a hand-rolled vtable.",N,N],[10,"into_raw","","Convert an owned instance into a (conceptually owned) void pointer.",6,N],[10,"poll","","Poll the future represented by the given void pointer.",6,N],[10,"drop","","Drops the future represented by the given void pointer.",6,N],[5,"empty","","Creates a future which never resolves, representing a computation that never finishes.",N,[[],["empty"]]],[3,"Empty","","A future which is never resolved.",N,N],[5,"lazy","","Creates a new future that allows delayed execution of a closure.",N,[[["f"]],["lazy"]]],[3,"Lazy","","A future which, when polled, invokes a closure and yields its result.",N,N],[5,"maybe_done","","Wraps a future into a `MaybeDone`",N,[[["fut"]],["maybedone"]]],[4,"MaybeDone","","A future that may have completed.",N,N],[13,"Future","","A not-yet-completed future",7,N],[13,"Done","","The output of the completed future",7,N],[13,"Gone","","The empty variant after the result of a [`MaybeDone`] has been taken using the `take_output` method.",7,N],[5,"poll_fn","","Creates a new future wrapping around a function returning [`Poll`].",N,[[["f"]],["pollfn"]]],[3,"PollFn","","A future which wraps a function returning [`Poll`].",N,N],[5,"ready","","Create a future that is immediately ready with a value.",N,[[["t"]],["ready"]]],[5,"ok","","Create a future that is immediately ready with a success value.",N,[[["t"]],["ready",["result"]]]],[5,"err","","Create a future that is immediately ready with an error value.",N,[[["e"]],["ready",["result"]]]],[3,"Ready","","A future that is immediately ready with a value",N,N],[3,"OptionFuture","","A future representing a value which may or may not be present.",N,N],[8,"FutureExt","","An extension trait for `Future`s that provides a variety of convenient adapters.",N,N],[11,"map","","Map this future's output to a different type, returning a new future of the resulting type.",8,[[["self"],["f"]],["map"]]],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",8,[[["self"],["f"]],["then"]]],[11,"join","","Joins the result of two futures, waiting for them both to complete.",8,[[["self"],["fut2"]],["join"]]],[11,"join3","","Same as `join`, but with more futures.",8,[[["self"],["fut2"],["fut3"]],["join3"]]],[11,"join4","","Same as `join`, but with more futures.",8,[[["self"],["fut2"],["fut3"],["fut4"]],["join4"]]],[11,"join5","","Same as `join`, but with more futures.",8,[[["self"],["fut2"],["fut3"],["fut4"],["fut5"]],["join5"]]],[11,"into_stream","","Convert this future into a single element stream.",8,[[["self"]],["intostream"]]],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",8,[[["self"]],["flatten"]]],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",8,[[["self"]],["flattenstream"]]],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed. This method can be used to turn any `Future` into a `FusedFuture`.",8,[[["self"]],["fuse"]]],[11,"inspect","","Do something with the output of a future before passing it on.",8,[[["self"],["f"]],["inspect"]]],[11,"catch_unwind","","Catches unwinding panics while polling the future.",8,[[["self"]],["catchunwind"]]],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",8,[[["self"]],["shared"]]],[11,"remote_handle","","Turn this future into a future that yields `()` on completion and sends its output to another future on a separate task.",8,N],[11,"boxed","","Wrap the future in a Box, pinning it.",8,[[["self"]],["pin",["box"]]]],[11,"unit_error","","Turns a `Future` into a `TryFuture` with `Error = ()`.",8,[[["self"]],["uniterror"]]],[11,"poll_unpin","","A convenience for calling `Future::poll` on `Unpin` future types.",8,[[["self"],["localwaker"]],["poll"]]],[3,"FlattenStream","","Future for the `flatten_stream` combinator, flattening a future-of-a-stream to get just the result of the final stream as a stream.",N,N],[3,"Flatten","","Future for the `flatten` combinator.",N,N],[3,"Fuse","","A future which \"fuses\" a future once it has been resolved. This wrapper can be used to turn any `Future` into a `FusedFuture`.",N,N],[3,"Inspect","","Do something with the item of a future, passing it on.",N,N],[3,"IntoStream","","A type which converts a `Future` into a `Stream` containing a single element.",N,N],[3,"Join","","Future for the `join` combinator, waiting for two futures to complete.",N,N],[3,"Join3","","Future for the `join3` combinator, waiting for three futures to complete.",N,N],[3,"Join4","","Future for the `join4` combinator, waiting for four futures to complete.",N,N],[3,"Join5","","Future for the `join5` combinator, waiting for five futures to complete.",N,N],[3,"Map","","Future for the `map` combinator, changing the type of a future.",N,N],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",N,N],[5,"abortable","","Creates a new `Abortable` future and a `AbortHandle` which can be used to stop it.",N,N],[3,"Abortable","","A future which can be remotely short-circuited using an `AbortHandle`.",N,N],[3,"AbortHandle","","A handle to a `Abortable` future.",N,N],[3,"AbortRegistration","","A registration handle for a `Abortable` future. Values of this type can be acquired from `AbortHandle::new` and are used in calls to `Abortable::new`.",N,N],[3,"Aborted","","Indicator that the `Abortable` future was aborted.",N,N],[3,"Remote","","A future which sends its output to the corresponding `RemoteHandle`. Created by `remote_handle`.",N,N],[3,"RemoteHandle","","The handle to a remote future returned by `remote_handle`.",N,N],[3,"CatchUnwind","","Future for the `catch_unwind` combinator.",N,N],[3,"Shared","","A future that is cloneable and can be polled in multiple threads. Use the `shared` combinator method to convert any future into a `Shared` future.",N,N],[8,"TryFutureExt","","Adapters specific to [`Result`]-returning futures",N,N],[11,"flatten_sink","","Flattens the execution of this future when the successful result of this future is a [`Sink`].",9,[[["self"]],["flattensink"]]],[11,"map_ok","","Maps this future's success value to a different value.",9,[[["self"],["f"]],["mapok"]]],[11,"map_err","","Maps this future's error value to a different value.",9,[[["self"],["f"]],["maperr"]]],[11,"err_into","","Maps this future's `Error` to a new error type using the `Into` trait.",9,[[["self"]],["errinto"]]],[11,"and_then","","Executes another future after this one resolves successfully. The success value is passed to a closure to create this subsequent future.",9,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Executes another future if this one resolves to an error. The error value is passed to a closure to create this subsequent future.",9,[[["self"],["f"]],["orelse"]]],[11,"unwrap_or_else","","Unwraps this future's ouput, producing a future with this future's `Ok` type as its `Output` type.",9,[[["self"],["f"]],["unwraporelse"]]],[11,"compat","","Wraps a [`TryFuture`] into a future compatable with libraries using futures 0.1 future definitons. Requires the `compat` feature to enable.",9,[[["self"]],["compat"]]],[11,"into_future","","Wraps a [`TryFuture`] into a type that implements `Future`.",9,[[["self"]],["intofuture"]]],[11,"try_join","","Joins the result of two futures, waiting for them both to complete or for one to produce an error.",9,[[["self"],["fut2"]],["tryjoin"]]],[11,"try_join3","","Same as `try_join`, but with more futures.",9,[[["self"],["fut2"],["fut3"]],["tryjoin3"]]],[11,"try_join4","","Same as `try_join`, but with more futures.",9,[[["self"],["fut2"],["fut3"],["fut4"]],["tryjoin4"]]],[11,"try_join5","","Same as `try_join`, but with more futures.",9,[[["self"],["fut2"],["fut3"],["fut4"],["fut5"]],["tryjoin5"]]],[3,"AndThen","","Future for the `and_then` combinator.",N,N],[3,"ErrInto","","Future for the `err_into` combinator.",N,N],[3,"FlattenSink","","Future for the `flatten_sink` combinator.",N,N],[3,"IntoFuture","","Future for the `into_future` combinator.",N,N],[3,"MapErr","","Future for the `map_err` combinator.",N,N],[3,"MapOk","","Future for the `map_ok` combinator.",N,N],[3,"OrElse","","Future for the `or_else` combinator.",N,N],[3,"UnwrapOrElse","","Future for the `unwrap_or_else` combinator.",N,N],[3,"TryJoin","","Future for the `try_join` combinator, waiting for two futures to complete or for one to error.",N,N],[3,"TryJoin3","","Future for the `try_join3` combinator, waiting for three futures to complete or for one to error.",N,N],[3,"TryJoin4","","Future for the `try_join4` combinator, waiting for four futures to complete or for one to error.",N,N],[3,"TryJoin5","","Future for the `try_join5` combinator, waiting for five futures to complete or for one to error.",N,N],[0,"io","futures","Asynchronous I/O.",N,N],[3,"Error","futures::io","The error type for I/O operations of the [`Read`], [`Write`], [`Seek`], and associated traits.",N,N],[3,"Initializer","","A type used to conditionally initialize buffers passed to `AsyncRead` methods, modeled after `std`.",N,N],[3,"IoVec","","A specialized byte slice type for performing vectored I/O operations.",N,N],[4,"ErrorKind","","A list specifying general categories of I/O error.",N,N],[13,"NotFound","","An entity was not found, often a file.",10,N],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",10,N],[13,"ConnectionRefused","","The connection was refused by the remote server.",10,N],[13,"ConnectionReset","","The connection was reset by the remote server.",10,N],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",10,N],[13,"NotConnected","","The network operation failed because it was not connected yet.",10,N],[13,"AddrInUse","","A socket address could not be bound because the address is already in use elsewhere.",10,N],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not local.",10,N],[13,"BrokenPipe","","The operation failed because a pipe was closed.",10,N],[13,"AlreadyExists","","An entity already exists, often a file.",10,N],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was requested to not occur.",10,N],[13,"InvalidInput","","A parameter was incorrect.",10,N],[13,"InvalidData","","Data not valid for the operation were encountered.",10,N],[13,"TimedOut","","The I/O operation's timeout expired, causing it to be canceled.",10,N],[13,"WriteZero","","An error returned when an operation could not be completed because a call to [`write`] returned [`Ok(0)`].",10,N],[13,"Interrupted","","This operation was interrupted.",10,N],[13,"Other","","Any I/O error not part of this list.",10,N],[13,"UnexpectedEof","","An error returned when an operation could not be completed because an \"end of file\" was reached prematurely.",10,N],[8,"AsyncRead","","Read bytes asynchronously.",N,N],[11,"initializer","","Determines if this `AsyncRead`er can work with buffers of uninitialized memory.",11,[[["self"]],["initializer"]]],[10,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",11,N],[11,"poll_vectored_read","","Attempt to read from the `AsyncRead` into `vec` using vectored IO operations.",11,N],[8,"AsyncWrite","","Write bytes asynchronously.",N,N],[10,"poll_write","","Attempt to write bytes from `buf` into the object.",12,N],[11,"poll_vectored_write","","Attempt to write bytes from `vec` into the object using vectored IO operations.",12,N],[10,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",12,[[["self"],["localwaker"]],["poll",["result"]]]],[10,"poll_close","","Attempt to close the object.",12,[[["self"],["localwaker"]],["poll",["result"]]]],[6,"Result","","A specialized `Result` type for I/O operations.",N,N],[8,"AsyncReadExt","","An extension trait which adds utility methods to `AsyncRead` types.",N,N],[11,"copy_into","","Creates a future which copies all the bytes from one object to another.",13,[[["self"],["w"]],["copyinto"]]],[11,"read","","Tries to read some bytes directly into the given `buf` in asynchronous manner, returning a future type.",13,N],[11,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if end of file (EOF) is hit sooner.",13,N],[11,"read_to_end","","Creates a future which will read all the bytes from this `AsyncRead`.",13,[[["self"],["vec"]],["readtoend"]]],[11,"split","","Helper method for splitting this read/write object into two halves.",13,N],[11,"compat","","Wraps an [`AsyncRead`] in a compatibility wrapper that allows it to be used as a futures 0.1 / tokio-io 0.1 `AsyncRead`. If the wrapped type implements [`AsyncWrite`] as well, the result will also implement the futures 0.1 / tokio 0.1 `AsyncWrite` trait.",13,[[["self"]],["compat"]]],[8,"AsyncWriteExt","","An extension trait which adds utility methods to `AsyncWrite` types.",N,N],[11,"flush","","Creates a future which will entirely flush this `AsyncWrite`.",14,[[["self"]],["flush"]]],[11,"close","","Creates a future which will entirely close this `AsyncWrite`.",14,[[["self"]],["close"]]],[11,"write_all","","Write data into this object.",14,N],[11,"compat_write","","Wraps an [`AsyncWrite`] in a compatibility wrapper that allows it to be used as a futures 0.1 / tokio-io 0.1 `AsyncWrite`. Requires the `io-compat` feature to enable.",14,[[["self"]],["compat"]]],[3,"AllowStdIo","","A simple wrapper type which allows types which implement only implement `std::io::Read` or `std::io::Write` to be used in contexts which expect an `AsyncRead` or `AsyncWrite`.",N,N],[3,"Close","","A future used to fully close an I/O object.",N,N],[3,"CopyInto","","A future which will copy all data from a reader into a writer.",N,N],[3,"Flush","","A future used to fully flush an I/O object.",N,N],[3,"Read","","A future which can be used to easily read available number of bytes to fill a buffer.",N,N],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",N,N],[3,"ReadHalf","","The readable half of an object returned from `AsyncRead::split`.",N,N],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",N,N],[3,"Window","","A owned window around an underlying buffer.",N,N],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",N,N],[3,"WriteHalf","","The writable half of an object returned from `AsyncRead::split`.",N,N],[0,"lock","futures","Futures-powered synchronization primitives.",N,N],[3,"Mutex","futures::lock","A futures-aware mutex.",N,N],[3,"MutexLockFuture","","A future which resolves when the target mutex has been successfully acquired.",N,N],[3,"MutexGuard","","An RAII guard returned by the `lock` and `try_lock` methods. When this structure is dropped (falls out of scope), the lock will be unlocked.",N,N],[0,"prelude","futures","A \"prelude\" for crates using the `futures` crate.",N,N],[8,"Future","futures::prelude","A future represents an asynchronous computation.",N,N],[16,"Output","","The result of the `Future`.",3,N],[10,"poll","","Attempt to resolve the future to a final value, registering the current task for wakeup if the value is not yet available.",3,[[["pin"],["localwaker"]],["poll"]]],[8,"TryFuture","","A convenience for futures that return `Result` values that includes a variety of adapters tailored to such futures.",N,N],[16,"Ok","","The type of successful values yielded by this future",4,N],[16,"Error","","The type of failures yielded by this future",4,N],[10,"try_poll","","Poll this `TryFuture` as if it were a `Future`.",4,[[["pin"],["localwaker"]],["poll",["result"]]]],[8,"FutureExt","","An extension trait for `Future`s that provides a variety of convenient adapters.",N,N],[11,"map","","Map this future's output to a different type, returning a new future of the resulting type.",8,[[["self"],["f"]],["map"]]],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",8,[[["self"],["f"]],["then"]]],[11,"join","","Joins the result of two futures, waiting for them both to complete.",8,[[["self"],["fut2"]],["join"]]],[11,"join3","","Same as `join`, but with more futures.",8,[[["self"],["fut2"],["fut3"]],["join3"]]],[11,"join4","","Same as `join`, but with more futures.",8,[[["self"],["fut2"],["fut3"],["fut4"]],["join4"]]],[11,"join5","","Same as `join`, but with more futures.",8,[[["self"],["fut2"],["fut3"],["fut4"],["fut5"]],["join5"]]],[11,"into_stream","","Convert this future into a single element stream.",8,[[["self"]],["intostream"]]],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",8,[[["self"]],["flatten"]]],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",8,[[["self"]],["flattenstream"]]],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed. This method can be used to turn any `Future` into a `FusedFuture`.",8,[[["self"]],["fuse"]]],[11,"inspect","","Do something with the output of a future before passing it on.",8,[[["self"],["f"]],["inspect"]]],[11,"catch_unwind","","Catches unwinding panics while polling the future.",8,[[["self"]],["catchunwind"]]],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",8,[[["self"]],["shared"]]],[11,"remote_handle","","Turn this future into a future that yields `()` on completion and sends its output to another future on a separate task.",8,N],[11,"boxed","","Wrap the future in a Box, pinning it.",8,[[["self"]],["pin",["box"]]]],[11,"unit_error","","Turns a `Future` into a `TryFuture` with `Error = ()`.",8,[[["self"]],["uniterror"]]],[11,"poll_unpin","","A convenience for calling `Future::poll` on `Unpin` future types.",8,[[["self"],["localwaker"]],["poll"]]],[8,"TryFutureExt","","Adapters specific to [`Result`]-returning futures",N,N],[11,"flatten_sink","","Flattens the execution of this future when the successful result of this future is a [`Sink`].",9,[[["self"]],["flattensink"]]],[11,"map_ok","","Maps this future's success value to a different value.",9,[[["self"],["f"]],["mapok"]]],[11,"map_err","","Maps this future's error value to a different value.",9,[[["self"],["f"]],["maperr"]]],[11,"err_into","","Maps this future's `Error` to a new error type using the `Into` trait.",9,[[["self"]],["errinto"]]],[11,"and_then","","Executes another future after this one resolves successfully. The success value is passed to a closure to create this subsequent future.",9,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Executes another future if this one resolves to an error. The error value is passed to a closure to create this subsequent future.",9,[[["self"],["f"]],["orelse"]]],[11,"unwrap_or_else","","Unwraps this future's ouput, producing a future with this future's `Ok` type as its `Output` type.",9,[[["self"],["f"]],["unwraporelse"]]],[11,"compat","","Wraps a [`TryFuture`] into a future compatable with libraries using futures 0.1 future definitons. Requires the `compat` feature to enable.",9,[[["self"]],["compat"]]],[11,"into_future","","Wraps a [`TryFuture`] into a type that implements `Future`.",9,[[["self"]],["intofuture"]]],[11,"try_join","","Joins the result of two futures, waiting for them both to complete or for one to produce an error.",9,[[["self"],["fut2"]],["tryjoin"]]],[11,"try_join3","","Same as `try_join`, but with more futures.",9,[[["self"],["fut2"],["fut3"]],["tryjoin3"]]],[11,"try_join4","","Same as `try_join`, but with more futures.",9,[[["self"],["fut2"],["fut3"],["fut4"]],["tryjoin4"]]],[11,"try_join5","","Same as `try_join`, but with more futures.",9,[[["self"],["fut2"],["fut3"],["fut4"],["fut5"]],["tryjoin5"]]],[8,"Stream","","A stream of values produced asynchronously.",N,N],[16,"Item","","Values yielded by the stream.",15,N],[10,"poll_next","","Attempt to pull out the next value of this stream, registering the current task for wakeup if the value is not yet available, and returning `None` if the stream is exhausted.",15,[[["pin"],["localwaker"]],["poll",["option"]]]],[8,"TryStream","","A convenience for streams that return `Result` values that includes a variety of adapters tailored to such futures.",N,N],[16,"Ok","","The type of successful values yielded by this future",16,N],[16,"Error","","The type of failures yielded by this future",16,N],[10,"try_poll_next","","Poll this `TryStream` as if it were a `Stream`.",16,[[["pin"],["localwaker"]],["poll",["option"]]]],[8,"StreamExt","","An extension trait for `Stream`s that provides a variety of convenient combinator functions.",N,N],[11,"next","","Creates a future that resolves to the next item in the stream.",17,[[["self"]],["next"]]],[11,"into_future","","Converts this stream into a future of `(next_item, tail_of_stream)`. If the stream terminates, then the next item is [`None`].",17,[[["self"]],["streamfuture"]]],[11,"map","","Maps this stream's items to a different type, returning a new stream of the resulting type.",17,[[["self"],["f"]],["map"]]],[11,"filter","","Filters the values produced by this stream according to the provided asynchronous predicate.",17,[[["self"],["f"]],["filter"]]],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type according to the provided asynchronous closure.",17,[[["self"],["f"]],["filtermap"]]],[11,"then","","Computes from this stream's items new items of a different type using an asynchronous closure.",17,[[["self"],["f"]],["then"]]],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",17,[[["self"]],["collect"]]],[11,"concat","","Concatenate all items of a stream into a single extendable destination, returning a future representing the end result.",17,[[["self"]],["concat"]]],[11,"fold","","Execute an accumulating asynchronous computation over a stream, collecting all the values into one final result.",17,[[["self"],["t"],["f"]],["fold"]]],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",17,[[["self"]],["flatten"]]],[11,"skip_while","","Skip elements on this stream while the provided asynchronous predicate resolves to `true`.",17,[[["self"],["f"]],["skipwhile"]]],[11,"take_while","","Take elements from this stream while the provided asynchronous predicate resolves to `true`.",17,[[["self"],["f"]],["takewhile"]]],[11,"for_each","","Runs this stream to completion, executing the provided asynchronous closure for each element on the stream.",17,[[["self"],["f"]],["foreach"]]],[11,"for_each_concurrent","","Runs this stream to completion, executing the provided asynchronous closure for each element on the stream concurrently as elements become available.",17,[[["self"],["impl into<option<usize>>"],["f"]],["foreachconcurrent"]]],[11,"take","","Creates a new stream of at most `n` items of the underlying stream.",17,[[["self"],["u64"]],["take"]]],[11,"skip","","Creates a new stream which skips `n` items of the underlying stream.",17,[[["self"],["u64"]],["skip"]]],[11,"fuse","","Fuse a stream such that `poll_next` will never again be called once it has finished. This method can be used t turn any `Stream` into a `FusedStream`.",17,[[["self"]],["fuse"]]],[11,"by_ref","","Borrows a stream, rather than consuming it.",17,[[["self"]],["self"]]],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",17,[[["self"]],["catchunwind"]]],[11,"boxed","","Wrap the stream in a Box, pinning it.",17,[[["self"]],["pin",["box"]]]],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",17,[[["self"],["usize"]],["buffered"]]],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",17,[[["self"],["usize"]],["bufferunordered"]]],[11,"zip","","An adapter for zipping two streams together.",17,[[["self"],["st"]],["zip"]]],[11,"chain","","Adapter for chaining two stream.",17,[[["self"],["st"]],["chain"]]],[11,"peekable","","Creates a new stream which exposes a `peek` method.",17,[[["self"]],["peekable"]]],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",17,[[["self"],["usize"]],["chunks"]]],[11,"select","","This combinator will attempt to pull items from both streams. Each stream will be polled in a round-robin fashion, and whenever a stream is ready to yield an item that item is yielded.",17,[[["self"],["st"]],["select"]]],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",17,[[["self"],["s"]],["forward"]]],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",17,N],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",17,[[["self"],["f"]],["inspect"]]],[11,"left_stream","","Wrap this stream in an `Either` stream, making it the left-hand variant of that `Either`.",17,[[["self"]],["either"]]],[11,"right_stream","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",17,[[["self"]],["either"]]],[11,"poll_next_unpin","","A convenience method for calling [`Stream::poll_next`] on [`Unpin`] stream types.",17,[[["self"],["localwaker"]],["poll",["option"]]]],[11,"select_next_some","","Returns a [`Future`] that resolves when the next item in this stream is ready.",17,[[["self"]],["selectnextsome"]]],[8,"TryStreamExt","","Adapters specific to `Result`-returning streams",N,N],[11,"err_into","","Wraps the current stream in a new stream which converts the error type into the one provided.",18,[[["self"]],["errinto"]]],[11,"map_ok","","Wraps the current stream in a new stream which maps the success value using the provided closure.",18,[[["self"],["f"]],["mapok"]]],[11,"map_err","","Wraps the current stream in a new stream which maps the error value using the provided closure.",18,[[["self"],["f"]],["maperr"]]],[11,"into_stream","","Wraps a [`TryStream`] into a type that implements `Stream`",18,[[["self"]],["intostream"]]],[11,"try_next","","Creates a future that attempts to resolve the next item in the stream. If an error is encountered before the next item, the error is returned instead.",18,[[["self"]],["trynext"]]],[11,"try_for_each","","Attempts to run this stream to completion, executing the provided asynchronous closure for each element on the stream.",18,[[["self"],["f"]],["tryforeach"]]],[11,"try_skip_while","","Skip elements on this stream while the provided asynchronous predicate resolves to `true`.",18,[[["self"],["f"]],["tryskipwhile"]]],[11,"try_for_each_concurrent","","Attempts to run this stream to completion, executing the provided asynchronous closure for each element on the stream concurrently as elements become available, exiting as soon as an error occurs.",18,[[["self"],["impl into<option<usize>>"],["f"]],["tryforeachconcurrent"]]],[11,"try_collect","","Attempt to Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",18,[[["self"]],["trycollect"]]],[11,"try_filter_map","","Attempt to filter the values produced by this stream while simultaneously mapping them to a different type according to the provided asynchronous closure.",18,[[["self"],["f"]],["tryfiltermap"]]],[11,"try_fold","","Attempt to execute an accumulating asynchronous computation over a stream, collecting all the values into one final result.",18,[[["self"],["t"],["f"]],["tryfold"]]],[11,"try_concat","","Attempt to concatenate all items of a stream into a single extendable destination, returning a future representing the end result.",18,[[["self"]],["tryconcat"]]],[11,"try_buffer_unordered","","Attempt to execute several futures from a stream concurrently.",18,[[["self"],["usize"]],["trybufferunordered"]]],[11,"compat","","Wraps a [`TryStream`] into a stream compatible with libraries using futures 0.1 `Stream`. Requires the `compat` feature to be enabled. ``` #![feature(async_await, await_macro, futures_api)] use futures::future::{FutureExt, TryFutureExt}; # let (tx, rx) = futures::channel::oneshot::channel();",18,[[["self"]],["compat"]]],[8,"Sink","","A `Sink` is a value into which other values can be sent, asynchronously.",N,N],[16,"SinkItem","","The type of value that the sink accepts.",19,N],[16,"SinkError","","The type of value produced by the sink when an error occurs.",19,N],[10,"poll_ready","","Attempts to prepare the `Sink` to receive a value.",19,[[["pin"],["localwaker"]],["poll",["result"]]]],[10,"start_send","","Begin the process of sending a value to the sink. Each call to this function must be proceeded by a successful call to `poll_ready` which returned `Ok(Poll::Ready(()))`.",19,N],[10,"poll_flush","","Flush any remaining output from this sink.",19,[[["pin"],["localwaker"]],["poll",["result"]]]],[10,"poll_close","","Flush any remaining output and close this sink, if necessary.",19,[[["pin"],["localwaker"]],["poll",["result"]]]],[8,"SinkExt","","An extension trait for `Sink`s that provides a variety of convenient combinator functions.",N,N],[11,"with","","Composes a function in front of the sink.",20,[[["self"],["f"]],["with"]]],[11,"with_flat_map","","Composes a function in front of the sink.",20,[[["self"],["f"]],["withflatmap"]]],[11,"sink_map_err","","Transforms the error returned by the sink.",20,[[["self"],["f"]],["sinkmaperr"]]],[11,"sink_err_into","","Map this sink's error to a different error type using the `Into` trait.",20,[[["self"]],["sinkerrinto"]]],[11,"buffer","","Adds a fixed-size buffer to the current sink.",20,[[["self"],["usize"]],["buffer"]]],[11,"close","","Close the sink.",20,[[["self"]],["close"]]],[11,"fanout","","Fanout items to multiple sinks.",20,[[["self"],["si"]],["fanout"]]],[11,"flush","","Flush the sync, processing all pending items.",20,[[["self"]],["flush"]]],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",20,N],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",20,[[["self"],["st"]],["sendall"]]],[11,"left_sink","","Wrap this sink in an `Either` sink, making it the left-hand variant of that `Either`.",20,[[["self"]],["either"]]],[11,"right_sink","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",20,[[["self"]],["either"]]],[11,"compat","","Wraps a [`Sink`] into a sink compatible with libraries using futures 0.1 `Sink`. Requires the `compat` feature to be enabled.",20,[[["self"]],["compat"]]],[8,"AsyncRead","","Read bytes asynchronously.",N,N],[11,"initializer","","Determines if this `AsyncRead`er can work with buffers of uninitialized memory.",11,[[["self"]],["initializer"]]],[10,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",11,N],[11,"poll_vectored_read","","Attempt to read from the `AsyncRead` into `vec` using vectored IO operations.",11,N],[8,"AsyncWrite","","Write bytes asynchronously.",N,N],[10,"poll_write","","Attempt to write bytes from `buf` into the object.",12,N],[11,"poll_vectored_write","","Attempt to write bytes from `vec` into the object using vectored IO operations.",12,N],[10,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",12,[[["self"],["localwaker"]],["poll",["result"]]]],[10,"poll_close","","Attempt to close the object.",12,[[["self"],["localwaker"]],["poll",["result"]]]],[8,"AsyncReadExt","","An extension trait which adds utility methods to `AsyncRead` types.",N,N],[11,"copy_into","","Creates a future which copies all the bytes from one object to another.",13,[[["self"],["w"]],["copyinto"]]],[11,"read","","Tries to read some bytes directly into the given `buf` in asynchronous manner, returning a future type.",13,N],[11,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if end of file (EOF) is hit sooner.",13,N],[11,"read_to_end","","Creates a future which will read all the bytes from this `AsyncRead`.",13,[[["self"],["vec"]],["readtoend"]]],[11,"split","","Helper method for splitting this read/write object into two halves.",13,N],[11,"compat","","Wraps an [`AsyncRead`] in a compatibility wrapper that allows it to be used as a futures 0.1 / tokio-io 0.1 `AsyncRead`. If the wrapped type implements [`AsyncWrite`] as well, the result will also implement the futures 0.1 / tokio 0.1 `AsyncWrite` trait.",13,[[["self"]],["compat"]]],[8,"AsyncWriteExt","","An extension trait which adds utility methods to `AsyncWrite` types.",N,N],[11,"flush","","Creates a future which will entirely flush this `AsyncWrite`.",14,[[["self"]],["flush"]]],[11,"close","","Creates a future which will entirely close this `AsyncWrite`.",14,[[["self"]],["close"]]],[11,"write_all","","Write data into this object.",14,N],[11,"compat_write","","Wraps an [`AsyncWrite`] in a compatibility wrapper that allows it to be used as a futures 0.1 / tokio-io 0.1 `AsyncWrite`. Requires the `io-compat` feature to enable.",14,[[["self"]],["compat"]]],[0,"sink","futures","Asynchronous sinks.",N,N],[8,"Sink","futures::sink","A `Sink` is a value into which other values can be sent, asynchronously.",N,N],[16,"SinkItem","","The type of value that the sink accepts.",19,N],[16,"SinkError","","The type of value produced by the sink when an error occurs.",19,N],[10,"poll_ready","","Attempts to prepare the `Sink` to receive a value.",19,[[["pin"],["localwaker"]],["poll",["result"]]]],[10,"start_send","","Begin the process of sending a value to the sink. Each call to this function must be proceeded by a successful call to `poll_ready` which returned `Ok(Poll::Ready(()))`.",19,N],[10,"poll_flush","","Flush any remaining output from this sink.",19,[[["pin"],["localwaker"]],["poll",["result"]]]],[10,"poll_close","","Flush any remaining output and close this sink, if necessary.",19,[[["pin"],["localwaker"]],["poll",["result"]]]],[3,"Close","","Future for the `close` combinator, which polls the sink until all data has been closed.",N,N],[3,"Flush","","Future for the `flush` combinator, which polls the sink until all data has been flushed.",N,N],[3,"Send","","Future for the `Sink::send` combinator, which sends a value to a sink and then waits until the sink has fully flushed.",N,N],[3,"SendAll","","Future for the `Sink::send_all` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",N,N],[3,"SinkErrInto","","A sink combinator to change the error type of a sink.",N,N],[3,"SinkMapErr","","Sink for the `Sink::sink_map_err` combinator.",N,N],[3,"With","","Sink for the `Sink::with` combinator, chaining a computation to run prior to pushing a value into the underlying sink.",N,N],[8,"SinkExt","","An extension trait for `Sink`s that provides a variety of convenient combinator functions.",N,N],[11,"with","","Composes a function in front of the sink.",20,[[["self"],["f"]],["with"]]],[11,"with_flat_map","","Composes a function in front of the sink.",20,[[["self"],["f"]],["withflatmap"]]],[11,"sink_map_err","","Transforms the error returned by the sink.",20,[[["self"],["f"]],["sinkmaperr"]]],[11,"sink_err_into","","Map this sink's error to a different error type using the `Into` trait.",20,[[["self"]],["sinkerrinto"]]],[11,"buffer","","Adds a fixed-size buffer to the current sink.",20,[[["self"],["usize"]],["buffer"]]],[11,"close","","Close the sink.",20,[[["self"]],["close"]]],[11,"fanout","","Fanout items to multiple sinks.",20,[[["self"],["si"]],["fanout"]]],[11,"flush","","Flush the sync, processing all pending items.",20,[[["self"]],["flush"]]],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",20,N],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",20,[[["self"],["st"]],["sendall"]]],[11,"left_sink","","Wrap this sink in an `Either` sink, making it the left-hand variant of that `Either`.",20,[[["self"]],["either"]]],[11,"right_sink","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",20,[[["self"]],["either"]]],[11,"compat","","Wraps a [`Sink`] into a sink compatible with libraries using futures 0.1 `Sink`. Requires the `compat` feature to be enabled.",20,[[["self"]],["compat"]]],[3,"Fanout","","Sink that clones incoming items and forwards them to two sinks at the same time.",N,N],[3,"Drain","","A sink that will discard all items given to it.",N,N],[4,"DrainError","","The error type for the [`Drain`] sink.",N,N],[5,"drain","","Create a sink that will just discard all items given to it.",N,[[],["drain"]]],[3,"Buffer","","Sink for the `Sink::buffer` combinator, which buffers up to some fixed number of values when the underlying sink is unable to accept them.",N,N],[0,"stream","futures","Asynchronous streams.",N,N],[8,"Stream","futures::stream","A stream of values produced asynchronously.",N,N],[16,"Item","","Values yielded by the stream.",15,N],[10,"poll_next","","Attempt to pull out the next value of this stream, registering the current task for wakeup if the value is not yet available, and returning `None` if the stream is exhausted.",15,[[["pin"],["localwaker"]],["poll",["option"]]]],[8,"TryStream","","A convenience for streams that return `Result` values that includes a variety of adapters tailored to such futures.",N,N],[16,"Ok","","The type of successful values yielded by this future",16,N],[16,"Error","","The type of failures yielded by this future",16,N],[10,"try_poll_next","","Poll this `TryStream` as if it were a `Stream`.",16,[[["pin"],["localwaker"]],["poll",["option"]]]],[8,"FusedStream","","A `Stream` or `TryStream` which tracks whether or not the underlying stream should no longer be polled.",N,N],[10,"is_terminated","","Returns `true` if the stream should no longer be polled.",21,[[["self"]],["bool"]]],[3,"StreamObj","","A custom trait object for polling streams, roughly akin to `Box<dyn Stream<Item = T> + Send + 'a>`.",N,N],[3,"LocalStreamObj","","A custom trait object for polling streams, roughly akin to `Box<dyn Stream<Item = T> + 'a>`.",N,N],[8,"UnsafeStreamObj","","A custom implementation of a stream trait object for `StreamObj`, providing a hand-rolled vtable.",N,N],[10,"into_raw","","Convert an owned instance into a (conceptually owned) void pointer.",22,N],[10,"poll_next","","Poll the stream represented by the given void pointer.",22,N],[10,"drop","","Drops the stream represented by the given void pointer.",22,N],[5,"iter","","Converts an `Iterator` into a `Stream` which is always ready to yield the next value.",N,[[["i"]],["iter"]]],[3,"Iter","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[5,"repeat","","Create a stream which produces the same item repeatedly.",N,[[["t"]],["repeat"]]],[3,"Repeat","","Stream that produces the same element repeatedly.",N,N],[5,"empty","","Creates a stream which contains no elements.",N,[[],["empty"]]],[3,"Empty","","A stream which contains no elements.",N,N],[5,"once","","Creates a stream of single element",N,[[["fut"]],["once"]]],[3,"Once","","A stream which emits single element and then EOF.",N,N],[5,"poll_fn","","Creates a new stream wrapping around a function returning `Poll`.",N,[[["f"]],["pollfn"]]],[3,"PollFn","","A stream which adapts a function returning `Poll`.",N,N],[5,"unfold","","Creates a `Stream` from a seed and a closure returning a `Future`.",N,[[["t"],["f"]],["unfold"]]],[3,"Unfold","","A stream which creates futures, polls them and return their result",N,N],[8,"StreamExt","","An extension trait for `Stream`s that provides a variety of convenient combinator functions.",N,N],[11,"next","","Creates a future that resolves to the next item in the stream.",17,[[["self"]],["next"]]],[11,"into_future","","Converts this stream into a future of `(next_item, tail_of_stream)`. If the stream terminates, then the next item is [`None`].",17,[[["self"]],["streamfuture"]]],[11,"map","","Maps this stream's items to a different type, returning a new stream of the resulting type.",17,[[["self"],["f"]],["map"]]],[11,"filter","","Filters the values produced by this stream according to the provided asynchronous predicate.",17,[[["self"],["f"]],["filter"]]],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type according to the provided asynchronous closure.",17,[[["self"],["f"]],["filtermap"]]],[11,"then","","Computes from this stream's items new items of a different type using an asynchronous closure.",17,[[["self"],["f"]],["then"]]],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",17,[[["self"]],["collect"]]],[11,"concat","","Concatenate all items of a stream into a single extendable destination, returning a future representing the end result.",17,[[["self"]],["concat"]]],[11,"fold","","Execute an accumulating asynchronous computation over a stream, collecting all the values into one final result.",17,[[["self"],["t"],["f"]],["fold"]]],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",17,[[["self"]],["flatten"]]],[11,"skip_while","","Skip elements on this stream while the provided asynchronous predicate resolves to `true`.",17,[[["self"],["f"]],["skipwhile"]]],[11,"take_while","","Take elements from this stream while the provided asynchronous predicate resolves to `true`.",17,[[["self"],["f"]],["takewhile"]]],[11,"for_each","","Runs this stream to completion, executing the provided asynchronous closure for each element on the stream.",17,[[["self"],["f"]],["foreach"]]],[11,"for_each_concurrent","","Runs this stream to completion, executing the provided asynchronous closure for each element on the stream concurrently as elements become available.",17,[[["self"],["impl into<option<usize>>"],["f"]],["foreachconcurrent"]]],[11,"take","","Creates a new stream of at most `n` items of the underlying stream.",17,[[["self"],["u64"]],["take"]]],[11,"skip","","Creates a new stream which skips `n` items of the underlying stream.",17,[[["self"],["u64"]],["skip"]]],[11,"fuse","","Fuse a stream such that `poll_next` will never again be called once it has finished. This method can be used t turn any `Stream` into a `FusedStream`.",17,[[["self"]],["fuse"]]],[11,"by_ref","","Borrows a stream, rather than consuming it.",17,[[["self"]],["self"]]],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",17,[[["self"]],["catchunwind"]]],[11,"boxed","","Wrap the stream in a Box, pinning it.",17,[[["self"]],["pin",["box"]]]],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",17,[[["self"],["usize"]],["buffered"]]],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",17,[[["self"],["usize"]],["bufferunordered"]]],[11,"zip","","An adapter for zipping two streams together.",17,[[["self"],["st"]],["zip"]]],[11,"chain","","Adapter for chaining two stream.",17,[[["self"],["st"]],["chain"]]],[11,"peekable","","Creates a new stream which exposes a `peek` method.",17,[[["self"]],["peekable"]]],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",17,[[["self"],["usize"]],["chunks"]]],[11,"select","","This combinator will attempt to pull items from both streams. Each stream will be polled in a round-robin fashion, and whenever a stream is ready to yield an item that item is yielded.",17,[[["self"],["st"]],["select"]]],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",17,[[["self"],["s"]],["forward"]]],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",17,N],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",17,[[["self"],["f"]],["inspect"]]],[11,"left_stream","","Wrap this stream in an `Either` stream, making it the left-hand variant of that `Either`.",17,[[["self"]],["either"]]],[11,"right_stream","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",17,[[["self"]],["either"]]],[11,"poll_next_unpin","","A convenience method for calling [`Stream::poll_next`] on [`Unpin`] stream types.",17,[[["self"],["localwaker"]],["poll",["option"]]]],[11,"select_next_some","","Returns a [`Future`] that resolves when the next item in this stream is ready.",17,[[["self"]],["selectnextsome"]]],[3,"Chain","","An adapter for chaining the output of two streams.",N,N],[3,"Concat","","A stream combinator to concatenate the results of a stream into the first yielded item.",N,N],[3,"Filter","","A stream combinator used to filter the results of a stream and only yield some values.",N,N],[3,"FilterMap","","A combinator used to filter the results of a stream and simultaneously map them to a different type.",N,N],[3,"Flatten","","A combinator used to flatten a stream-of-streams into one long stream of elements.",N,N],[3,"Fold","","A future used to collect all the results of a stream into one generic type.",N,N],[3,"Forward","","Future for the `Stream::forward` combinator, which sends a stream of values to a sink and then flushes the sink.",N,N],[3,"ForEach","","A stream combinator which executes a unit closure over each item on a stream.",N,N],[3,"Fuse","","A stream which \"fuse\"s a stream once it's terminated.",N,N],[3,"StreamFuture","","A combinator used to temporarily convert a stream into a future.",N,N],[3,"Inspect","","Do something with the items of a stream, passing it on.",N,N],[3,"Map","","A stream combinator which will change the type of a stream from one type to another.",N,N],[3,"Next","","A future of the next element of a stream.",N,N],[3,"Peekable","","A `Stream` that implements a `peek` method.",N,N],[3,"Select","","An adapter for merging the output of two streams.",N,N],[3,"Skip","","A stream combinator which skips a number of elements before continuing.",N,N],[3,"SkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",N,N],[3,"Take","","A stream combinator which returns a maximum number of elements.",N,N],[3,"TakeWhile","","A stream combinator which takes elements from a stream while a predicate holds.",N,N],[3,"Then","","A stream combinator which chains a computation onto each item produced by a stream.",N,N],[3,"Zip","","An adapter for merging the output of two streams.",N,N],[5,"futures_ordered","","Converts a list of futures into a `Stream` of results from the futures.",N,[[["i"]],["futuresordered"]]],[3,"FuturesOrdered","","An unbounded queue of futures.",N,N],[5,"futures_unordered","","Converts a list of futures into a [`Stream`] of outputs from the futures.",N,[[["i"]],["futuresunordered"]]],[3,"FuturesUnordered","","A set of futures which may complete in any order.",N,N],[3,"BufferUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if possible, delivering results as they become available.",N,N],[3,"Buffered","","An adaptor for a stream of futures to execute the futures concurrently, if possible.",N,N],[3,"CatchUnwind","","Stream for the `catch_unwind` combinator.",N,N],[3,"Chunks","","An adaptor that chunks up elements in a vector.",N,N],[3,"Collect","","A future which collects all of the values of a stream into a vector.",N,N],[3,"SplitStream","","A `Stream` part of the split pair",N,N],[3,"SplitSink","","A `Sink` part of the split pair",N,N],[3,"ReuniteError","","Error indicating a `SplitSink<S>` and `SplitStream<S>` were not two halves of a `Stream + Split`, and thus could not be `reunite`d.",N,N],[12,"0","","",23,N],[12,"1","","",23,N],[8,"TryStreamExt","","Adapters specific to `Result`-returning streams",N,N],[11,"err_into","","Wraps the current stream in a new stream which converts the error type into the one provided.",18,[[["self"]],["errinto"]]],[11,"map_ok","","Wraps the current stream in a new stream which maps the success value using the provided closure.",18,[[["self"],["f"]],["mapok"]]],[11,"map_err","","Wraps the current stream in a new stream which maps the error value using the provided closure.",18,[[["self"],["f"]],["maperr"]]],[11,"into_stream","","Wraps a [`TryStream`] into a type that implements `Stream`",18,[[["self"]],["intostream"]]],[11,"try_next","","Creates a future that attempts to resolve the next item in the stream. If an error is encountered before the next item, the error is returned instead.",18,[[["self"]],["trynext"]]],[11,"try_for_each","","Attempts to run this stream to completion, executing the provided asynchronous closure for each element on the stream.",18,[[["self"],["f"]],["tryforeach"]]],[11,"try_skip_while","","Skip elements on this stream while the provided asynchronous predicate resolves to `true`.",18,[[["self"],["f"]],["tryskipwhile"]]],[11,"try_for_each_concurrent","","Attempts to run this stream to completion, executing the provided asynchronous closure for each element on the stream concurrently as elements become available, exiting as soon as an error occurs.",18,[[["self"],["impl into<option<usize>>"],["f"]],["tryforeachconcurrent"]]],[11,"try_collect","","Attempt to Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",18,[[["self"]],["trycollect"]]],[11,"try_filter_map","","Attempt to filter the values produced by this stream while simultaneously mapping them to a different type according to the provided asynchronous closure.",18,[[["self"],["f"]],["tryfiltermap"]]],[11,"try_fold","","Attempt to execute an accumulating asynchronous computation over a stream, collecting all the values into one final result.",18,[[["self"],["t"],["f"]],["tryfold"]]],[11,"try_concat","","Attempt to concatenate all items of a stream into a single extendable destination, returning a future representing the end result.",18,[[["self"]],["tryconcat"]]],[11,"try_buffer_unordered","","Attempt to execute several futures from a stream concurrently.",18,[[["self"],["usize"]],["trybufferunordered"]]],[11,"compat","","Wraps a [`TryStream`] into a stream compatible with libraries using futures 0.1 `Stream`. Requires the `compat` feature to be enabled. ``` #![feature(async_await, await_macro, futures_api)] use futures::future::{FutureExt, TryFutureExt}; # let (tx, rx) = futures::channel::oneshot::channel();",18,[[["self"]],["compat"]]],[3,"TryNext","","A future which attempts to collect all of the values of a stream.",N,N],[3,"TryForEach","","A stream combinator which attempts to execute an async closure over each future in a stream.",N,N],[3,"ErrInto","","Stream for the `err_into` combinator.",N,N],[3,"TryFold","","The future for the `TryStream::fold` method.",N,N],[3,"TrySkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",N,N],[3,"IntoStream","","Stream for the `into_stream` combinator.",N,N],[3,"TryCollect","","A future which attempts to collect all of the values of a stream.",N,N],[3,"TryBufferUnordered","","A stream returned by the `try_buffer_unordered` method",N,N],[0,"task","futures","Tools for working with tasks.",N,N],[4,"Poll","futures::task","Indicates whether a value is available or if the current task has been scheduled to receive a wakeup instead.",N,N],[13,"Ready","","Represents that a value is immediately ready.",24,N],[13,"Pending","","Represents that a value is not ready yet.",24,N],[8,"Spawn","","The `Spawn` trait allows for pushing futures onto an executor that will run them to completion.",N,N],[10,"spawn_obj","","Spawns a future that will be run to completion.",25,[[["self"],["futureobj"]],["result",["spawnerror"]]]],[11,"status","","Determines whether the executor is able to spawn new tasks.",25,[[["self"]],["result",["spawnerror"]]]],[8,"LocalSpawn","","The `LocalSpawn` is similar to `[Spawn]`, but allows spawning futures that don't implement `Send`.",N,N],[10,"spawn_local_obj","","Spawns a future that will be run to completion.",26,[[["self"],["localfutureobj"]],["result",["spawnerror"]]]],[11,"status_local","","Determines whether the executor is able to spawn new tasks.",26,[[["self"]],["result",["spawnerror"]]]],[3,"SpawnError","","An error that occurred during spawning.",N,N],[3,"Waker","","A `Waker` is a handle for waking up a task by notifying its executor that it is ready to be run.",N,N],[3,"LocalWaker","","A `LocalWaker` is a handle for waking up a task by notifying its executor that it is ready to be run.",N,N],[8,"UnsafeWake","","An unsafe trait for implementing custom memory management for a `Waker` or `LocalWaker`.",N,N],[10,"clone_raw","","Creates a clone of this `UnsafeWake` and stores it behind a `Waker`.",27,[[["self"]],["waker"]]],[10,"drop_raw","","Drops this instance of `UnsafeWake`, deallocating resources associated with it.",27,N],[10,"wake","","Indicates that the associated task is ready to make progress and should be `poll`ed.",27,N],[11,"wake_local","","Indicates that the associated task is ready to make progress and should be `poll`ed. This function is the same as `wake`, but can only be called from the thread that this `UnsafeWake` is \"local\" to. This allows for implementors to provide specialized wakeup behavior specific to the current thread. This function is called by `LocalWaker::wake`.",27,N],[8,"Wake","","A way of waking up a specific task.",N,N],[10,"wake","","Indicates that the associated task is ready to make progress and should be `poll`ed.",28,N],[11,"wake_local","","Indicates that the associated task is ready to make progress and should be `poll`ed. This function is like `wake`, but can only be called from the thread on which this `Wake` was created.",28,N],[5,"local_waker","","Creates a `LocalWaker` from a local `wake`.",N,[[["arc"]],["localwaker"]]],[5,"local_waker_from_nonlocal","","Creates a `LocalWaker` from a non-local `wake`.",N,[[["arc"]],["localwaker"]]],[3,"LocalWakerRef","","A `LocalWaker` that is only valid for a given lifetime.",N,N],[5,"local_waker_ref","","Creates a reference to a `LocalWaker` from a local `wake`.",N,[[["arc"]],["localwakerref"]]],[5,"local_waker_ref_from_nonlocal","","Creates a reference to a `LocalWaker` from a non-local `wake`.",N,[[["arc"]],["localwakerref"]]],[8,"SpawnExt","","Extension trait for `Spawn`.",N,N],[11,"spawn","","Spawns a task that polls the given future with output `()` to completion.",29,[[["self"],["fut"]],["result",["spawnerror"]]]],[11,"spawn_with_handle","","Spawns a task that polls the given future to completion and returns a future that resolves to the spawned future's output.",29,[[["self"],["fut"]],["result",["remotehandle","spawnerror"]]]],[11,"compat","","Wraps a [`Spawn`] and makes it usable as a futures 0.1 `Executor`. Requires the `compat` feature to enable.",29,[[["self"]],["compat"]]],[8,"LocalSpawnExt","","Extension trait for `LocalSpawn`.",N,N],[11,"spawn_local","","Spawns a task that polls the given future with output `()` to completion.",30,[[["self"],["fut"]],["result",["spawnerror"]]]],[11,"spawn_local_with_handle","","Spawns a task that polls the given future to completion and returns a future that resolves to the spawned future's output.",30,[[["self"],["fut"]],["result",["remotehandle","spawnerror"]]]],[5,"noop_local_waker","","Create a new `LocalWaker` referencing a singleton instance of [`NoopWake`].",N,[[],["localwaker"]]],[5,"noop_local_waker_ref","","Get a thread local reference to a `LocalWaker` referencing a singleton instance of [`NoopWake`].",N,[[],["localwaker"]]],[3,"AtomicWaker","","A synchronization primitive for task wakeup.",N,N],[11,"from","futures::channel::oneshot","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_poll","","",31,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"to_string","","",33,[[["self"]],["string"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"from","futures::channel::mpsc","",34,[[["t"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"try_poll_next","","",36,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"try_poll_next","","",37,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"to_string","","",38,[[["self"]],["string"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"to_string","","",39,[[["self"]],["string"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,N],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"to_string","","",40,[[["self"]],["string"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"from","futures::compat","",41,[[["t"]],["t"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"compat","","",41,[[["self"]],["executor01as03"]]],[11,"into_future","","",41,[[["self"]],["f"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"try_poll","","",42,[[["pin"],["localwaker"]],["poll"]]],[11,"try_poll_next","","",42,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,N],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"into_iter","futures::executor","",45,[[["self"]],["i"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,N],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"from","futures::future","",52,[[["t"]],["t"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"try_poll","","",52,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"try_poll","","",53,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"try_poll","","",54,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"try_poll","","",55,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"try_poll","","",56,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,N],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"try_poll","","",57,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,N],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"try_poll_next","","",59,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"try_poll","","",60,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"try_poll","","",61,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"try_poll","","",62,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"try_poll_next","","",63,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"try_poll","","",68,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"try_poll","","",69,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,N],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"try_poll","","",70,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,N],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,N],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"into","","",74,[[["self"]],["u"]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"get_type_id","","",74,[[["self"]],["typeid"]]],[11,"try_into","","",74,[[["self"]],["result"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"into","","",75,[[["self"]],["u"]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"get_type_id","","",75,[[["self"]],["typeid"]]],[11,"try_into","","",75,[[["self"]],["result"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"try_poll","","",75,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"into","","",76,[[["self"]],["u"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"get_type_id","","",76,[[["self"]],["typeid"]]],[11,"try_into","","",76,[[["self"]],["result"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"try_poll","","",76,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",77,[[["t"]],["t"]]],[11,"into","","",77,[[["self"]],["u"]]],[11,"to_owned","","",77,[[["self"]],["t"]]],[11,"clone_into","","",77,N],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"get_type_id","","",77,[[["self"]],["typeid"]]],[11,"try_into","","",77,[[["self"]],["result"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"try_poll","","",77,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"into","","",78,[[["self"]],["u"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"get_type_id","","",78,[[["self"]],["typeid"]]],[11,"try_into","","",78,[[["self"]],["result"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"try_poll","","",78,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"into","","",79,[[["self"]],["u"]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"get_type_id","","",79,[[["self"]],["typeid"]]],[11,"try_into","","",79,[[["self"]],["result"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"try_poll","","",79,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"into","","",80,[[["self"]],["u"]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"get_type_id","","",80,[[["self"]],["typeid"]]],[11,"try_into","","",80,[[["self"]],["result"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"into","","",81,[[["self"]],["u"]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"get_type_id","","",81,[[["self"]],["typeid"]]],[11,"try_into","","",81,[[["self"]],["result"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"try_poll","","",81,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"into","","",82,[[["self"]],["u"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"get_type_id","","",82,[[["self"]],["typeid"]]],[11,"try_into","","",82,[[["self"]],["result"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"try_poll","","",82,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",83,[[["t"]],["t"]]],[11,"into","","",83,[[["self"]],["u"]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"get_type_id","","",83,[[["self"]],["typeid"]]],[11,"try_into","","",83,[[["self"]],["result"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"try_poll","","",83,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",84,[[["t"]],["t"]]],[11,"into","","",84,[[["self"]],["u"]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"get_type_id","","",84,[[["self"]],["typeid"]]],[11,"try_into","","",84,[[["self"]],["result"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"try_poll","","",84,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",85,[[["t"]],["t"]]],[11,"into","","",85,[[["self"]],["u"]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"get_type_id","","",85,[[["self"]],["typeid"]]],[11,"try_into","","",85,[[["self"]],["result"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"try_poll","","",85,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",86,[[["t"]],["t"]]],[11,"into","","",86,[[["self"]],["u"]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"get_type_id","","",86,[[["self"]],["typeid"]]],[11,"try_into","","",86,[[["self"]],["result"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"try_poll","","",86,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",87,[[["t"]],["t"]]],[11,"into","","",87,[[["self"]],["u"]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"get_type_id","","",87,[[["self"]],["typeid"]]],[11,"try_into","","",87,[[["self"]],["result"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"try_poll","","",87,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",88,[[["t"]],["t"]]],[11,"into","","",88,[[["self"]],["u"]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"get_type_id","","",88,[[["self"]],["typeid"]]],[11,"try_into","","",88,[[["self"]],["result"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"try_poll","","",88,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",89,[[["t"]],["t"]]],[11,"into","","",89,[[["self"]],["u"]]],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"get_type_id","","",89,[[["self"]],["typeid"]]],[11,"try_into","","",89,[[["self"]],["result"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"try_poll","","",89,[[["pin"],["localwaker"]],["poll"]]],[11,"to_string","futures::io","",90,[[["self"]],["string"]]],[11,"from","","",90,[[["t"]],["t"]]],[11,"into","","",90,[[["self"]],["u"]]],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"get_type_id","","",90,[[["self"]],["typeid"]]],[11,"try_into","","",90,[[["self"]],["result"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"from","","",91,[[["t"]],["t"]]],[11,"into","","",91,[[["self"]],["u"]]],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"get_type_id","","",91,[[["self"]],["typeid"]]],[11,"try_into","","",91,[[["self"]],["result"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"get_type_id","","",92,[[["self"]],["typeid"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"from","","",93,[[["t"]],["t"]]],[11,"into","","",93,[[["self"]],["u"]]],[11,"to_owned","","",93,[[["self"]],["t"]]],[11,"clone_into","","",93,N],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"get_type_id","","",93,[[["self"]],["typeid"]]],[11,"try_into","","",93,[[["self"]],["result"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"from","","",94,[[["t"]],["t"]]],[11,"into","","",94,[[["self"]],["u"]]],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"get_type_id","","",94,[[["self"]],["typeid"]]],[11,"try_into","","",94,[[["self"]],["result"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"try_poll","","",94,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",95,[[["t"]],["t"]]],[11,"into","","",95,[[["self"]],["u"]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"get_type_id","","",95,[[["self"]],["typeid"]]],[11,"try_into","","",95,[[["self"]],["result"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"try_poll","","",95,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",96,[[["t"]],["t"]]],[11,"into","","",96,[[["self"]],["u"]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"get_type_id","","",96,[[["self"]],["typeid"]]],[11,"try_into","","",96,[[["self"]],["result"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"try_poll","","",96,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",97,[[["t"]],["t"]]],[11,"into","","",97,[[["self"]],["u"]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"get_type_id","","",97,[[["self"]],["typeid"]]],[11,"try_into","","",97,[[["self"]],["result"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"try_poll","","",97,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",98,[[["t"]],["t"]]],[11,"into","","",98,[[["self"]],["u"]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"get_type_id","","",98,[[["self"]],["typeid"]]],[11,"try_into","","",98,[[["self"]],["result"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"try_poll","","",98,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",99,[[["t"]],["t"]]],[11,"into","","",99,[[["self"]],["u"]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"get_type_id","","",99,[[["self"]],["typeid"]]],[11,"try_into","","",99,[[["self"]],["result"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"from","","",100,[[["t"]],["t"]]],[11,"into","","",100,[[["self"]],["u"]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"get_type_id","","",100,[[["self"]],["typeid"]]],[11,"try_into","","",100,[[["self"]],["result"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"try_poll","","",100,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",101,[[["t"]],["t"]]],[11,"into","","",101,[[["self"]],["u"]]],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"get_type_id","","",101,[[["self"]],["typeid"]]],[11,"try_into","","",101,[[["self"]],["result"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"from","","",102,[[["t"]],["t"]]],[11,"into","","",102,[[["self"]],["u"]]],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"get_type_id","","",102,[[["self"]],["typeid"]]],[11,"try_into","","",102,[[["self"]],["result"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"try_poll","","",102,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",103,[[["t"]],["t"]]],[11,"into","","",103,[[["self"]],["u"]]],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"get_type_id","","",103,[[["self"]],["typeid"]]],[11,"try_into","","",103,[[["self"]],["result"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"from","futures::lock","",104,[[["t"]],["t"]]],[11,"into","","",104,[[["self"]],["u"]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"get_type_id","","",104,[[["self"]],["typeid"]]],[11,"try_into","","",104,[[["self"]],["result"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"from","","",105,[[["t"]],["t"]]],[11,"into","","",105,[[["self"]],["u"]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"get_type_id","","",105,[[["self"]],["typeid"]]],[11,"try_into","","",105,[[["self"]],["result"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"from","","",106,[[["t"]],["t"]]],[11,"into","","",106,[[["self"]],["u"]]],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"get_type_id","","",106,[[["self"]],["typeid"]]],[11,"try_into","","",106,[[["self"]],["result"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"from","futures::sink","",107,[[["t"]],["t"]]],[11,"into","","",107,[[["self"]],["u"]]],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"get_type_id","","",107,[[["self"]],["typeid"]]],[11,"try_into","","",107,[[["self"]],["result"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"try_poll","","",107,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",108,[[["t"]],["t"]]],[11,"into","","",108,[[["self"]],["u"]]],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"get_type_id","","",108,[[["self"]],["typeid"]]],[11,"try_into","","",108,[[["self"]],["result"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"try_poll","","",108,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",109,[[["t"]],["t"]]],[11,"into","","",109,[[["self"]],["u"]]],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"get_type_id","","",109,[[["self"]],["typeid"]]],[11,"try_into","","",109,[[["self"]],["result"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"try_poll","","",109,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",110,[[["t"]],["t"]]],[11,"into","","",110,[[["self"]],["u"]]],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"get_type_id","","",110,[[["self"]],["typeid"]]],[11,"try_into","","",110,[[["self"]],["result"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"try_poll","","",110,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",111,[[["t"]],["t"]]],[11,"into","","",111,[[["self"]],["u"]]],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"get_type_id","","",111,[[["self"]],["typeid"]]],[11,"try_into","","",111,[[["self"]],["result"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"try_poll_next","","",111,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",112,[[["t"]],["t"]]],[11,"into","","",112,[[["self"]],["u"]]],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"get_type_id","","",112,[[["self"]],["typeid"]]],[11,"try_into","","",112,[[["self"]],["result"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"try_poll_next","","",112,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",113,[[["t"]],["t"]]],[11,"into","","",113,[[["self"]],["u"]]],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"get_type_id","","",113,[[["self"]],["typeid"]]],[11,"try_into","","",113,[[["self"]],["result"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"try_poll_next","","",113,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",114,[[["t"]],["t"]]],[11,"into","","",114,[[["self"]],["u"]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"get_type_id","","",114,[[["self"]],["typeid"]]],[11,"try_into","","",114,[[["self"]],["result"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"from","","",115,[[["t"]],["t"]]],[11,"into","","",115,[[["self"]],["u"]]],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"get_type_id","","",115,[[["self"]],["typeid"]]],[11,"try_into","","",115,[[["self"]],["result"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"to_string","","",116,[[["self"]],["string"]]],[11,"from","","",116,[[["t"]],["t"]]],[11,"into","","",116,[[["self"]],["u"]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"get_type_id","","",116,[[["self"]],["typeid"]]],[11,"try_into","","",116,[[["self"]],["result"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"from","","",117,[[["t"]],["t"]]],[11,"into","","",117,[[["self"]],["u"]]],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"get_type_id","","",117,[[["self"]],["typeid"]]],[11,"try_into","","",117,[[["self"]],["result"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"try_poll_next","","",117,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","futures::stream","",118,[[["t"]],["t"]]],[11,"into","","",118,[[["self"]],["u"]]],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"get_type_id","","",118,[[["self"]],["typeid"]]],[11,"try_into","","",118,[[["self"]],["result"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"try_poll_next","","",118,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",119,[[["t"]],["t"]]],[11,"into","","",119,[[["self"]],["u"]]],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"get_type_id","","",119,[[["self"]],["typeid"]]],[11,"try_into","","",119,[[["self"]],["result"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"try_poll_next","","",119,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",120,[[["t"]],["t"]]],[11,"into","","",120,[[["self"]],["u"]]],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"get_type_id","","",120,[[["self"]],["typeid"]]],[11,"try_into","","",120,[[["self"]],["result"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"try_poll_next","","",120,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",121,[[["t"]],["t"]]],[11,"into","","",121,[[["self"]],["u"]]],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"get_type_id","","",121,[[["self"]],["typeid"]]],[11,"try_into","","",121,[[["self"]],["result"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"try_poll_next","","",121,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",122,[[["t"]],["t"]]],[11,"into","","",122,[[["self"]],["u"]]],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"get_type_id","","",122,[[["self"]],["typeid"]]],[11,"try_into","","",122,[[["self"]],["result"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"try_poll_next","","",122,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",123,[[["t"]],["t"]]],[11,"into","","",123,[[["self"]],["u"]]],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"get_type_id","","",123,[[["self"]],["typeid"]]],[11,"try_into","","",123,[[["self"]],["result"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"try_poll_next","","",123,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",124,[[["t"]],["t"]]],[11,"into","","",124,[[["self"]],["u"]]],[11,"try_from","","",124,[[["u"]],["result"]]],[11,"borrow","","",124,[[["self"]],["t"]]],[11,"get_type_id","","",124,[[["self"]],["typeid"]]],[11,"try_into","","",124,[[["self"]],["result"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]],[11,"try_poll_next","","",124,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",125,[[["t"]],["t"]]],[11,"into","","",125,[[["self"]],["u"]]],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"get_type_id","","",125,[[["self"]],["typeid"]]],[11,"try_into","","",125,[[["self"]],["result"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"try_poll_next","","",125,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",126,[[["t"]],["t"]]],[11,"into","","",126,[[["self"]],["u"]]],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"get_type_id","","",126,[[["self"]],["typeid"]]],[11,"try_into","","",126,[[["self"]],["result"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"try_poll_next","","",126,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",127,[[["t"]],["t"]]],[11,"into","","",127,[[["self"]],["u"]]],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"get_type_id","","",127,[[["self"]],["typeid"]]],[11,"try_into","","",127,[[["self"]],["result"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"try_poll","","",127,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",128,[[["t"]],["t"]]],[11,"into","","",128,[[["self"]],["u"]]],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"get_type_id","","",128,[[["self"]],["typeid"]]],[11,"try_into","","",128,[[["self"]],["result"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"try_poll_next","","",128,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",129,[[["t"]],["t"]]],[11,"into","","",129,[[["self"]],["u"]]],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"get_type_id","","",129,[[["self"]],["typeid"]]],[11,"try_into","","",129,[[["self"]],["result"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"try_poll_next","","",129,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",130,[[["t"]],["t"]]],[11,"into","","",130,[[["self"]],["u"]]],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"get_type_id","","",130,[[["self"]],["typeid"]]],[11,"try_into","","",130,[[["self"]],["result"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"try_poll_next","","",130,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",131,[[["t"]],["t"]]],[11,"into","","",131,[[["self"]],["u"]]],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"get_type_id","","",131,[[["self"]],["typeid"]]],[11,"try_into","","",131,[[["self"]],["result"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"try_poll","","",131,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",132,[[["t"]],["t"]]],[11,"into","","",132,[[["self"]],["u"]]],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"get_type_id","","",132,[[["self"]],["typeid"]]],[11,"try_into","","",132,[[["self"]],["result"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"try_poll","","",132,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",133,[[["t"]],["t"]]],[11,"into","","",133,[[["self"]],["u"]]],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"get_type_id","","",133,[[["self"]],["typeid"]]],[11,"try_into","","",133,[[["self"]],["result"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"from","","",134,[[["t"]],["t"]]],[11,"into","","",134,[[["self"]],["u"]]],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"get_type_id","","",134,[[["self"]],["typeid"]]],[11,"try_into","","",134,[[["self"]],["result"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"try_poll_next","","",134,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",135,[[["t"]],["t"]]],[11,"into","","",135,[[["self"]],["u"]]],[11,"try_from","","",135,[[["u"]],["result"]]],[11,"borrow","","",135,[[["self"]],["t"]]],[11,"get_type_id","","",135,[[["self"]],["typeid"]]],[11,"try_into","","",135,[[["self"]],["result"]]],[11,"borrow_mut","","",135,[[["self"]],["t"]]],[11,"from","","",136,[[["t"]],["t"]]],[11,"into","","",136,[[["self"]],["u"]]],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"get_type_id","","",136,[[["self"]],["typeid"]]],[11,"try_into","","",136,[[["self"]],["result"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"try_poll_next","","",136,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",137,[[["t"]],["t"]]],[11,"into","","",137,[[["self"]],["u"]]],[11,"try_from","","",137,[[["u"]],["result"]]],[11,"borrow","","",137,[[["self"]],["t"]]],[11,"get_type_id","","",137,[[["self"]],["typeid"]]],[11,"try_into","","",137,[[["self"]],["result"]]],[11,"borrow_mut","","",137,[[["self"]],["t"]]],[11,"try_poll_next","","",137,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",138,[[["t"]],["t"]]],[11,"into","","",138,[[["self"]],["u"]]],[11,"try_from","","",138,[[["u"]],["result"]]],[11,"borrow","","",138,[[["self"]],["t"]]],[11,"get_type_id","","",138,[[["self"]],["typeid"]]],[11,"try_into","","",138,[[["self"]],["result"]]],[11,"borrow_mut","","",138,[[["self"]],["t"]]],[11,"from","","",139,[[["t"]],["t"]]],[11,"into","","",139,[[["self"]],["u"]]],[11,"try_from","","",139,[[["u"]],["result"]]],[11,"borrow","","",139,[[["self"]],["t"]]],[11,"get_type_id","","",139,[[["self"]],["typeid"]]],[11,"try_into","","",139,[[["self"]],["result"]]],[11,"borrow_mut","","",139,[[["self"]],["t"]]],[11,"try_poll_next","","",139,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",140,[[["t"]],["t"]]],[11,"into","","",140,[[["self"]],["u"]]],[11,"try_from","","",140,[[["u"]],["result"]]],[11,"borrow","","",140,[[["self"]],["t"]]],[11,"get_type_id","","",140,[[["self"]],["typeid"]]],[11,"try_into","","",140,[[["self"]],["result"]]],[11,"borrow_mut","","",140,[[["self"]],["t"]]],[11,"try_poll_next","","",140,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",141,[[["t"]],["t"]]],[11,"into","","",141,[[["self"]],["u"]]],[11,"try_from","","",141,[[["u"]],["result"]]],[11,"borrow","","",141,[[["self"]],["t"]]],[11,"get_type_id","","",141,[[["self"]],["typeid"]]],[11,"try_into","","",141,[[["self"]],["result"]]],[11,"borrow_mut","","",141,[[["self"]],["t"]]],[11,"try_poll_next","","",141,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",142,[[["t"]],["t"]]],[11,"into","","",142,[[["self"]],["u"]]],[11,"try_from","","",142,[[["u"]],["result"]]],[11,"borrow","","",142,[[["self"]],["t"]]],[11,"get_type_id","","",142,[[["self"]],["typeid"]]],[11,"try_into","","",142,[[["self"]],["result"]]],[11,"borrow_mut","","",142,[[["self"]],["t"]]],[11,"try_poll_next","","",142,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",143,[[["t"]],["t"]]],[11,"into","","",143,[[["self"]],["u"]]],[11,"try_from","","",143,[[["u"]],["result"]]],[11,"borrow","","",143,[[["self"]],["t"]]],[11,"get_type_id","","",143,[[["self"]],["typeid"]]],[11,"try_into","","",143,[[["self"]],["result"]]],[11,"borrow_mut","","",143,[[["self"]],["t"]]],[11,"try_poll_next","","",143,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",144,[[["t"]],["t"]]],[11,"into","","",144,[[["self"]],["u"]]],[11,"try_from","","",144,[[["u"]],["result"]]],[11,"borrow","","",144,[[["self"]],["t"]]],[11,"get_type_id","","",144,[[["self"]],["typeid"]]],[11,"try_into","","",144,[[["self"]],["result"]]],[11,"borrow_mut","","",144,[[["self"]],["t"]]],[11,"try_poll_next","","",144,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",145,[[["t"]],["t"]]],[11,"into","","",145,[[["self"]],["u"]]],[11,"try_from","","",145,[[["u"]],["result"]]],[11,"borrow","","",145,[[["self"]],["t"]]],[11,"get_type_id","","",145,[[["self"]],["typeid"]]],[11,"try_into","","",145,[[["self"]],["result"]]],[11,"borrow_mut","","",145,[[["self"]],["t"]]],[11,"try_poll_next","","",145,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",146,[[["t"]],["t"]]],[11,"into","","",146,[[["self"]],["u"]]],[11,"try_from","","",146,[[["u"]],["result"]]],[11,"borrow","","",146,[[["self"]],["t"]]],[11,"get_type_id","","",146,[[["self"]],["typeid"]]],[11,"try_into","","",146,[[["self"]],["result"]]],[11,"borrow_mut","","",146,[[["self"]],["t"]]],[11,"from","","",147,[[["t"]],["t"]]],[11,"into","","",147,[[["self"]],["u"]]],[11,"try_from","","",147,[[["u"]],["result"]]],[11,"borrow","","",147,[[["self"]],["t"]]],[11,"get_type_id","","",147,[[["self"]],["typeid"]]],[11,"try_into","","",147,[[["self"]],["result"]]],[11,"borrow_mut","","",147,[[["self"]],["t"]]],[11,"try_poll_next","","",147,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",148,[[["t"]],["t"]]],[11,"into","","",148,[[["self"]],["u"]]],[11,"try_from","","",148,[[["u"]],["result"]]],[11,"borrow","","",148,[[["self"]],["t"]]],[11,"get_type_id","","",148,[[["self"]],["typeid"]]],[11,"try_into","","",148,[[["self"]],["result"]]],[11,"borrow_mut","","",148,[[["self"]],["t"]]],[11,"try_poll_next","","",148,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",149,[[["t"]],["t"]]],[11,"into","","",149,[[["self"]],["u"]]],[11,"try_from","","",149,[[["u"]],["result"]]],[11,"borrow","","",149,[[["self"]],["t"]]],[11,"get_type_id","","",149,[[["self"]],["typeid"]]],[11,"try_into","","",149,[[["self"]],["result"]]],[11,"borrow_mut","","",149,[[["self"]],["t"]]],[11,"try_poll_next","","",149,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",150,[[["t"]],["t"]]],[11,"into","","",150,[[["self"]],["u"]]],[11,"try_from","","",150,[[["u"]],["result"]]],[11,"borrow","","",150,[[["self"]],["t"]]],[11,"get_type_id","","",150,[[["self"]],["typeid"]]],[11,"try_into","","",150,[[["self"]],["result"]]],[11,"borrow_mut","","",150,[[["self"]],["t"]]],[11,"try_poll_next","","",150,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",151,[[["t"]],["t"]]],[11,"into","","",151,[[["self"]],["u"]]],[11,"try_from","","",151,[[["u"]],["result"]]],[11,"borrow","","",151,[[["self"]],["t"]]],[11,"get_type_id","","",151,[[["self"]],["typeid"]]],[11,"try_into","","",151,[[["self"]],["result"]]],[11,"borrow_mut","","",151,[[["self"]],["t"]]],[11,"try_poll_next","","",151,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",152,[[["t"]],["t"]]],[11,"into","","",152,[[["self"]],["u"]]],[11,"try_from","","",152,[[["u"]],["result"]]],[11,"borrow","","",152,[[["self"]],["t"]]],[11,"get_type_id","","",152,[[["self"]],["typeid"]]],[11,"try_into","","",152,[[["self"]],["result"]]],[11,"borrow_mut","","",152,[[["self"]],["t"]]],[11,"from","","",153,[[["t"]],["t"]]],[11,"into","","",153,[[["self"]],["u"]]],[11,"try_from","","",153,[[["u"]],["result"]]],[11,"borrow","","",153,[[["self"]],["t"]]],[11,"get_type_id","","",153,[[["self"]],["typeid"]]],[11,"try_into","","",153,[[["self"]],["result"]]],[11,"borrow_mut","","",153,[[["self"]],["t"]]],[11,"from","","",154,[[["t"]],["t"]]],[11,"into","","",154,[[["self"]],["u"]]],[11,"try_from","","",154,[[["u"]],["result"]]],[11,"borrow","","",154,[[["self"]],["t"]]],[11,"get_type_id","","",154,[[["self"]],["typeid"]]],[11,"try_into","","",154,[[["self"]],["result"]]],[11,"borrow_mut","","",154,[[["self"]],["t"]]],[11,"try_poll_next","","",154,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",155,[[["t"]],["t"]]],[11,"into","","",155,[[["self"]],["u"]]],[11,"try_from","","",155,[[["u"]],["result"]]],[11,"borrow","","",155,[[["self"]],["t"]]],[11,"get_type_id","","",155,[[["self"]],["typeid"]]],[11,"try_into","","",155,[[["self"]],["result"]]],[11,"borrow_mut","","",155,[[["self"]],["t"]]],[11,"to_string","","",23,[[["self"]],["string"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"from","","",156,[[["t"]],["t"]]],[11,"into","","",156,[[["self"]],["u"]]],[11,"try_from","","",156,[[["u"]],["result"]]],[11,"borrow","","",156,[[["self"]],["t"]]],[11,"get_type_id","","",156,[[["self"]],["typeid"]]],[11,"try_into","","",156,[[["self"]],["result"]]],[11,"borrow_mut","","",156,[[["self"]],["t"]]],[11,"try_poll","","",156,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",157,[[["t"]],["t"]]],[11,"into","","",157,[[["self"]],["u"]]],[11,"try_from","","",157,[[["u"]],["result"]]],[11,"borrow","","",157,[[["self"]],["t"]]],[11,"get_type_id","","",157,[[["self"]],["typeid"]]],[11,"try_into","","",157,[[["self"]],["result"]]],[11,"borrow_mut","","",157,[[["self"]],["t"]]],[11,"try_poll","","",157,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",158,[[["t"]],["t"]]],[11,"into","","",158,[[["self"]],["u"]]],[11,"try_from","","",158,[[["u"]],["result"]]],[11,"borrow","","",158,[[["self"]],["t"]]],[11,"get_type_id","","",158,[[["self"]],["typeid"]]],[11,"try_into","","",158,[[["self"]],["result"]]],[11,"borrow_mut","","",158,[[["self"]],["t"]]],[11,"try_poll_next","","",158,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",159,[[["t"]],["t"]]],[11,"into","","",159,[[["self"]],["u"]]],[11,"try_from","","",159,[[["u"]],["result"]]],[11,"borrow","","",159,[[["self"]],["t"]]],[11,"get_type_id","","",159,[[["self"]],["typeid"]]],[11,"try_into","","",159,[[["self"]],["result"]]],[11,"borrow_mut","","",159,[[["self"]],["t"]]],[11,"try_poll","","",159,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",160,[[["t"]],["t"]]],[11,"into","","",160,[[["self"]],["u"]]],[11,"try_from","","",160,[[["u"]],["result"]]],[11,"borrow","","",160,[[["self"]],["t"]]],[11,"get_type_id","","",160,[[["self"]],["typeid"]]],[11,"try_into","","",160,[[["self"]],["result"]]],[11,"borrow_mut","","",160,[[["self"]],["t"]]],[11,"try_poll_next","","",160,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",161,[[["t"]],["t"]]],[11,"into","","",161,[[["self"]],["u"]]],[11,"try_from","","",161,[[["u"]],["result"]]],[11,"borrow","","",161,[[["self"]],["t"]]],[11,"get_type_id","","",161,[[["self"]],["typeid"]]],[11,"try_into","","",161,[[["self"]],["result"]]],[11,"borrow_mut","","",161,[[["self"]],["t"]]],[11,"try_poll_next","","",161,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",162,[[["t"]],["t"]]],[11,"into","","",162,[[["self"]],["u"]]],[11,"try_from","","",162,[[["u"]],["result"]]],[11,"borrow","","",162,[[["self"]],["t"]]],[11,"get_type_id","","",162,[[["self"]],["typeid"]]],[11,"try_into","","",162,[[["self"]],["result"]]],[11,"borrow_mut","","",162,[[["self"]],["t"]]],[11,"try_poll","","",162,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",163,[[["t"]],["t"]]],[11,"into","","",163,[[["self"]],["u"]]],[11,"try_from","","",163,[[["u"]],["result"]]],[11,"borrow","","",163,[[["self"]],["t"]]],[11,"get_type_id","","",163,[[["self"]],["typeid"]]],[11,"try_into","","",163,[[["self"]],["result"]]],[11,"borrow_mut","","",163,[[["self"]],["t"]]],[11,"try_poll_next","","",163,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","futures::task","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"from","","",164,[[["t"]],["t"]]],[11,"into","","",164,[[["self"]],["u"]]],[11,"try_from","","",164,[[["u"]],["result"]]],[11,"borrow","","",164,[[["self"]],["t"]]],[11,"get_type_id","","",164,[[["self"]],["typeid"]]],[11,"try_into","","",164,[[["self"]],["result"]]],[11,"borrow_mut","","",164,[[["self"]],["t"]]],[11,"from","","",165,[[["t"]],["t"]]],[11,"into","","",165,[[["self"]],["u"]]],[11,"to_owned","","",165,[[["self"]],["t"]]],[11,"clone_into","","",165,N],[11,"try_from","","",165,[[["u"]],["result"]]],[11,"borrow","","",165,[[["self"]],["t"]]],[11,"get_type_id","","",165,[[["self"]],["typeid"]]],[11,"try_into","","",165,[[["self"]],["result"]]],[11,"borrow_mut","","",165,[[["self"]],["t"]]],[11,"from","","",166,[[["t"]],["t"]]],[11,"into","","",166,[[["self"]],["u"]]],[11,"to_owned","","",166,[[["self"]],["t"]]],[11,"clone_into","","",166,N],[11,"try_from","","",166,[[["u"]],["result"]]],[11,"borrow","","",166,[[["self"]],["t"]]],[11,"get_type_id","","",166,[[["self"]],["typeid"]]],[11,"try_into","","",166,[[["self"]],["result"]]],[11,"borrow_mut","","",166,[[["self"]],["t"]]],[11,"from","","",167,[[["t"]],["t"]]],[11,"into","","",167,[[["self"]],["u"]]],[11,"try_from","","",167,[[["u"]],["result"]]],[11,"borrow","","",167,[[["self"]],["t"]]],[11,"get_type_id","","",167,[[["self"]],["typeid"]]],[11,"try_into","","",167,[[["self"]],["result"]]],[11,"borrow_mut","","",167,[[["self"]],["t"]]],[11,"from","","",168,[[["t"]],["t"]]],[11,"into","","",168,[[["self"]],["u"]]],[11,"try_from","","",168,[[["u"]],["result"]]],[11,"borrow","","",168,[[["self"]],["t"]]],[11,"get_type_id","","",168,[[["self"]],["typeid"]]],[11,"try_into","","",168,[[["self"]],["result"]]],[11,"borrow_mut","","",168,[[["self"]],["t"]]],[11,"description","futures::io","",90,[[["self"]],["str"]]],[11,"cause","","",90,[[["self"]],["option",["error"]]]],[11,"from","","",90,[[["intoinnererror"]],["error"]]],[11,"from","","Converts an [`ErrorKind`] into an [`Error`].",90,[[["errorkind"]],["error"]]],[11,"from","","Converts a [`NulError`] into a [`io::Error`].",90,[[["nulerror"]],["error"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",10,[[["self"],["errorkind"]],["option",["ordering"]]]],[11,"cmp","","",10,[[["self"],["errorkind"]],["ordering"]]],[11,"clone","","",10,[[["self"]],["errorkind"]]],[11,"eq","","",10,[[["self"],["errorkind"]],["bool"]]],[11,"hash","","",10,N],[11,"clone","futures::task","",165,[[["self"]],["waker"]]],[11,"clone","","",24,[[["self"]],["poll"]]],[11,"clone","","",166,[[["self"]],["localwaker"]]],[11,"partial_cmp","","",24,[[["self"],["poll"]],["option",["ordering"]]]],[11,"lt","","",24,[[["self"],["poll"]],["bool"]]],[11,"le","","",24,[[["self"],["poll"]],["bool"]]],[11,"gt","","",24,[[["self"],["poll"]],["bool"]]],[11,"ge","","",24,[[["self"],["poll"]],["bool"]]],[11,"cmp","","",24,[[["self"],["poll"]],["ordering"]]],[11,"hash","","",24,N],[11,"eq","","",24,[[["self"],["poll"]],["bool"]]],[11,"ne","","",24,[[["self"],["poll"]],["bool"]]],[11,"from","","Converts a `LocalWaker` into a `Waker`.",165,[[["localwaker"]],["waker"]]],[11,"from","","",24,[[["t"]],["poll"]]],[11,"fmt","","",165,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",166,[[["self"],["formatter"]],["result",["error"]]]],[11,"into_result","","",24,[[["self"]],["result"]]],[11,"from_error","","",24,N],[11,"from_ok","","",24,N],[11,"into_result","","",24,[[["self"]],["result"]]],[11,"from_error","","",24,N],[11,"from_ok","","",24,N],[11,"drop","","",165,N],[11,"from","","",165,[[["arc"]],["waker"]]],[11,"drop","futures::lock","",106,N],[11,"drop","","",105,N],[11,"drop","futures::future","",77,N],[11,"drop","futures::stream","",148,N],[11,"default","","",147,[[],["futuresordered"]]],[11,"default","","",148,[[],["futuresunordered"]]],[11,"poll_ready","futures::sink","",117,[[["pin",["buffer"]],["localwaker"]],["poll",["result"]]]],[11,"start_send","","",117,N],[11,"poll_flush","","",117,[[["pin",["buffer"]],["localwaker"]],["poll",["result"]]]],[11,"poll_close","","",117,[[["pin",["buffer"]],["localwaker"]],["poll",["result"]]]],[11,"poll_ready","futures::future","",80,[[["pin",["flattensink"]],["localwaker"]],["poll",["result"]]]],[11,"start_send","","",80,N],[11,"poll_flush","","",80,[[["pin",["flattensink"]],["localwaker"]],["poll",["result"]]]],[11,"poll_close","","",80,[[["pin",["flattensink"]],["localwaker"]],["poll",["result"]]]],[11,"poll_ready","futures::stream","",149,[[["pin",["bufferunordered"]],["localwaker"]],["poll",["result"]]]],[11,"start_send","","",149,N],[11,"poll_flush","","",149,[[["pin",["bufferunordered"]],["localwaker"]],["poll",["result"]]]],[11,"poll_close","","",149,[[["pin",["bufferunordered"]],["localwaker"]],["poll",["result"]]]],[11,"poll_ready","futures::sink","",111,[[["pin",["sinkerrinto"]],["localwaker"]],["poll",["result"]]]],[11,"start_send","","",111,N],[11,"poll_flush","","",111,[[["pin",["sinkerrinto"]],["localwaker"]],["poll",["result"]]]],[11,"poll_close","","",111,[[["pin",["sinkerrinto"]],["localwaker"]],["poll",["result"]]]],[11,"poll_ready","futures::stream","",150,[[["pin",["buffered"]],["localwaker"]],["poll",["result"]]]],[11,"start_send","","",150,N],[11,"poll_flush","","",150,[[["pin",["buffered"]],["localwaker"]],["poll",["result"]]]],[11,"poll_close","","",150,[[["pin",["buffered"]],["localwaker"]],["poll",["result"]]]],[11,"poll_ready","futures::sink","",115,[[["pin",["drain"]],["localwaker"]],["poll",["result"]]]],[11,"start_send","","",115,N],[11,"poll_flush","","",115,[[["pin",["drain"]],["localwaker"]],["poll",["result"]]]],[11,"poll_close","","",115,[[["pin",["drain"]],["localwaker"]],["poll",["result"]]]],[11,"poll_ready","","",114,[[["pin",["fanout"]],["localwaker"]],["poll",["result"]]]],[11,"start_send","","",114,N],[11,"poll_flush","","",114,[[["pin",["fanout"]],["localwaker"]],["poll",["result"]]]],[11,"poll_close","","",114,[[["pin",["fanout"]],["localwaker"]],["poll",["result"]]]],[11,"poll_ready","","",112,[[["pin",["sinkmaperr"]],["localwaker"]],["poll",["result"]]]],[11,"start_send","","",112,N],[11,"poll_flush","","",112,[[["pin",["sinkmaperr"]],["localwaker"]],["poll",["result"]]]],[11,"poll_close","","",112,[[["pin",["sinkmaperr"]],["localwaker"]],["poll",["result"]]]],[11,"poll_ready","futures::stream","",155,[[["pin",["splitsink"]],["localwaker"]],["poll",["result"]]]],[11,"start_send","","",155,N],[11,"poll_flush","","",155,[[["pin",["splitsink"]],["localwaker"]],["poll",["result"]]]],[11,"poll_close","","",155,[[["pin",["splitsink"]],["localwaker"]],["poll",["result"]]]],[11,"poll_ready","","",134,[[["pin",["fuse"]],["localwaker"]],["poll",["result"]]]],[11,"start_send","","",134,N],[11,"poll_flush","","",134,[[["pin",["fuse"]],["localwaker"]],["poll",["result"]]]],[11,"poll_close","","",134,[[["pin",["fuse"]],["localwaker"]],["poll",["result"]]]],[11,"poll_ready","futures::sink","",113,[[["pin",["with"]],["localwaker"]],["poll",["result"]]]],[11,"start_send","","",113,N],[11,"poll_flush","","",113,[[["pin",["with"]],["localwaker"]],["poll",["result"]]]],[11,"poll_close","","",113,[[["pin",["with"]],["localwaker"]],["poll",["result"]]]],[11,"as_mut","futures::io","",101,N],[11,"deref","futures::task","",167,[[["self"]],["localwaker"]]],[11,"deref","futures::lock","",106,[[["self"]],["t"]]],[11,"deref_mut","","",106,[[["self"]],["t"]]],[11,"read","futures::io","",93,N],[11,"read_to_end","","",93,[[["self"],["vec"]],["result",["usize","error"]]]],[11,"read_to_string","","",93,[[["self"],["string"]],["result",["usize","error"]]]],[11,"read_exact","","",93,N],[11,"read","futures::compat","",41,N],[11,"fmt","futures::sink","",116,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",23,[[["self"]],["str"]]],[11,"partial_cmp","futures::io","",93,[[["self"],["allowstdio"]],["option",["ordering"]]]],[11,"lt","","",93,[[["self"],["allowstdio"]],["bool"]]],[11,"le","","",93,[[["self"],["allowstdio"]],["bool"]]],[11,"gt","","",93,[[["self"],["allowstdio"]],["bool"]]],[11,"ge","","",93,[[["self"],["allowstdio"]],["bool"]]],[11,"from_iter","futures::stream","",148,[[["i"]],["futuresunordered"]]],[11,"from_iter","","",147,[[["t"]],["futuresordered"]]],[11,"fmt","","",122,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::io","",98,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",102,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",59,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::sink","",111,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",139,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",80,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::sink","",108,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::io","",95,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",130,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",134,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",85,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",141,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",70,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",125,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",73,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::io","",101,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",57,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::io","",93,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",135,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",156,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",67,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::lock","",105,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",78,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",162,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",150,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",88,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",153,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",144,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",131,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::lock","",106,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",77,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::io","",103,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",160,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::io","",99,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",137,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",155,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",152,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",79,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",145,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",69,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::lock","",104,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::sink","",114,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",129,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::io","",100,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",75,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",138,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::sink","",116,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",148,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",56,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",151,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::io","",94,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::sink","",107,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",126,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",58,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::sink","",109,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",72,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::sink","",117,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",82,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",133,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::task","",167,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::sink","",112,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",68,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",154,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",158,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",143,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",63,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",132,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",147,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",123,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::io","",96,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::sink","",110,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",81,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",121,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::compat","",44,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",157,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",83,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",161,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",61,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",149,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",66,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",146,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",86,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::compat","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",84,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::compat","",42,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",142,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",163,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",140,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::sink","",115,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",159,[[["self"],["formatter"]],["result",["error"]]]],[11,"execute","futures::compat","",41,[[["self"],["fut"]],["result",["executeerror"]]]],[11,"poll","","",41,[[["self"]],["result",["async"]]]],[11,"write","","",41,N],[11,"flush","","",41,[[["self"]],["result",["error"]]]],[11,"write","futures::io","",93,N],[11,"flush","","",93,[[["self"]],["result",["error"]]]],[11,"write_all","","",93,N],[11,"write_fmt","","",93,[[["self"],["arguments"]],["result",["error"]]]],[11,"prepare_uninitialized_buffer","futures::compat","",41,N],[11,"eq","futures::future","",73,[[["self"],["aborted"]],["bool"]]],[11,"eq","futures::io","",93,[[["self"],["allowstdio"]],["bool"]]],[11,"ne","","",93,[[["self"],["allowstdio"]],["bool"]]],[11,"hash","","",93,N],[11,"spawn_local_obj","futures::stream","",148,[[["self"],["localfutureobj"]],["result",["spawnerror"]]]],[11,"spawn_obj","futures::compat","",44,[[["self"],["futureobj"]],["result",["spawnerror"]]]],[11,"status","","",44,[[["self"]],["result",["spawnerror"]]]],[11,"spawn_obj","","",43,[[["self"],["futureobj"]],["result",["spawnerror"]]]],[11,"spawn_obj","futures::stream","",148,[[["self"],["futureobj"]],["result",["spawnerror"]]]],[11,"is_terminated","","",129,[[["self"]],["bool"]]],[11,"is_terminated","","",126,[[["self"]],["bool"]]],[11,"is_terminated","","",139,[[["self"]],["bool"]]],[11,"is_terminated","","",161,[[["self"]],["bool"]]],[11,"is_terminated","","",142,[[["self"]],["bool"]]],[11,"is_terminated","","",149,[[["self"]],["bool"]]],[11,"is_terminated","","",134,[[["self"]],["bool"]]],[11,"is_terminated","","",140,[[["self"]],["bool"]]],[11,"is_terminated","","",145,[[["self"]],["bool"]]],[11,"is_terminated","","",128,[[["self"]],["bool"]]],[11,"is_terminated","","",146,[[["self"]],["bool"]]],[11,"is_terminated","","",137,[[["self"]],["bool"]]],[11,"is_terminated","","",158,[[["self"]],["bool"]]],[11,"is_terminated","","",125,[[["self"]],["bool"]]],[11,"is_terminated","","",136,[[["self"]],["bool"]]],[11,"is_terminated","futures::future","",59,[[["self"]],["bool"]]],[11,"is_terminated","futures::stream","",141,[[["self"]],["bool"]]],[11,"is_terminated","","",130,[[["self"]],["bool"]]],[11,"is_terminated","","",148,[[["self"]],["bool"]]],[11,"poll_write","futures::io","",103,N],[11,"poll_vectored_write","","",103,N],[11,"poll_flush","","",103,[[["self"],["localwaker"]],["poll",["result"]]]],[11,"poll_close","","",103,[[["self"],["localwaker"]],["poll",["result"]]]],[11,"poll_write","","",93,N],[11,"poll_flush","","",93,[[["self"],["localwaker"]],["poll",["result"]]]],[11,"poll_close","","",93,[[["self"],["localwaker"]],["poll",["result"]]]],[11,"poll_write","futures::compat","",42,N],[11,"poll_flush","","",42,[[["self"],["localwaker"]],["poll",["result"]]]],[11,"poll_close","","",42,[[["self"],["localwaker"]],["poll",["result"]]]],[11,"poll","futures::future","",57,[[["pin",["ready"]],["localwaker"]],["poll"]]],[11,"poll","","",56,[[["pin",["pollfn"]],["localwaker"]],["poll"]]],[11,"poll","futures::sink","",107,[[["pin",["close"]],["localwaker"]],["poll"]]],[11,"poll","futures::io","",98,[[["pin",["readexact"]],["localwaker"]],["poll"]]],[11,"poll","futures::future","",67,[[["pin",["join5"]],["localwaker"]],["poll"]]],[11,"poll","futures::sink","",109,[[["pin",["send"]],["localwaker"]],["poll"]]],[11,"poll","futures::future","",88,[[["pin",["tryjoin4"]],["localwaker"]],["poll"]]],[11,"poll","","",70,[[["pin",["abortable"]],["localwaker"]],["poll"]]],[11,"poll","futures::stream","",156,[[["pin",["trynext"]],["localwaker"]],["poll"]]],[11,"poll","futures::compat","",42,[[["pin",["compat01as03"]],["localwaker"]],["poll"]]],[11,"poll","futures::sink","",108,[[["pin",["flush"]],["localwaker"]],["poll"]]],[11,"poll","futures::stream","",138,[[["pin",["next"]],["localwaker"]],["poll"]]],[11,"poll","futures::future","",54,[[["pin",["empty"]],["localwaker"]],["poll"]]],[11,"poll","futures::stream","",159,[[["pin",["tryfold"]],["localwaker"]],["poll"]]],[11,"poll","futures::io","",96,[[["pin",["flush"]],["localwaker"]],["poll"]]],[11,"poll","futures::future","",79,[[["pin",["errinto"]],["localwaker"]],["poll"]]],[11,"poll","futures::io","",95,[[["pin",["copyinto"]],["localwaker"]],["poll"]]],[11,"poll","futures::future","",60,[[["pin",["flatten"]],["localwaker"]],["poll"]]],[11,"poll","","",65,[[["pin",["join3"]],["localwaker"]],["poll"]]],[11,"poll","futures::stream","",157,[[["pin",["tryforeach"]],["localwaker"]],["poll"]]],[11,"poll","futures::future","",89,[[["pin",["tryjoin5"]],["localwaker"]],["poll"]]],[11,"poll","futures::stream","",135,[[["pin",["streamfuture"]],["localwaker"]],["poll"]]],[11,"poll","","",133,[[["pin",["foreach"]],["localwaker"]],["poll"]]],[11,"poll","futures::future","",58,[[["pin",["optionfuture"]],["localwaker"]],["poll"]]],[11,"poll","","",74,[[["pin",["remote"]],["localwaker"]],["poll"]]],[11,"poll","futures::stream","",131,[[["pin",["fold"]],["localwaker"]],["poll"]]],[11,"poll","","",162,[[["pin",["trycollect"]],["localwaker"]],["poll"]]],[11,"poll","futures::future","",61,[[["pin",["fuse"]],["localwaker"]],["poll"]]],[11,"poll","","",77,[[["pin",["shared"]],["localwaker"]],["poll"]]],[11,"poll","","",75,[[["pin",["remotehandle"]],["localwaker"]],["poll"]]],[11,"poll","futures::stream","",132,[[["pin",["forward"]],["localwaker"]],["poll"]]],[11,"poll","futures::future","",83,[[["pin",["mapok"]],["localwaker"]],["poll"]]],[11,"poll","","",84,[[["pin",["orelse"]],["localwaker"]],["poll"]]],[11,"poll","","",86,[[["pin",["tryjoin"]],["localwaker"]],["poll"]]],[11,"poll","","",68,[[["pin",["map"]],["localwaker"]],["poll"]]],[11,"poll","","",78,[[["pin",["andthen"]],["localwaker"]],["poll"]]],[11,"poll","","",55,[[["pin",["lazy"]],["localwaker"]],["poll"]]],[11,"poll","futures::io","",97,[[["pin",["read"]],["localwaker"]],["poll"]]],[11,"poll","futures::future","",69,[[["pin",["then"]],["localwaker"]],["poll"]]],[11,"poll","","",87,[[["pin",["tryjoin3"]],["localwaker"]],["poll"]]],[11,"poll","futures::io","",100,[[["pin",["readtoend"]],["localwaker"]],["poll"]]],[11,"poll","","",102,[[["pin",["writeall"]],["localwaker"]],["poll",["result"]]]],[11,"poll","futures::future","",85,[[["pin",["unwraporelse"]],["localwaker"]],["poll"]]],[11,"poll","futures::stream","",127,[[["pin",["concat"]],["localwaker"]],["poll"]]],[11,"poll","futures::sink","",110,[[["pin",["sendall"]],["localwaker"]],["poll"]]],[11,"poll","futures::future","",64,[[["pin",["join"]],["localwaker"]],["poll"]]],[11,"poll","","",7,[[["pin",["maybedone"]],["localwaker"]],["poll"]]],[11,"poll","futures::lock","",105,[[["pin",["mutexlockfuture"]],["localwaker"]],["poll"]]],[11,"poll","futures::future","",81,[[["pin",["intofuture"]],["localwaker"]],["poll"]]],[11,"poll","","",76,[[["pin",["catchunwind"]],["localwaker"]],["poll"]]],[11,"poll","","",62,[[["pin",["inspect"]],["localwaker"]],["poll"]]],[11,"poll","futures::io","",94,[[["pin",["close"]],["localwaker"]],["poll"]]],[11,"poll","futures::stream","",153,[[["pin",["collect"]],["localwaker"]],["poll"]]],[11,"poll","futures::future","",66,[[["pin",["join4"]],["localwaker"]],["poll"]]],[11,"poll","","",82,[[["pin",["maperr"]],["localwaker"]],["poll"]]],[11,"poll","futures::compat","",41,[[["self"]],["result",["async"]]]],[11,"start_send","","",41,N],[11,"poll_complete","","",41,[[["self"]],["result",["async"]]]],[11,"close","","",41,[[["self"]],["result",["async"]]]],[11,"as_ref","futures::io","",101,N],[11,"poll_next","futures::stream","",146,[[["pin",["zip"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",163,[[["pin",["trybufferunordered"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",141,[[["pin",["skip"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",130,[[["pin",["flatten"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",129,[[["pin",["filtermap"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",140,[[["pin",["select"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",137,[[["pin",["map"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",150,[[["pin",["buffered"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",126,[[["pin",["chain"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",160,[[["pin",["tryskipwhile"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","futures::sink","",113,[[["pin",["with"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","futures::stream","",121,[[["pin",["repeat"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",149,[[["pin",["bufferunordered"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",161,[[["pin",["intostream"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",122,[[["pin",["empty"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",128,[[["pin",["filter"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",145,[[["pin",["then"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",134,[[["pin",["fuse"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",151,[[["pin",["catchunwind"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",125,[[["pin",["unfold"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",139,[[["pin",["peekable"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","futures::sink","",111,[[["pin",["sinkerrinto"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","futures::stream","",152,[[["pin",["chunks"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",158,[[["pin",["errinto"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",120,[[["pin",["iter"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",148,[[["pin",["futuresunordered"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","futures::sink","",112,[[["pin",["sinkmaperr"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","futures::stream","",147,[[["pin",["futuresordered"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",123,[[["pin",["once"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","futures::compat","",42,[[["pin",["compat01as03"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","futures::stream","",144,[[["pin",["takewhile"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",142,[[["pin",["skipwhile"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",124,[[["pin",["pollfn"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","futures::future","",59,[[["pin",["flattenstream"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","futures::sink","",117,[[["pin",["buffer"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","futures::stream","",136,[[["pin",["inspect"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",154,[[["pin",["splitstream"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","futures::future","",63,[[["pin",["intostream"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","futures::stream","",143,[[["pin",["take"]],["localwaker"]],["poll",["option"]]]],[11,"from","futures::future","",58,[[["option"]],["optionfuture"]]],[11,"clone","futures::io","",93,[[["self"]],["allowstdio"]]],[11,"clone","futures::compat","",43,[[["self"]],["executor01as03"]]],[11,"clone","futures::future","",58,[[["self"]],["optionfuture"]]],[11,"clone","futures::compat","",41,[[["self"]],["compat"]]],[11,"clone","futures::future","",57,[[["self"]],["ready"]]],[11,"clone","","",70,[[["self"]],["abortable"]]],[11,"clone","futures::compat","",44,[[["self"]],["tokiodefaultspawner"]]],[11,"clone","futures::future","",71,[[["self"]],["aborthandle"]]],[11,"clone","","",73,[[["self"]],["aborted"]]],[11,"clone","","",77,[[["self"]],["shared"]]],[11,"is_terminated","","",79,[[["self"]],["bool"]]],[11,"is_terminated","futures::stream","",131,[[["self"]],["bool"]]],[11,"is_terminated","futures::future","",60,[[["self"]],["bool"]]],[11,"is_terminated","futures::lock","",105,[[["self"]],["bool"]]],[11,"is_terminated","futures::stream","",133,[[["self"]],["bool"]]],[11,"is_terminated","futures::future","",77,[[["self"]],["bool"]]],[11,"is_terminated","futures::stream","",162,[[["self"]],["bool"]]],[11,"is_terminated","","",153,[[["self"]],["bool"]]],[11,"is_terminated","futures::future","",68,[[["self"]],["bool"]]],[11,"is_terminated","","",81,[[["self"]],["bool"]]],[11,"is_terminated","futures::stream","",156,[[["self"]],["bool"]]],[11,"is_terminated","futures::future","",69,[[["self"]],["bool"]]],[11,"is_terminated","","",82,[[["self"]],["bool"]]],[11,"is_terminated","","",57,[[["self"]],["bool"]]],[11,"is_terminated","","",7,[[["self"]],["bool"]]],[11,"is_terminated","","",78,[[["self"]],["bool"]]],[11,"is_terminated","futures::stream","",159,[[["self"]],["bool"]]],[11,"is_terminated","futures::future","",62,[[["self"]],["bool"]]],[11,"is_terminated","futures::stream","",138,[[["self"]],["bool"]]],[11,"is_terminated","futures::future","",83,[[["self"]],["bool"]]],[11,"is_terminated","","",61,[[["self"]],["bool"]]],[11,"is_terminated","futures::stream","",135,[[["self"]],["bool"]]],[11,"is_terminated","futures::future","",84,[[["self"]],["bool"]]],[11,"is_terminated","futures::stream","",132,[[["self"]],["bool"]]],[11,"is_terminated","futures::future","",55,[[["self"]],["bool"]]],[11,"is_terminated","","",85,[[["self"]],["bool"]]],[11,"is_terminated","","",54,[[["self"]],["bool"]]],[11,"cmp","futures::io","",93,[[["self"],["allowstdio"]],["ordering"]]],[11,"poll_read","","",93,N],[11,"initializer","futures::compat","",42,[[["self"]],["initializer"]]],[11,"poll_read","","",42,N],[11,"poll_read","futures::io","",99,N],[11,"poll_vectored_read","","",99,N],[11,"shutdown","futures::compat","",41,[[["self"]],["result",["async","error"]]]],[11,"poll_next","futures::stream","",119,[[["pin",["localstreamobj"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",118,[[["pin",["streamobj"]],["localwaker"]],["poll",["option"]]]],[11,"poll","futures::future","",53,[[["pin",["localfutureobj"]],["localwaker"]],["poll"]]],[11,"poll","","",52,[[["pin",["futureobj"]],["localwaker"]],["poll"]]],[11,"from","","",52,[[["pin",["box"]]],["futureobj"]]],[11,"from","futures::stream","",119,[[["box"]],["localstreamobj"]]],[11,"from","","",119,[[["pin",["box"]]],["localstreamobj"]]],[11,"from","futures::future","",52,[[["box"]],["futureobj"]]],[11,"from","","",53,[[["pin",["box"]]],["localfutureobj"]]],[11,"from","","",53,[[["box"]],["localfutureobj"]]],[11,"from","","",53,[[["futureobj"]],["localfutureobj"]]],[11,"from","futures::stream","",118,[[["box"]],["streamobj"]]],[11,"from","","",119,[[["streamobj"]],["localstreamobj"]]],[11,"from","","",118,[[["pin",["box"]]],["streamobj"]]],[11,"fmt","futures::future","",52,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::task","",164,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::future","",53,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::task","",168,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::stream","",118,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result",["error"]]]],[11,"drop","futures::future","",53,N],[11,"drop","futures::stream","",119,N],[11,"default","futures::task","",168,[[],["atomicwaker"]]],[11,"from","futures::io","",90,[[["error"]],["error"]]],[11,"eq","futures::channel::mpsc","",39,[[["self"],["trysenderror"]],["bool"]]],[11,"ne","","",39,[[["self"],["trysenderror"]],["bool"]]],[11,"eq","futures::channel::oneshot","",33,[[["self"],["canceled"]],["bool"]]],[11,"eq","futures::channel::mpsc","",38,[[["self"],["senderror"]],["bool"]]],[11,"ne","","",38,[[["self"],["senderror"]],["bool"]]],[11,"poll","futures::channel::oneshot","",31,[[["pin",["receiver"]],["localwaker"]],["poll",["result"]]]],[11,"poll_next","futures::channel::mpsc","",37,[[["pin",["unboundedreceiver"]],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",36,[[["pin",["receiver"]],["localwaker"]],["poll",["option"]]]],[11,"clone","","",35,[[["self"]],["unboundedsender"]]],[11,"clone","","",38,[[["self"]],["senderror"]]],[11,"clone","","",34,[[["self"]],["sender"]]],[11,"clone","futures::channel::oneshot","",33,[[["self"]],["canceled"]]],[11,"clone","futures::channel::mpsc","",39,[[["self"]],["trysenderror"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::channel::oneshot","",33,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::channel::mpsc","",38,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",40,[[["self"]],["str"]]],[11,"description","","",38,[[["self"]],["str"]]],[11,"description","","",39,[[["self"]],["str"]]],[11,"description","futures::channel::oneshot","",33,[[["self"]],["str"]]],[11,"fmt","futures::channel::mpsc","",38,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::channel::oneshot","",31,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::channel::mpsc","",37,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::channel::oneshot","",33,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","futures::channel::mpsc","",40,[[["self"],["formatter"]],["result",["error"]]]],[11,"drop","","",36,N],[11,"drop","futures::channel::oneshot","",31,N],[11,"drop","futures::channel::mpsc","",34,N],[11,"drop","futures::channel::oneshot","",32,N],[11,"poll_ready","futures::channel::mpsc","",34,[[["pin",["sender"]],["localwaker"]],["poll",["result"]]]],[11,"start_send","","",34,[[["pin",["sender"]],["t"]],["result"]]],[11,"poll_flush","","",34,[[["pin",["sender"]],["localwaker"]],["poll",["result"]]]],[11,"poll_close","","",34,[[["pin",["sender"]],["localwaker"]],["poll",["result"]]]],[11,"poll_ready","","",35,[[["pin",["unboundedsender"]],["localwaker"]],["poll",["result"]]]],[11,"start_send","","",35,[[["pin",["unboundedsender"]],["t"]],["result"]]],[11,"poll_flush","","",35,[[["pin",["unboundedsender"]],["localwaker"]],["poll",["result"]]]],[11,"poll_close","","",35,[[["pin",["unboundedsender"]],["localwaker"]],["poll",["result"]]]],[11,"fmt","futures::io","",91,[[["self"],["formatter"]],["result",["error"]]]],[11,"deref","","",92,N],[11,"deref_mut","","",92,N],[11,"default","futures::executor","",49,[[],["localpool"]]],[11,"default","","",51,[[],["threadpoolbuilder"]]],[11,"spawn_local_obj","","",48,[[["self"],["localfutureobj"]],["result",["spawnerror"]]]],[11,"status_local","","",48,[[["self"]],["result",["spawnerror"]]]],[11,"spawn_obj","","",48,[[["self"],["futureobj"]],["result",["spawnerror"]]]],[11,"status","","",48,[[["self"]],["result",["spawnerror"]]]],[11,"spawn_obj","","",50,[[["self"],["futureobj"]],["result",["spawnerror"]]]],[11,"deref","","",45,N],[11,"deref_mut","","",45,N],[11,"clone","","",48,[[["self"]],["localspawner"]]],[11,"clone","","",50,[[["self"]],["threadpool"]]],[11,"next","","",45,[[["self"]],["option"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result",["error"]]]],[11,"drop","","",46,N],[11,"drop","","",50,N],[11,"close","futures::channel::oneshot","Gracefully close this receiver, preventing any subsequent attempts to send to it.",31,N],[11,"try_recv","","Attempts to receive a message outside of the context of a task.",31,[[["self"]],["result",["option","canceled"]]]],[11,"send","","Completes this oneshot with a successful result.",32,[[["self"],["t"]],["result"]]],[11,"poll_cancel","","Polls this `Sender` half to detect whether its associated `Receiver` with has been dropped.",32,[[["self"],["localwaker"]],["poll"]]],[11,"is_canceled","","Tests to see whether this `Sender`'s corresponding `Receiver` has been dropped.",32,[[["self"]],["bool"]]],[11,"try_send","futures::channel::mpsc","Attempts to send a message on this `Sender`, returning the message if there was an error.",34,[[["self"],["t"]],["result",["trysenderror"]]]],[11,"start_send","","Send a message on the channel.",34,[[["self"],["t"]],["result",["senderror"]]]],[11,"poll_ready","","Polls the channel to determine if there is guaranteed capacity to send at least one item without waiting.",34,[[["self"],["localwaker"]],["poll",["result"]]]],[11,"is_closed","","Returns whether this channel is closed without needing a context.",34,[[["self"]],["bool"]]],[11,"close_channel","","Closes this channel from the sender side, preventing any new messages.",34,N],[11,"poll_ready","","Check if the channel is ready to receive a message.",35,[[["self"],["localwaker"]],["poll",["result"]]]],[11,"is_closed","","Returns whether this channel is closed without needing a context.",35,[[["self"]],["bool"]]],[11,"close_channel","","Closes this channel from the sender side, preventing any new messages.",35,N],[11,"start_send","","Send a message on the channel.",35,[[["self"],["t"]],["result",["senderror"]]]],[11,"unbounded_send","","Sends a message along this channel.",35,[[["self"],["t"]],["result",["trysenderror"]]]],[11,"close","","Closes the receiving half of a channel, without dropping it.",36,N],[11,"try_next","","Tries to receive the next message without notifying a context if empty.",36,[[["self"]],["result",["option","tryrecverror"]]]],[11,"close","","Closes the receiving half of the channel, without dropping it.",37,N],[11,"try_next","","Tries to receive the next message without notifying a context if empty.",37,[[["self"]],["result",["option","tryrecverror"]]]],[11,"is_full","","Returns true if this error is a result of the channel being full.",38,[[["self"]],["bool"]]],[11,"is_disconnected","","Returns true if this error is a result of the receiver being dropped.",38,[[["self"]],["bool"]]],[11,"is_full","","Returns true if this error is a result of the channel being full.",39,[[["self"]],["bool"]]],[11,"is_disconnected","","Returns true if this error is a result of the receiver being dropped.",39,[[["self"]],["bool"]]],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",39,[[["self"]],["t"]]],[11,"into_send_error","","Drops the message and converts into a `SendError`.",39,[[["self"]],["senderror"]]],[11,"into_inner","futures::compat","Returns the inner item.",41,[[["self"]],["t"]]],[11,"new","","Creates a new [`Compat`].",41,[[["t"]],["compat"]]],[11,"new","","Wraps a futures 0.1 Future, Stream, AsyncRead, or AsyncWrite object in a futures 0.3-compatible wrapper.",42,[[["t"]],["compat01as03"]]],[11,"into_inner","futures::executor","Convert this `BlockingStream` into the inner `Stream` type.",45,[[["self"]],["s"]]],[11,"new","","Create a new, empty pool of tasks.",49,[[],["localpool"]]],[11,"spawner","","Get a clonable handle to the pool as a [`Spawn`].",49,[[["self"]],["localspawner"]]],[11,"run","","Run all tasks in the pool to completion.",49,N],[11,"run_until","","Runs all the tasks in the pool until the given future completes.",49,N],[11,"new","","Creates a new thread pool with the default configuration.",50,[[],["result",["threadpool","error"]]]],[11,"builder","","Create a default thread pool configuration, which can then be customized.",50,[[],["threadpoolbuilder"]]],[11,"run","","Runs the given future with this thread pool as the default spawner for spawning tasks.",50,N],[11,"new","","Create a default thread pool configuration.",51,[[],["threadpoolbuilder"]]],[11,"pool_size","","Set size of a future ThreadPool",51,[[["self"],["usize"]],["threadpoolbuilder"]]],[11,"stack_size","","Set stack size of threads in the pool.",51,[[["self"],["usize"]],["threadpoolbuilder"]]],[11,"name_prefix","","Set thread name prefix of a future ThreadPool.",51,[[["self"],["s"]],["threadpoolbuilder"]]],[11,"after_start","","Execute the closure `f` immediately after each worker thread is started, but before running any tasks on it.",51,[[["self"],["f"]],["threadpoolbuilder"]]],[11,"before_stop","","Execute closure `f` just prior to shutting down each worker thread.",51,[[["self"],["f"]],["threadpoolbuilder"]]],[11,"create","","Create a `ThreadPool` with the given configuration.",51,[[["self"]],["result",["threadpool","error"]]]],[11,"new","futures::future","Create a `FutureObj` from a custom trait object representation.",52,[[["f"]],["futureobj"]]],[11,"new","","Create a `LocalFutureObj` from a custom trait object representation.",53,[[["f"]],["localfutureobj"]]],[11,"into_future_obj","","Converts the `LocalFutureObj` into a `FutureObj` To make this operation safe one has to ensure that the `UnsafeFutureObj` instance from which this `LocalFutureObj` was created actually implements `Send`.",53,[[["self"]],["futureobj"]]],[11,"output_mut","","Returns an [`Option`] containing a mutable reference to the output of the future. The output of this method will be [`Some`] if and only if the inner future has been completed and `take_output` has not yet been called.",7,[[["pin",["maybedone"]]],["option"]]],[11,"take_output","","Attempt to take the output of a `MaybeDone` without driving it towards completion.",7,[[["pin",["maybedone"]]],["option"]]],[11,"new","","Creates a new `Abortable` future using an existing `AbortRegistration`. `AbortRegistration`s can be acquired through `AbortHandle::new`.",70,[[["fut"],["abortregistration"]],["abortable"]]],[11,"new_pair","","Creates an (`AbortHandle`, `AbortRegistration`) pair which can be used to abort a running future.",71,N],[11,"abort","","Abort the `Abortable` future associated with this handle.",71,N],[11,"forget","","Drops this handle without canceling the underlying future.",75,N],[11,"peek","","Returns [`Some`] containing a reference to this [`Shared`]'s output if it has already been computed by a clone or [`None`] if it hasn't been computed yet or this [`Shared`] already returned its output from `poll`.",77,[[["self"]],["option"]]],[11,"new","futures::io","Creates a new I/O error from a known kind of error as well as an arbitrary error payload.",90,[[["errorkind"],["e"]],["error"]]],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",90,[[],["error"]]],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",90,[[["i32"]],["error"]]],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",90,[[["self"]],["option",["i32"]]]],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",90,[[["self"]],["option",["error"]]]],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error (if any).",90,[[["self"]],["option",["error"]]]],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",90,[[["self"]],["option",["box"]]]],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",90,[[["self"]],["errorkind"]]],[11,"zeroing","","Returns a new `Initializer` which will zero out buffers.",91,[[],["initializer"]]],[11,"nop","","Returns a new `Initializer` which will not zero out buffers.",91,[[],["initializer"]]],[11,"should_initialize","","Indicates if a buffer should be initialized.",91,[[["self"]],["bool"]]],[11,"initialize","","Initializes a buffer if necessary.",91,N],[11,"from_bytes","","",92,N],[11,"from_bytes_mut","","",92,N],[11,"new","","Creates a new `AllowStdIo` from an existing IO object.",93,[[["t"]],["allowstdio"]]],[11,"get_ref","","Returns a reference to the contained IO object.",93,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the contained IO object.",93,[[["self"]],["t"]]],[11,"into_inner","","Consumes self and returns the contained IO object.",93,[[["self"]],["t"]]],[11,"new","","Creates a new window around the buffer `t` defaulting to the entire slice.",101,[[["t"]],["window"]]],[11,"get_ref","","Gets a shared reference to the underlying buffer inside of this `Window`.",101,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable reference to the underlying buffer inside of this `Window`.",101,[[["self"]],["t"]]],[11,"into_inner","","Consumes this `Window`, returning the underlying buffer.",101,[[["self"]],["t"]]],[11,"start","","Returns the starting index of this window into the underlying buffer `T`.",101,[[["self"]],["usize"]]],[11,"end","","Returns the end index of this window into the underlying buffer `T`.",101,[[["self"]],["usize"]]],[11,"set_start","","Changes the starting index of this window to the index specified.",101,[[["self"],["usize"]],["window"]]],[11,"set_end","","Changes the end index of this window to the index specified.",101,[[["self"],["usize"]],["window"]]],[11,"new","futures::lock","Creates a new futures-aware mutex.",104,[[["t"]],["mutex"]]],[11,"try_lock","","Attempt to acquire the lock immediately.",104,[[["self"]],["option",["mutexguard"]]]],[11,"lock","","Acquire the lock asynchronously.",104,[[["self"]],["mutexlockfuture"]]],[11,"get_ref","futures::sink","Get a shared reference to the inner sink.",111,[[["self"]],["si"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",111,[[["self"]],["si"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",111,[[["self"]],["si"]]],[11,"get_ref","","Get a shared reference to the inner sink.",112,[[["self"]],["si"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",112,[[["self"]],["si"]]],[11,"get_pin_mut","","Get a pinned reference to the inner sink.",112,[[["pin",["sinkmaperr"]]],["pin"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",112,[[["self"]],["si"]]],[11,"get_ref","","Get a shared reference to the inner sink.",113,[[["self"]],["si"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",113,[[["self"]],["si"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",113,[[["self"]],["si"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sinks.",114,N],[11,"into_any","","Convert this drain error into any type",116,[[["self"]],["t"]]],[11,"get_ref","","Get a shared reference to the inner sink.",117,[[["self"]],["si"]]],[11,"new","futures::stream","Create a `StreamObj` from a custom trait object representation.",118,[[["f"]],["streamobj"]]],[11,"new","","Create a `LocalStreamObj` from a custom trait object representation.",119,[[["f"]],["localstreamobj"]]],[11,"into_stream_obj","","Converts the `LocalStreamObj` into a `StreamObj` To make this operation safe one has to ensure that the `UnsafeStreamObj` instance from which this `LocalStreamObj` was created actually implements `Send`.",119,[[["self"]],["streamobj"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",128,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",128,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",128,[[["self"]],["st"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",129,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",129,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",129,[[["self"]],["st"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",130,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",130,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",130,[[["self"]],["st"]]],[11,"is_done","","Returns whether the underlying stream has finished or not.",134,[[["self"]],["bool"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",134,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",134,[[["self"]],["st"]]],[11,"get_pin_mut","","Acquires a mutable pinned reference to the underlying stream that this combinator is pulling from.",134,[[["pin",["fuse"]]],["pin"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",134,[[["self"]],["st"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",135,[[["self"]],["option"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",135,[[["self"]],["option"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",135,[[["self"]],["option"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",136,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",136,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",136,[[["self"]],["st"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",137,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",137,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",137,[[["self"]],["st"]]],[11,"peek","","Peek retrieves a reference to the next item in the stream.",139,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",141,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",141,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",141,[[["self"]],["st"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",142,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",142,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",142,[[["self"]],["st"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",143,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",143,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",143,[[["self"]],["st"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",144,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",144,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",144,[[["self"]],["st"]]],[11,"new","","Constructs a new, empty `FuturesOrdered`",147,[[],["futuresordered"]]],[11,"len","","Returns the number of futures contained in the queue.",147,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the queue contains no futures",147,[[["self"]],["bool"]]],[11,"push","","Push a future into the queue.",147,N],[11,"new","","Constructs a new, empty [`FuturesUnordered`].",148,[[],["futuresunordered"]]],[11,"len","","Returns the number of futures contained in the set.",148,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the set contains no futures.",148,[[["self"]],["bool"]]],[11,"push","","Push a future into the set.",148,N],[11,"iter_mut","","Returns an iterator that allows modifying each future in the set.",148,[[["self"]],["itermut"]]],[11,"iter_pin_mut","","Returns an iterator that allows modifying each future in the set.",148,[[["pin",["futuresunordered"]]],["iterpinmut"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",149,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",149,[[["self"]],["st"]]],[11,"get_pin_mut","","Acquires a pinned mutable reference to the underlying stream that this combinator is pulling from.",149,[[["pin",["bufferunordered"]]],["pin"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",149,[[["self"]],["st"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",150,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",150,[[["self"]],["st"]]],[11,"get_pin_mut","","Acquires a mutable pinned reference to the underlying stream that this combinator is pulling from.",150,[[["pin",["buffered"]]],["pin"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",150,[[["self"]],["st"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",152,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",152,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",152,[[["self"]],["st"]]],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",154,[[["self"],["splitsink"]],["result",["reuniteerror"]]]],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",155,[[["self"],["splitstream"]],["result",["reuniteerror"]]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",160,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",160,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",160,[[["self"]],["st"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",161,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",161,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",161,[[["self"]],["st"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",163,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",163,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",163,[[["self"]],["st"]]],[11,"map","futures::task","Change the ready value of this `Poll` with the closure provided",24,[[["self"],["f"]],["poll"]]],[11,"is_ready","","Returns whether this is `Poll::Ready`",24,[[["self"]],["bool"]]],[11,"is_pending","","Returns whether this is `Poll::Pending`",24,[[["self"]],["bool"]]],[11,"map_ok","","Change the success value of this `Poll` with the closure provided",24,[[["self"],["f"]],["poll",["result"]]]],[11,"map_err","","Change the error value of this `Poll` with the closure provided",24,[[["self"],["f"]],["poll",["result"]]]],[11,"shutdown","","Spawning failed because the executor has been shut down.",164,[[],["spawnerror"]]],[11,"is_shutdown","","Check whether spawning failed to the executor being shut down.",164,[[["self"]],["bool"]]],[11,"new","","Constructs a new `Waker` directly.",165,[[["nonnull",["unsafewake"]]],["waker"]]],[11,"wake","","Wake up the task associated with this `Waker`.",165,N],[11,"will_wake","","Returns whether or not this `Waker` and `other` awaken the same task.",165,[[["self"],["waker"]],["bool"]]],[11,"will_wake_local","","Returns whether or not this `Waker` and `other` `LocalWaker` awaken the same task.",165,[[["self"],["localwaker"]],["bool"]]],[11,"new","","Constructs a new `LocalWaker` directly.",166,[[["nonnull",["unsafewake"]]],["localwaker"]]],[11,"as_waker","","Borrows this `LocalWaker` as a `Waker`.",166,[[["self"]],["waker"]]],[11,"into_waker","","Converts this `LocalWaker` into a `Waker`.",166,[[["self"]],["waker"]]],[11,"wake","","Wake up the task associated with this `LocalWaker`.",166,N],[11,"will_wake","","Returns whether or not this `LocalWaker` and `other` `LocalWaker` awaken the same task.",166,[[["self"],["localwaker"]],["bool"]]],[11,"will_wake_nonlocal","","Returns whether or not this `LocalWaker` and `other` `Waker` awaken the same task.",166,[[["self"],["waker"]],["bool"]]],[11,"new","","Create a new [`LocalWakerRef`] from a [`LocalWaker`].",167,[[["localwaker"]],["localwakerref"]]],[11,"new","","Create an `AtomicWaker`.",168,[[],["atomicwaker"]]],[11,"register","","Registers the waker to be notified on calls to `wake`.",168,N],[11,"wake","","Calls `wake` on the last `Waker` passed to `register`.",168,N],[11,"take","","Returns the last `Waker` passed to `register`, so that the user can wake it.",168,[[["self"]],["option",["waker"]]]]],"paths":[[8,"Executor01CompatExt"],[8,"Future01CompatExt"],[8,"Stream01CompatExt"],[8,"Future"],[8,"TryFuture"],[8,"FusedFuture"],[8,"UnsafeFutureObj"],[4,"MaybeDone"],[8,"FutureExt"],[8,"TryFutureExt"],[4,"ErrorKind"],[8,"AsyncRead"],[8,"AsyncWrite"],[8,"AsyncReadExt"],[8,"AsyncWriteExt"],[8,"Stream"],[8,"TryStream"],[8,"StreamExt"],[8,"TryStreamExt"],[8,"Sink"],[8,"SinkExt"],[8,"FusedStream"],[8,"UnsafeStreamObj"],[3,"ReuniteError"],[4,"Poll"],[8,"Spawn"],[8,"LocalSpawn"],[8,"UnsafeWake"],[8,"Wake"],[8,"SpawnExt"],[8,"LocalSpawnExt"],[3,"Receiver"],[3,"Sender"],[3,"Canceled"],[3,"Sender"],[3,"UnboundedSender"],[3,"Receiver"],[3,"UnboundedReceiver"],[3,"SendError"],[3,"TrySendError"],[3,"TryRecvError"],[3,"Compat"],[3,"Compat01As03"],[3,"Executor01As03"],[3,"TokioDefaultSpawner"],[3,"BlockingStream"],[3,"Enter"],[3,"EnterError"],[3,"LocalSpawner"],[3,"LocalPool"],[3,"ThreadPool"],[3,"ThreadPoolBuilder"],[3,"FutureObj"],[3,"LocalFutureObj"],[3,"Empty"],[3,"Lazy"],[3,"PollFn"],[3,"Ready"],[3,"OptionFuture"],[3,"FlattenStream"],[3,"Flatten"],[3,"Fuse"],[3,"Inspect"],[3,"IntoStream"],[3,"Join"],[3,"Join3"],[3,"Join4"],[3,"Join5"],[3,"Map"],[3,"Then"],[3,"Abortable"],[3,"AbortHandle"],[3,"AbortRegistration"],[3,"Aborted"],[3,"Remote"],[3,"RemoteHandle"],[3,"CatchUnwind"],[3,"Shared"],[3,"AndThen"],[3,"ErrInto"],[3,"FlattenSink"],[3,"IntoFuture"],[3,"MapErr"],[3,"MapOk"],[3,"OrElse"],[3,"UnwrapOrElse"],[3,"TryJoin"],[3,"TryJoin3"],[3,"TryJoin4"],[3,"TryJoin5"],[3,"Error"],[3,"Initializer"],[3,"IoVec"],[3,"AllowStdIo"],[3,"Close"],[3,"CopyInto"],[3,"Flush"],[3,"Read"],[3,"ReadExact"],[3,"ReadHalf"],[3,"ReadToEnd"],[3,"Window"],[3,"WriteAll"],[3,"WriteHalf"],[3,"Mutex"],[3,"MutexLockFuture"],[3,"MutexGuard"],[3,"Close"],[3,"Flush"],[3,"Send"],[3,"SendAll"],[3,"SinkErrInto"],[3,"SinkMapErr"],[3,"With"],[3,"Fanout"],[3,"Drain"],[4,"DrainError"],[3,"Buffer"],[3,"StreamObj"],[3,"LocalStreamObj"],[3,"Iter"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"PollFn"],[3,"Unfold"],[3,"Chain"],[3,"Concat"],[3,"Filter"],[3,"FilterMap"],[3,"Flatten"],[3,"Fold"],[3,"Forward"],[3,"ForEach"],[3,"Fuse"],[3,"StreamFuture"],[3,"Inspect"],[3,"Map"],[3,"Next"],[3,"Peekable"],[3,"Select"],[3,"Skip"],[3,"SkipWhile"],[3,"Take"],[3,"TakeWhile"],[3,"Then"],[3,"Zip"],[3,"FuturesOrdered"],[3,"FuturesUnordered"],[3,"BufferUnordered"],[3,"Buffered"],[3,"CatchUnwind"],[3,"Chunks"],[3,"Collect"],[3,"SplitStream"],[3,"SplitSink"],[3,"TryNext"],[3,"TryForEach"],[3,"ErrInto"],[3,"TryFold"],[3,"TrySkipWhile"],[3,"IntoStream"],[3,"TryCollect"],[3,"TryBufferUnordered"],[3,"SpawnError"],[3,"Waker"],[3,"LocalWaker"],[3,"LocalWakerRef"],[3,"AtomicWaker"]]};
searchIndex["futures_channel"]={"doc":"Asynchronous channels.","items":[[0,"mpsc","futures_channel","A multi-producer, single-consumer queue for sending values across asynchronous tasks.",N,N],[3,"Sender","futures_channel::mpsc","The transmission end of a bounded mpsc channel.",N,N],[3,"UnboundedSender","","The transmission end of an unbounded mpsc channel.",N,N],[3,"Receiver","","The receiving end of a bounded mpsc channel.",N,N],[3,"UnboundedReceiver","","The receiving end of an unbounded mpsc channel.",N,N],[3,"SendError","","The error type for `Sender`s used as `Sink`s.",N,N],[3,"TrySendError","","The error type returned from `try_send`.",N,N],[3,"TryRecvError","","The error type returned from `try_next`.",N,N],[5,"channel","","Creates a bounded mpsc channel for communicating between asynchronous tasks.",N,N],[5,"unbounded","","Creates an unbounded mpsc channel for communicating between asynchronous tasks.",N,N],[11,"is_full","","Returns true if this error is a result of the channel being full.",0,[[["self"]],["bool"]]],[11,"is_disconnected","","Returns true if this error is a result of the receiver being dropped.",0,[[["self"]],["bool"]]],[11,"is_full","","Returns true if this error is a result of the channel being full.",1,[[["self"]],["bool"]]],[11,"is_disconnected","","Returns true if this error is a result of the receiver being dropped.",1,[[["self"]],["bool"]]],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",1,[[["self"]],["t"]]],[11,"into_send_error","","Drops the message and converts into a `SendError`.",1,[[["self"]],["senderror"]]],[11,"try_send","","Attempts to send a message on this `Sender`, returning the message if there was an error.",2,[[["self"],["t"]],["result",["trysenderror"]]]],[11,"start_send","","Send a message on the channel.",2,[[["self"],["t"]],["result",["senderror"]]]],[11,"poll_ready","","Polls the channel to determine if there is guaranteed capacity to send at least one item without waiting.",2,[[["self"],["localwaker"]],["poll",["result"]]]],[11,"is_closed","","Returns whether this channel is closed without needing a context.",2,[[["self"]],["bool"]]],[11,"close_channel","","Closes this channel from the sender side, preventing any new messages.",2,[[["self"]]]],[11,"poll_ready","","Check if the channel is ready to receive a message.",3,[[["self"],["localwaker"]],["poll",["result"]]]],[11,"is_closed","","Returns whether this channel is closed without needing a context.",3,[[["self"]],["bool"]]],[11,"close_channel","","Closes this channel from the sender side, preventing any new messages.",3,[[["self"]]]],[11,"start_send","","Send a message on the channel.",3,[[["self"],["t"]],["result",["senderror"]]]],[11,"unbounded_send","","Sends a message along this channel.",3,[[["self"],["t"]],["result",["trysenderror"]]]],[11,"close","","Closes the receiving half of a channel, without dropping it.",4,[[["self"]]]],[11,"try_next","","Tries to receive the next message without notifying a context if empty.",4,[[["self"]],["result",["option","tryrecverror"]]]],[11,"close","","Closes the receiving half of the channel, without dropping it.",5,[[["self"]]]],[11,"try_next","","Tries to receive the next message without notifying a context if empty.",5,[[["self"]],["result",["option","tryrecverror"]]]],[0,"oneshot","futures_channel","A channel for sending a single message between asynchronous tasks.",N,N],[3,"Receiver","futures_channel::oneshot","A future for a value that will be provided by another asynchronous task.",N,N],[3,"Sender","","A means of transmitting a single value to another task.",N,N],[3,"Canceled","","Error returned from a `Receiver` when the corresponding `Sender` is dropped.",N,N],[5,"channel","","Creates a new one-shot channel for sending values across asynchronous tasks.",N,N],[11,"send","","Completes this oneshot with a successful result.",6,[[["self"],["t"]],["result"]]],[11,"poll_cancel","","Polls this `Sender` half to detect whether its associated `Receiver` with has been dropped.",6,[[["self"],["localwaker"]],["poll"]]],[11,"is_canceled","","Tests to see whether this `Sender`'s corresponding `Receiver` has been dropped.",6,[[["self"]],["bool"]]],[11,"close","","Gracefully close this receiver, preventing any subsequent attempts to send to it.",7,[[["self"]]]],[11,"try_recv","","Attempts to receive a message outside of the context of a task.",7,[[["self"]],["result",["option","canceled"]]]],[11,"from","futures_channel::mpsc","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_poll_next","","",4,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_poll_next","","",5,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"from","futures_channel::oneshot","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_poll","","",7,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"eq","futures_channel::mpsc","",0,[[["self"],["senderror"]],["bool"]]],[11,"ne","","",0,[[["self"],["senderror"]],["bool"]]],[11,"eq","","",1,[[["self"],["trysenderror"]],["bool"]]],[11,"ne","","",1,[[["self"],["trysenderror"]],["bool"]]],[11,"eq","futures_channel::oneshot","",9,[[["self"],["canceled"]],["bool"]]],[11,"clone","futures_channel::mpsc","",0,[[["self"]],["senderror"]]],[11,"clone","","",1,[[["self"]],["trysenderror"]]],[11,"clone","","",3,[[["self"]],["unboundedsender"]]],[11,"clone","","",2,[[["self"]],["sender"]]],[11,"clone","futures_channel::oneshot","",9,[[["self"]],["canceled"]]],[11,"drop","futures_channel::mpsc","",2,[[["self"]]]],[11,"drop","","",4,[[["self"]]]],[11,"drop","futures_channel::oneshot","",6,[[["self"]]]],[11,"drop","","",7,[[["self"]]]],[11,"fmt","futures_channel::mpsc","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures_channel::oneshot","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures_channel::mpsc","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures_channel::oneshot","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"poll","","",7,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"description","futures_channel::mpsc","",0,[[["self"]],["str"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"description","","",8,[[["self"]],["str"]]],[11,"description","futures_channel::oneshot","",9,[[["self"]],["str"]]],[11,"poll_next","futures_channel::mpsc","",4,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",5,[[["pin"],["localwaker"]],["poll",["option"]]]]],"paths":[[3,"SendError"],[3,"TrySendError"],[3,"Sender"],[3,"UnboundedSender"],[3,"Receiver"],[3,"UnboundedReceiver"],[3,"Sender"],[3,"Receiver"],[3,"TryRecvError"],[3,"Canceled"]]};
searchIndex["futures_core"]={"doc":"Core traits and types for asynchronous operations in Rust.","items":[[0,"future","futures_core","Futures.",N,N],[8,"Future","futures_core::future","A future represents an asynchronous computation.",N,N],[16,"Output","","The result of the `Future`.",0,N],[10,"poll","","Attempt to resolve the future to a final value, registering the current task for wakeup if the value is not yet available.",0,[[["pin"],["localwaker"]],["poll"]]],[3,"FutureObj","","A custom trait object for polling futures, roughly akin to `Box<dyn Future<Output = T> + Send + 'a>`.",N,N],[3,"LocalFutureObj","","A custom trait object for polling futures, roughly akin to `Box<dyn Future<Output = T> + 'a>`.",N,N],[11,"new","","Create a `LocalFutureObj` from a custom trait object representation.",1,[[["f"]],["localfutureobj"]]],[11,"into_future_obj","","Converts the `LocalFutureObj` into a `FutureObj` To make this operation safe one has to ensure that the `UnsafeFutureObj` instance from which this `LocalFutureObj` was created actually implements `Send`.",1,[[["self"]],["futureobj"]]],[11,"new","","Create a `FutureObj` from a custom trait object representation.",2,[[["f"]],["futureobj"]]],[8,"UnsafeFutureObj","","A custom implementation of a future trait object for `FutureObj`, providing a hand-rolled vtable.",N,N],[10,"into_raw","","Convert an owned instance into a (conceptually owned) void pointer.",3,N],[10,"poll","","Poll the future represented by the given void pointer.",3,N],[10,"drop","","Drops the future represented by the given void pointer.",3,N],[8,"FusedFuture","","A `Future` or `TryFuture` which tracks whether or not the underlying future should no longer be polled.",N,N],[10,"is_terminated","","Returns `true` if the underlying future should no longer be polled.",4,[[["self"]],["bool"]]],[8,"TryFuture","","A convenience for futures that return `Result` values that includes a variety of adapters tailored to such futures.",N,N],[16,"Ok","","The type of successful values yielded by this future",5,N],[16,"Error","","The type of failures yielded by this future",5,N],[10,"try_poll","","Poll this `TryFuture` as if it were a `Future`.",5,[[["pin"],["localwaker"]],["poll",["result"]]]],[0,"stream","futures_core","Asynchronous streams.",N,N],[3,"StreamObj","futures_core::stream","A custom trait object for polling streams, roughly akin to `Box<dyn Stream<Item = T> + Send + 'a>`.",N,N],[3,"LocalStreamObj","","A custom trait object for polling streams, roughly akin to `Box<dyn Stream<Item = T> + 'a>`.",N,N],[11,"new","","Create a `LocalStreamObj` from a custom trait object representation.",6,[[["f"]],["localstreamobj"]]],[11,"into_stream_obj","","Converts the `LocalStreamObj` into a `StreamObj` To make this operation safe one has to ensure that the `UnsafeStreamObj` instance from which this `LocalStreamObj` was created actually implements `Send`.",6,[[["self"]],["streamobj"]]],[11,"new","","Create a `StreamObj` from a custom trait object representation.",7,[[["f"]],["streamobj"]]],[8,"UnsafeStreamObj","","A custom implementation of a stream trait object for `StreamObj`, providing a hand-rolled vtable.",N,N],[10,"into_raw","","Convert an owned instance into a (conceptually owned) void pointer.",8,N],[10,"poll_next","","Poll the stream represented by the given void pointer.",8,N],[10,"drop","","Drops the stream represented by the given void pointer.",8,N],[8,"Stream","","A stream of values produced asynchronously.",N,N],[16,"Item","","Values yielded by the stream.",9,N],[10,"poll_next","","Attempt to pull out the next value of this stream, registering the current task for wakeup if the value is not yet available, and returning `None` if the stream is exhausted.",9,[[["pin"],["localwaker"]],["poll",["option"]]]],[8,"FusedStream","","A `Stream` or `TryStream` which tracks whether or not the underlying stream should no longer be polled.",N,N],[10,"is_terminated","","Returns `true` if the stream should no longer be polled.",10,[[["self"]],["bool"]]],[8,"TryStream","","A convenience for streams that return `Result` values that includes a variety of adapters tailored to such futures.",N,N],[16,"Ok","","The type of successful values yielded by this future",11,N],[16,"Error","","The type of failures yielded by this future",11,N],[10,"try_poll_next","","Poll this `TryStream` as if it were a `Stream`.",11,[[["pin"],["localwaker"]],["poll",["option"]]]],[0,"task","futures_core","Task notification.",N,N],[4,"Poll","futures_core::task","Indicates whether a value is available or if the current task has been scheduled to receive a wakeup instead.",N,N],[13,"Ready","","Represents that a value is immediately ready.",12,N],[13,"Pending","","Represents that a value is not ready yet.",12,N],[3,"Waker","","A `Waker` is a handle for waking up a task by notifying its executor that it is ready to be run.",N,N],[3,"LocalWaker","","A `LocalWaker` is a handle for waking up a task by notifying its executor that it is ready to be run.",N,N],[8,"UnsafeWake","","An unsafe trait for implementing custom memory management for a `Waker` or `LocalWaker`.",N,N],[10,"clone_raw","","Creates a clone of this `UnsafeWake` and stores it behind a `Waker`.",13,[[["self"]],["waker"]]],[10,"drop_raw","","Drops this instance of `UnsafeWake`, deallocating resources associated with it.",13,N],[10,"wake","","Indicates that the associated task is ready to make progress and should be `poll`ed.",13,N],[11,"wake_local","","Indicates that the associated task is ready to make progress and should be `poll`ed. This function is the same as `wake`, but can only be called from the thread that this `UnsafeWake` is \"local\" to. This allows for implementors to provide specialized wakeup behavior specific to the current thread. This function is called by `LocalWaker::wake`.",13,N],[8,"Wake","","A way of waking up a specific task.",N,N],[10,"wake","","Indicates that the associated task is ready to make progress and should be `poll`ed.",14,N],[11,"wake_local","","Indicates that the associated task is ready to make progress and should be `poll`ed. This function is like `wake`, but can only be called from the thread on which this `Wake` was created.",14,N],[5,"local_waker","","Creates a `LocalWaker` from a local `wake`.",N,[[["arc"]],["localwaker"]]],[5,"local_waker_from_nonlocal","","Creates a `LocalWaker` from a non-local `wake`.",N,[[["arc"]],["localwaker"]]],[3,"SpawnError","","An error that occurred during spawning.",N,N],[11,"shutdown","","Spawning failed because the executor has been shut down.",15,[[],["self"]]],[11,"is_shutdown","","Check whether spawning failed to the executor being shut down.",15,[[["self"]],["bool"]]],[8,"Spawn","","The `Spawn` trait allows for pushing futures onto an executor that will run them to completion.",N,N],[10,"spawn_obj","","Spawns a future that will be run to completion.",16,[[["self"],["futureobj"]],["result",["spawnerror"]]]],[11,"status","","Determines whether the executor is able to spawn new tasks.",16,[[["self"]],["result",["spawnerror"]]]],[8,"LocalSpawn","","The `LocalSpawn` is similar to `[Spawn]`, but allows spawning futures that don't implement `Send`.",N,N],[10,"spawn_local_obj","","Spawns a future that will be run to completion.",17,[[["self"],["localfutureobj"]],["result",["spawnerror"]]]],[11,"status_local","","Determines whether the executor is able to spawn new tasks.",17,[[["self"]],["result",["spawnerror"]]]],[11,"try_poll","futures_core::future","",2,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_poll","","",1,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_poll_next","futures_core::stream","",7,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_poll_next","","",6,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"from","futures_core::task","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"clone","","",18,[[["self"]],["waker"]]],[11,"clone","","",12,[[["self"]],["poll"]]],[11,"clone","","",19,[[["self"]],["localwaker"]]],[11,"partial_cmp","","",12,[[["self"],["poll"]],["option",["ordering"]]]],[11,"lt","","",12,[[["self"],["poll"]],["bool"]]],[11,"le","","",12,[[["self"],["poll"]],["bool"]]],[11,"gt","","",12,[[["self"],["poll"]],["bool"]]],[11,"ge","","",12,[[["self"],["poll"]],["bool"]]],[11,"cmp","","",12,[[["self"],["poll"]],["ordering"]]],[11,"hash","","",12,N],[11,"eq","","",12,[[["self"],["poll"]],["bool"]]],[11,"ne","","",12,[[["self"],["poll"]],["bool"]]],[11,"from","","Converts a `LocalWaker` into a `Waker`.",18,[[["localwaker"]],["waker"]]],[11,"from","","",12,[[["t"]],["poll"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result",["error"]]]],[11,"into_result","","",12,[[["self"]],["result"]]],[11,"from_error","","",12,N],[11,"from_ok","","",12,N],[11,"into_result","","",12,[[["self"]],["result"]]],[11,"from_error","","",12,N],[11,"from_ok","","",12,N],[11,"drop","","",18,N],[11,"from","","",18,[[["arc"]],["waker"]]],[11,"poll_next","futures_core::stream","",6,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",7,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","futures_core::future","",1,[[["futureobj"]],["localfutureobj"]]],[11,"from","","",2,[[["pin",["box"]]],["self"]]],[11,"from","","",2,[[["box"]],["self"]]],[11,"from","","",1,[[["pin",["box"]]],["self"]]],[11,"from","","",1,[[["box"]],["self"]]],[11,"from","futures_core::stream","",6,[[["streamobj"]],["localstreamobj"]]],[11,"from","","",7,[[["pin",["box"]]],["self"]]],[11,"from","","",7,[[["box"]],["self"]]],[11,"from","","",6,[[["pin",["box"]]],["self"]]],[11,"from","","",6,[[["box"]],["self"]]],[11,"drop","futures_core::future","",1,[[["self"]]]],[11,"drop","futures_core::stream","",6,[[["self"]]]],[11,"fmt","futures_core::future","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures_core::stream","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures_core::task","",15,[[["self"],["formatter"]],["result"]]],[11,"poll","futures_core::future","",1,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",2,[[["pin"],["localwaker"]],["poll"]]],[11,"map","futures_core::task","Change the ready value of this `Poll` with the closure provided",12,[[["self"],["f"]],["poll"]]],[11,"is_ready","","Returns whether this is `Poll::Ready`",12,[[["self"]],["bool"]]],[11,"is_pending","","Returns whether this is `Poll::Pending`",12,[[["self"]],["bool"]]],[11,"map_ok","","Change the success value of this `Poll` with the closure provided",12,[[["self"],["f"]],["poll",["result"]]]],[11,"map_err","","Change the error value of this `Poll` with the closure provided",12,[[["self"],["f"]],["poll",["result"]]]],[11,"new","","Constructs a new `Waker` directly.",18,[[["nonnull",["unsafewake"]]],["waker"]]],[11,"wake","","Wake up the task associated with this `Waker`.",18,N],[11,"will_wake","","Returns whether or not this `Waker` and `other` awaken the same task.",18,[[["self"],["waker"]],["bool"]]],[11,"will_wake_local","","Returns whether or not this `Waker` and `other` `LocalWaker` awaken the same task.",18,[[["self"],["localwaker"]],["bool"]]],[11,"new","","Constructs a new `LocalWaker` directly.",19,[[["nonnull",["unsafewake"]]],["localwaker"]]],[11,"as_waker","","Borrows this `LocalWaker` as a `Waker`.",19,[[["self"]],["waker"]]],[11,"into_waker","","Converts this `LocalWaker` into a `Waker`.",19,[[["self"]],["waker"]]],[11,"wake","","Wake up the task associated with this `LocalWaker`.",19,N],[11,"will_wake","","Returns whether or not this `LocalWaker` and `other` `LocalWaker` awaken the same task.",19,[[["self"],["localwaker"]],["bool"]]],[11,"will_wake_nonlocal","","Returns whether or not this `LocalWaker` and `other` `Waker` awaken the same task.",19,[[["self"],["waker"]],["bool"]]],[11,"status","","Determines whether the executor is able to spawn new tasks.",16,[[["self"]],["result",["spawnerror"]]]],[11,"status_local","","Determines whether the executor is able to spawn new tasks.",17,[[["self"]],["result",["spawnerror"]]]]],"paths":[[8,"Future"],[3,"LocalFutureObj"],[3,"FutureObj"],[8,"UnsafeFutureObj"],[8,"FusedFuture"],[8,"TryFuture"],[3,"LocalStreamObj"],[3,"StreamObj"],[8,"UnsafeStreamObj"],[8,"Stream"],[8,"FusedStream"],[8,"TryStream"],[4,"Poll"],[8,"UnsafeWake"],[8,"Wake"],[3,"SpawnError"],[8,"Spawn"],[8,"LocalSpawn"],[3,"Waker"],[3,"LocalWaker"]]};
searchIndex["futures_executor"]={"doc":"Built-in executors and related tools.","items":[[3,"BlockingStream","futures_executor","An iterator which blocks on values from a stream until they become available.",N,N],[3,"LocalPool","","A single-threaded task pool for polling futures to completion.",N,N],[3,"LocalSpawner","","A handle to a `LocalPool` that implements `Spawn`.",N,N],[3,"ThreadPool","","A general-purpose thread pool for scheduling tasks that poll futures to completion.",N,N],[3,"ThreadPoolBuilder","","Thread pool configuration object.",N,N],[3,"Enter","","Represents an executor context.",N,N],[3,"EnterError","","An error returned by `enter` if an execution scope has already been entered.",N,N],[5,"block_on","","Run a future to completion on the current thread.",N,N],[5,"block_on_stream","","Turn a stream into a blocking iterator.",N,[[["s"]],["blockingstream"]]],[5,"enter","","Marks the current thread as being within the dynamic extent of an executor.",N,[[],["result",["enter","entererror"]]]],[11,"new","","Create a new, empty pool of tasks.",0,[[],["localpool"]]],[11,"spawner","","Get a clonable handle to the pool as a [`Spawn`].",0,[[["self"]],["localspawner"]]],[11,"run","","Run all tasks in the pool to completion.",0,[[["self"]]]],[11,"run_until","","Runs all the tasks in the pool until the given future completes.",0,N],[11,"into_inner","","Convert this `BlockingStream` into the inner `Stream` type.",1,[[["self"]],["s"]]],[11,"new","","Creates a new thread pool with the default configuration.",2,[[],["result",["threadpool","error"]]]],[11,"builder","","Create a default thread pool configuration, which can then be customized.",2,[[],["threadpoolbuilder"]]],[11,"run","","Runs the given future with this thread pool as the default spawner for spawning tasks.",2,N],[11,"new","","Create a default thread pool configuration.",3,[[],["threadpoolbuilder"]]],[11,"pool_size","","Set size of a future ThreadPool",3,[[["self"],["usize"]],["self"]]],[11,"stack_size","","Set stack size of threads in the pool.",3,[[["self"],["usize"]],["self"]]],[11,"name_prefix","","Set thread name prefix of a future ThreadPool.",3,[[["self"],["s"]],["self"]]],[11,"after_start","","Execute the closure `f` immediately after each worker thread is started, but before running any tasks on it.",3,[[["self"],["f"]],["self"]]],[11,"before_stop","","Execute closure `f` just prior to shutting down each worker thread.",3,[[["self"],["f"]],["self"]]],[11,"create","","Create a `ThreadPool` with the given configuration.",3,[[["self"]],["result",["threadpool","error"]]]],[11,"into_iter","","",1,[[["self"]],["i"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"default","","",0,[[],["self"]]],[11,"default","","",3,[[],["self"]]],[11,"clone","","",4,[[["self"]],["localspawner"]]],[11,"clone","","",2,[[["self"]],["threadpool"]]],[11,"drop","","",2,[[["self"]]]],[11,"drop","","",5,[[["self"]]]],[11,"next","","",1,[[["self"]],["option"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"spawn_obj","","",4,[[["self"],["futureobj"]],["result",["spawnerror"]]]],[11,"status","","",4,[[["self"]],["result",["spawnerror"]]]],[11,"spawn_obj","","",2,[[["self"],["futureobj"]],["result",["spawnerror"]]]],[11,"spawn_local_obj","","",4,[[["self"],["localfutureobj"]],["result",["spawnerror"]]]],[11,"status_local","","",4,[[["self"]],["result",["spawnerror"]]]]],"paths":[[3,"LocalPool"],[3,"BlockingStream"],[3,"ThreadPool"],[3,"ThreadPoolBuilder"],[3,"LocalSpawner"],[3,"Enter"],[3,"EnterError"]]};
searchIndex["futures_io"]={"doc":"Asynchronous I/O","items":[[3,"IoVec","futures_io","A specialized byte slice type for performing vectored I/O operations.",N,N],[3,"Error","","The error type for I/O operations of the [`Read`], [`Write`], [`Seek`], and associated traits.",N,N],[4,"ErrorKind","","A list specifying general categories of I/O error.",N,N],[13,"NotFound","","An entity was not found, often a file.",0,N],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",0,N],[13,"ConnectionRefused","","The connection was refused by the remote server.",0,N],[13,"ConnectionReset","","The connection was reset by the remote server.",0,N],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",0,N],[13,"NotConnected","","The network operation failed because it was not connected yet.",0,N],[13,"AddrInUse","","A socket address could not be bound because the address is already in use elsewhere.",0,N],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not local.",0,N],[13,"BrokenPipe","","The operation failed because a pipe was closed.",0,N],[13,"AlreadyExists","","An entity already exists, often a file.",0,N],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was requested to not occur.",0,N],[13,"InvalidInput","","A parameter was incorrect.",0,N],[13,"InvalidData","","Data not valid for the operation were encountered.",0,N],[13,"TimedOut","","The I/O operation's timeout expired, causing it to be canceled.",0,N],[13,"WriteZero","","An error returned when an operation could not be completed because a call to [`write`] returned [`Ok(0)`].",0,N],[13,"Interrupted","","This operation was interrupted.",0,N],[13,"Other","","Any I/O error not part of this list.",0,N],[13,"UnexpectedEof","","An error returned when an operation could not be completed because an \"end of file\" was reached prematurely.",0,N],[6,"Result","","A specialized `Result` type for I/O operations.",N,N],[3,"Initializer","","A type used to conditionally initialize buffers passed to `AsyncRead` methods, modeled after `std`.",N,N],[11,"zeroing","","Returns a new `Initializer` which will zero out buffers.",1,[[],["initializer"]]],[11,"nop","","Returns a new `Initializer` which will not zero out buffers.",1,[[],["initializer"]]],[11,"should_initialize","","Indicates if a buffer should be initialized.",1,[[["self"]],["bool"]]],[11,"initialize","","Initializes a buffer if necessary.",1,N],[8,"AsyncRead","","Read bytes asynchronously.",N,N],[11,"initializer","","Determines if this `AsyncRead`er can work with buffers of uninitialized memory.",2,[[["self"]],["initializer"]]],[10,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",2,N],[11,"poll_vectored_read","","Attempt to read from the `AsyncRead` into `vec` using vectored IO operations.",2,N],[8,"AsyncWrite","","Write bytes asynchronously.",N,N],[10,"poll_write","","Attempt to write bytes from `buf` into the object.",3,N],[11,"poll_vectored_write","","Attempt to write bytes from `vec` into the object using vectored IO operations.",3,N],[10,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",3,[[["self"],["localwaker"]],["poll",["result"]]]],[10,"poll_close","","Attempt to close the object.",3,[[["self"],["localwaker"]],["poll",["result"]]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"description","","",5,[[["self"]],["str"]]],[11,"cause","","",5,[[["self"]],["option",["error"]]]],[11,"from","","",5,[[["intoinnererror"]],["error"]]],[11,"from","","Converts an [`ErrorKind`] into an [`Error`].",5,[[["errorkind"]],["error"]]],[11,"from","","Converts a [`NulError`] into a [`io::Error`].",5,[[["nulerror"]],["error"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",0,[[["self"],["errorkind"]],["option",["ordering"]]]],[11,"cmp","","",0,[[["self"],["errorkind"]],["ordering"]]],[11,"clone","","",0,[[["self"]],["errorkind"]]],[11,"eq","","",0,[[["self"],["errorkind"]],["bool"]]],[11,"hash","","",0,N],[11,"deref","","",4,N],[11,"deref_mut","","",4,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from_bytes","","",4,N],[11,"from_bytes_mut","","",4,N],[11,"new","","Creates a new I/O error from a known kind of error as well as an arbitrary error payload.",5,[[["errorkind"],["e"]],["error"]]],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",5,[[],["error"]]],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",5,[[["i32"]],["error"]]],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",5,[[["self"]],["option",["i32"]]]],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",5,[[["self"]],["option",["error"]]]],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error (if any).",5,[[["self"]],["option",["error"]]]],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",5,[[["self"]],["option",["box"]]]],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",5,[[["self"]],["errorkind"]]],[11,"initializer","","Determines if this `AsyncRead`er can work with buffers of uninitialized memory.",2,[[["self"]],["initializer"]]],[11,"poll_vectored_read","","Attempt to read from the `AsyncRead` into `vec` using vectored IO operations.",2,N],[11,"poll_vectored_write","","Attempt to write bytes from `vec` into the object using vectored IO operations.",3,N]],"paths":[[4,"ErrorKind"],[3,"Initializer"],[8,"AsyncRead"],[8,"AsyncWrite"],[3,"IoVec"],[3,"Error"]]};
searchIndex["futures_sink"]={"doc":"Asynchronous sinks","items":[[4,"VecSinkError","futures_sink","The error type for `Vec` and `VecDequeue` when used as `Sink`s. Values of this type can never be created.",N,N],[8,"Sink","","A `Sink` is a value into which other values can be sent, asynchronously.",N,N],[16,"SinkItem","","The type of value that the sink accepts.",0,N],[16,"SinkError","","The type of value produced by the sink when an error occurs.",0,N],[10,"poll_ready","","Attempts to prepare the `Sink` to receive a value.",0,[[["pin"],["localwaker"]],["poll",["result"]]]],[10,"start_send","","Begin the process of sending a value to the sink. Each call to this function must be proceeded by a successful call to `poll_ready` which returned `Ok(Poll::Ready(()))`.",0,N],[10,"poll_flush","","Flush any remaining output from this sink.",0,[[["pin"],["localwaker"]],["poll",["result"]]]],[10,"poll_close","","Flush any remaining output and close this sink, if necessary.",0,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"clone","","",1,[[["self"]],["vecsinkerror"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]]],"paths":[[8,"Sink"],[4,"VecSinkError"]]};
searchIndex["futures_test"]={"doc":"Utilities to make testing `Future`s easier","items":[[0,"task","futures_test","Task related testing utilities.",N,N],[5,"noop_local_waker","futures_test::task","Create a new `LocalWaker` referencing a singleton instance of [`NoopWake`].",N,[[],["localwaker"]]],[5,"noop_local_waker_ref","","Get a thread local reference to a `LocalWaker` referencing a singleton instance of [`NoopWake`].",N,[[],["localwaker"]]],[3,"NoopSpawner","","An implementation of `Spawn` that discards spawned futures when used.",N,N],[3,"PanicSpawner","","An implementation of `Spawn` that panics when used.",N,N],[3,"PanicWake","","An implementation of `Wake` that panics when woken.",N,N],[3,"RecordSpawner","","An implementation of `Spawn` that records any `Future`s spawned on it.",N,N],[3,"WakeCounter","","An implementation of `Wake` that tracks how many times it has been woken.",N,N],[5,"noop_spawner_mut","","Get a reference to a singleton instance of [`NoopSpawner`].",N,[[],["noopspawner"]]],[5,"panic_spawner_mut","","Get a reference to a singleton instance of [`PanicSpawner`].",N,[[],["panicspawner"]]],[5,"panic_local_waker","","Create a new `LocalWaker` referencing a singleton instance of [`PanicWake`].",N,[[],["localwaker"]]],[5,"panic_local_waker_ref","","Get a thread local reference to a `LocalWaker` referencing a singleton instance of [`PanicWake`].",N,[[],["localwaker"]]],[11,"new","","Create a new instance",0,[[],["self"]]],[11,"new","","Create a new instance",1,[[],["self"]]],[11,"new","","Create a new instance",2,[[],["self"]]],[11,"new","","Create a new instance",3,[[],["self"]]],[11,"spawned","","Inspect any futures that were spawned onto this [`Spawn`].",3,N],[11,"new","","Create a new [`WakeCounter`]",4,[[],["wakecounter"]]],[11,"local_waker","","Creates an associated [`LocalWaker`]. Every call to its `wake` and `wake_local` methods increments the counter.",4,[[["self"]],["localwaker"]]],[11,"count","","Get the number of times this [`WakeCounter`] has been woken",4,[[["self"]],["usize"]]],[0,"future","futures_test","Additional combinators for testing futures.",N,N],[8,"FutureTestExt","futures_test::future","Additional combinators for testing futures.",N,N],[11,"assert_unmoved","","Asserts that the given is not moved after being polled.",5,[[["self"]],["assertunmoved"]]],[11,"pending_once","","Introduces one `Poll::Pending` before polling the given future.",5,[[["self"]],["pendingonce"]]],[11,"run_in_background","","Runs this future on a dedicated executor running in a background thread.",5,[[["self"]]]],[14,"assert_stream_pending","futures_test","Assert that the next poll to the provided stream will return `Poll::Pending`.",N,N],[14,"assert_stream_next","","Assert that the next poll to the provided stream will return `Poll::Ready` with the provided item.",N,N],[14,"assert_stream_done","","Assert that the next poll to the provided stream will return an empty `Poll::Ready` signalling the completion of the stream.",N,N],[11,"from","futures_test::task","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"default","","",0,[[],["self"]]],[11,"default","","",1,[[],["self"]]],[11,"default","","",2,[[],["self"]]],[11,"default","","",3,[[],["self"]]],[11,"default","","",4,[[],["self"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone_raw","","",2,[[["self"]],["waker"]]],[11,"drop_raw","","",2,[[["self"]]]],[11,"wake","","",2,[[["self"]]]],[11,"wake","","",2,[[["arc"]]]],[11,"spawn_obj","","",0,[[["self"],["futureobj"]],["result",["spawnerror"]]]],[11,"spawn_obj","","",1,[[["self"],["futureobj"]],["result",["spawnerror"]]]],[11,"spawn_obj","","",3,[[["self"],["futureobj"]],["result",["spawnerror"]]]]],"paths":[[3,"NoopSpawner"],[3,"PanicSpawner"],[3,"PanicWake"],[3,"RecordSpawner"],[3,"WakeCounter"],[8,"FutureTestExt"]]};
searchIndex["futures_util"]={"doc":"Combinators and utilities for working with `Future`s, `Stream`s, `Sink`s, and the `AsyncRead` and `AsyncWrite` traits.","items":[[0,"async_await","futures_util","Await",N,N],[0,"future","","Futures",N,N],[3,"Empty","futures_util::future","A future which is never resolved.",N,N],[3,"Lazy","","A future which, when polled, invokes a closure and yields its result.",N,N],[3,"OptionFuture","","A future representing a value which may or may not be present.",N,N],[3,"PollFn","","A future which wraps a function returning [`Poll`].",N,N],[3,"Ready","","A future that is immediately ready with a value",N,N],[3,"Flatten","","Future for the `flatten` combinator.",N,N],[3,"FlattenStream","","Future for the `flatten_stream` combinator, flattening a future-of-a-stream to get just the result of the final stream as a stream.",N,N],[3,"Fuse","","A future which \"fuses\" a future once it has been resolved. This wrapper can be used to turn any `Future` into a `FusedFuture`.",N,N],[3,"IntoStream","","A type which converts a `Future` into a `Stream` containing a single element.",N,N],[3,"Join","","Future for the `join` combinator, waiting for two futures to complete.",N,N],[3,"Join3","","Future for the `join3` combinator, waiting for three futures to complete.",N,N],[3,"Join4","","Future for the `join4` combinator, waiting for four futures to complete.",N,N],[3,"Join5","","Future for the `join5` combinator, waiting for five futures to complete.",N,N],[3,"Map","","Future for the `map` combinator, changing the type of a future.",N,N],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",N,N],[3,"Inspect","","Do something with the item of a future, passing it on.",N,N],[3,"UnitError","","Future for the `unit_error` combinator, turning a `Future` into a `TryFuture`.",N,N],[3,"Abortable","","A future which can be remotely short-circuited using an `AbortHandle`.",N,N],[3,"AbortHandle","","A handle to a `Abortable` future.",N,N],[3,"AbortRegistration","","A registration handle for a `Abortable` future. Values of this type can be acquired from `AbortHandle::new` and are used in calls to `Abortable::new`.",N,N],[3,"Aborted","","Indicator that the `Abortable` future was aborted.",N,N],[3,"CatchUnwind","","Future for the `catch_unwind` combinator.",N,N],[3,"Remote","","A future which sends its output to the corresponding `RemoteHandle`. Created by `remote_handle`.",N,N],[3,"RemoteHandle","","The handle to a remote future returned by `remote_handle`.",N,N],[3,"JoinAll","","A future which takes a list of futures and resolves with a vector of the completed values.",N,N],[3,"Shared","","A future that is cloneable and can be polled in multiple threads. Use the `shared` combinator method to convert any future into a `Shared` future.",N,N],[4,"MaybeDone","","A future that may have completed.",N,N],[13,"Future","","A not-yet-completed future",0,N],[13,"Done","","The output of the completed future",0,N],[13,"Gone","","The empty variant after the result of a [`MaybeDone`] has been taken using the `take_output` method.",0,N],[5,"empty","","Creates a future which never resolves, representing a computation that never finishes.",N,[[],["empty"]]],[5,"lazy","","Creates a new future that allows delayed execution of a closure.",N,[[["f"]],["lazy"]]],[5,"maybe_done","","Wraps a future into a `MaybeDone`",N,[[["fut"]],["maybedone"]]],[5,"poll_fn","","Creates a new future wrapping around a function returning [`Poll`].",N,[[["f"]],["pollfn"]]],[5,"ready","","Create a future that is immediately ready with a value.",N,[[["t"]],["ready"]]],[5,"ok","","Create a future that is immediately ready with a success value.",N,[[["t"]],["ready",["result"]]]],[5,"err","","Create a future that is immediately ready with an error value.",N,[[["e"]],["ready",["result"]]]],[5,"abortable","","Creates a new `Abortable` future and a `AbortHandle` which can be used to stop it.",N,N],[5,"join_all","","Creates a future which represents a collection of the outputs of the futures given.",N,[[["i"]],["joinall"]]],[11,"output_mut","","Returns an [`Option`] containing a mutable reference to the output of the future. The output of this method will be [`Some`] if and only if the inner future has been completed and `take_output` has not yet been called.",0,[[["pin"]],["option"]]],[11,"take_output","","Attempt to take the output of a `MaybeDone` without driving it towards completion.",0,[[["pin"]],["option"]]],[11,"new","","Creates a new `Abortable` future using an existing `AbortRegistration`. `AbortRegistration`s can be acquired through `AbortHandle::new`.",1,[[["fut"],["abortregistration"]],["self"]]],[11,"new_pair","","Creates an (`AbortHandle`, `AbortRegistration`) pair which can be used to abort a running future.",2,N],[11,"abort","","Abort the `Abortable` future associated with this handle.",2,[[["self"]]]],[11,"forget","","Drops this handle without canceling the underlying future.",3,[[["self"]]]],[11,"peek","","Returns [`Some`] containing a reference to this [`Shared`]'s output if it has already been computed by a clone or [`None`] if it hasn't been computed yet or this [`Shared`] already returned its output from `poll`.",4,[[["self"]],["option"]]],[8,"FutureExt","","An extension trait for `Future`s that provides a variety of convenient adapters.",N,N],[11,"map","","Map this future's output to a different type, returning a new future of the resulting type.",5,[[["self"],["f"]],["map"]]],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",5,[[["self"],["f"]],["then"]]],[11,"join","","Joins the result of two futures, waiting for them both to complete.",5,[[["self"],["fut2"]],["join"]]],[11,"join3","","Same as `join`, but with more futures.",5,[[["self"],["fut2"],["fut3"]],["join3"]]],[11,"join4","","Same as `join`, but with more futures.",5,[[["self"],["fut2"],["fut3"],["fut4"]],["join4"]]],[11,"join5","","Same as `join`, but with more futures.",5,[[["self"],["fut2"],["fut3"],["fut4"],["fut5"]],["join5"]]],[11,"into_stream","","Convert this future into a single element stream.",5,[[["self"]],["intostream"]]],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",5,[[["self"]],["flatten"]]],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",5,[[["self"]],["flattenstream"]]],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed. This method can be used to turn any `Future` into a `FusedFuture`.",5,[[["self"]],["fuse"]]],[11,"inspect","","Do something with the output of a future before passing it on.",5,[[["self"],["f"]],["inspect"]]],[11,"catch_unwind","","Catches unwinding panics while polling the future.",5,[[["self"]],["catchunwind"]]],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",5,[[["self"]],["shared"]]],[11,"remote_handle","","Turn this future into a future that yields `()` on completion and sends its output to another future on a separate task.",5,N],[11,"boxed","","Wrap the future in a Box, pinning it.",5,[[["self"]],["pin",["box"]]]],[11,"unit_error","","Turns a `Future` into a `TryFuture` with `Error = ()`.",5,[[["self"]],["uniterror"]]],[11,"poll_unpin","","A convenience for calling `Future::poll` on `Unpin` future types.",5,[[["self"],["localwaker"]],["poll"]]],[0,"try_future","futures_util","Futures",N,N],[3,"AndThen","futures_util::try_future","Future for the `and_then` combinator.",N,N],[3,"ErrInto","","Future for the `err_into` combinator.",N,N],[3,"FlattenSink","","Future for the `flatten_sink` combinator.",N,N],[3,"TryJoin","","Future for the `try_join` combinator, waiting for two futures to complete or for one to error.",N,N],[3,"TryJoin3","","Future for the `try_join3` combinator, waiting for three futures to complete or for one to error.",N,N],[3,"TryJoin4","","Future for the `try_join4` combinator, waiting for four futures to complete or for one to error.",N,N],[3,"TryJoin5","","Future for the `try_join5` combinator, waiting for five futures to complete or for one to error.",N,N],[3,"IntoFuture","","Future for the `into_future` combinator.",N,N],[3,"MapErr","","Future for the `map_err` combinator.",N,N],[3,"MapOk","","Future for the `map_ok` combinator.",N,N],[3,"OrElse","","Future for the `or_else` combinator.",N,N],[3,"UnwrapOrElse","","Future for the `unwrap_or_else` combinator.",N,N],[8,"TryFutureExt","","Adapters specific to [`Result`]-returning futures",N,N],[11,"flatten_sink","","Flattens the execution of this future when the successful result of this future is a [`Sink`].",6,[[["self"]],["flattensink"]]],[11,"map_ok","","Maps this future's success value to a different value.",6,[[["self"],["f"]],["mapok"]]],[11,"map_err","","Maps this future's error value to a different value.",6,[[["self"],["f"]],["maperr"]]],[11,"err_into","","Maps this future's `Error` to a new error type using the `Into` trait.",6,[[["self"]],["errinto"]]],[11,"and_then","","Executes another future after this one resolves successfully. The success value is passed to a closure to create this subsequent future.",6,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Executes another future if this one resolves to an error. The error value is passed to a closure to create this subsequent future.",6,[[["self"],["f"]],["orelse"]]],[11,"unwrap_or_else","","Unwraps this future's ouput, producing a future with this future's `Ok` type as its `Output` type.",6,[[["self"],["f"]],["unwraporelse"]]],[11,"compat","","Wraps a [`TryFuture`] into a future compatable with libraries using futures 0.1 future definitons. Requires the `compat` feature to enable.",6,[[["self"]],["compat"]]],[11,"into_future","","Wraps a [`TryFuture`] into a type that implements `Future`.",6,[[["self"]],["intofuture"]]],[11,"try_join","","Joins the result of two futures, waiting for them both to complete or for one to produce an error.",6,[[["self"],["fut2"]],["tryjoin"]]],[11,"try_join3","","Same as `try_join`, but with more futures.",6,[[["self"],["fut2"],["fut3"]],["tryjoin3"]]],[11,"try_join4","","Same as `try_join`, but with more futures.",6,[[["self"],["fut2"],["fut3"],["fut4"]],["tryjoin4"]]],[11,"try_join5","","Same as `try_join`, but with more futures.",6,[[["self"],["fut2"],["fut3"],["fut4"],["fut5"]],["tryjoin5"]]],[0,"stream","futures_util","Streams",N,N],[3,"Iter","futures_util::stream","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"Repeat","","Stream that produces the same element repeatedly.",N,N],[3,"Chain","","An adapter for chaining the output of two streams.",N,N],[3,"Concat","","A stream combinator to concatenate the results of a stream into the first yielded item.",N,N],[3,"Empty","","A stream which contains no elements.",N,N],[3,"Filter","","A stream combinator used to filter the results of a stream and only yield some values.",N,N],[3,"FilterMap","","A combinator used to filter the results of a stream and simultaneously map them to a different type.",N,N],[3,"Flatten","","A combinator used to flatten a stream-of-streams into one long stream of elements.",N,N],[3,"Fold","","A future used to collect all the results of a stream into one generic type.",N,N],[3,"Forward","","Future for the `Stream::forward` combinator, which sends a stream of values to a sink and then flushes the sink.",N,N],[3,"ForEach","","A stream combinator which executes a unit closure over each item on a stream.",N,N],[3,"Fuse","","A stream which \"fuse\"s a stream once it's terminated.",N,N],[3,"StreamFuture","","A combinator used to temporarily convert a stream into a future.",N,N],[3,"Inspect","","Do something with the items of a stream, passing it on.",N,N],[3,"Map","","A stream combinator which will change the type of a stream from one type to another.",N,N],[3,"Next","","A future of the next element of a stream.",N,N],[3,"SelectNextSome","","A future that resolves to the next value yielded from a [`Stream`].",N,N],[3,"Once","","A stream which emits single element and then EOF.",N,N],[3,"Peekable","","A `Stream` that implements a `peek` method.",N,N],[3,"PollFn","","A stream which adapts a function returning `Poll`.",N,N],[3,"Select","","An adapter for merging the output of two streams.",N,N],[3,"Skip","","A stream combinator which skips a number of elements before continuing.",N,N],[3,"SkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",N,N],[3,"Take","","A stream combinator which returns a maximum number of elements.",N,N],[3,"TakeWhile","","A stream combinator which takes elements from a stream while a predicate holds.",N,N],[3,"Then","","A stream combinator which chains a computation onto each item produced by a stream.",N,N],[3,"Unfold","","A stream which creates futures, polls them and return their result",N,N],[3,"Zip","","An adapter for merging the output of two streams.",N,N],[3,"BufferUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if possible, delivering results as they become available.",N,N],[3,"Buffered","","An adaptor for a stream of futures to execute the futures concurrently, if possible.",N,N],[3,"CatchUnwind","","Stream for the `catch_unwind` combinator.",N,N],[3,"Chunks","","An adaptor that chunks up elements in a vector.",N,N],[3,"Collect","","A future which collects all of the values of a stream into a vector.",N,N],[3,"ForEachConcurrent","","A stream combinator which executes a unit closure over each item on a stream concurrently.",N,N],[3,"FuturesOrdered","","An unbounded queue of futures.",N,N],[3,"FuturesUnordered","","A set of futures which may complete in any order.",N,N],[3,"SplitStream","","A `Stream` part of the split pair",N,N],[3,"SplitSink","","A `Sink` part of the split pair",N,N],[3,"ReuniteError","","Error indicating a `SplitSink<S>` and `SplitStream<S>` were not two halves of a `Stream + Split`, and thus could not be `reunite`d.",N,N],[12,"0","","",7,N],[12,"1","","",7,N],[5,"iter","","Converts an `Iterator` into a `Stream` which is always ready to yield the next value.",N,[[["i"]],["iter"]]],[5,"repeat","","Create a stream which produces the same item repeatedly.",N,[[["t"]],["repeat"]]],[5,"empty","","Creates a stream which contains no elements.",N,[[],["empty"]]],[5,"once","","Creates a stream of single element",N,[[["fut"]],["once"]]],[5,"poll_fn","","Creates a new stream wrapping around a function returning `Poll`.",N,[[["f"]],["pollfn"]]],[5,"unfold","","Creates a `Stream` from a seed and a closure returning a `Future`.",N,[[["t"],["f"]],["unfold"]]],[5,"futures_ordered","","Converts a list of futures into a `Stream` of results from the futures.",N,[[["i"]],["futuresordered"]]],[5,"futures_unordered","","Converts a list of futures into a [`Stream`] of outputs from the futures.",N,[[["i"]],["futuresunordered"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",8,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",8,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",8,[[["self"]],["st"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",9,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",9,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",9,[[["self"]],["st"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",10,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",10,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",10,[[["self"]],["st"]]],[11,"is_done","","Returns whether the underlying stream has finished or not.",11,[[["self"]],["bool"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",11,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",11,[[["self"]],["st"]]],[11,"get_pin_mut","","Acquires a mutable pinned reference to the underlying stream that this combinator is pulling from.",11,[[["pin"]],["pin"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",11,[[["self"]],["st"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",12,[[["self"]],["option"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",12,[[["self"]],["option"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",12,[[["self"]],["option"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",13,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",13,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",13,[[["self"]],["st"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",14,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",14,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",14,[[["self"]],["st"]]],[11,"peek","","Peek retrieves a reference to the next item in the stream.",15,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",16,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",16,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",16,[[["self"]],["st"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",17,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",17,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",17,[[["self"]],["st"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",18,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",18,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",18,[[["self"]],["st"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",19,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",19,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",19,[[["self"]],["st"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",20,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",20,[[["self"]],["st"]]],[11,"get_pin_mut","","Acquires a pinned mutable reference to the underlying stream that this combinator is pulling from.",20,[[["pin"]],["pin"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",20,[[["self"]],["st"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",21,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",21,[[["self"]],["st"]]],[11,"get_pin_mut","","Acquires a mutable pinned reference to the underlying stream that this combinator is pulling from.",21,[[["pin"]],["pin"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",21,[[["self"]],["st"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",22,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",22,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",22,[[["self"]],["st"]]],[11,"new","","Constructs a new, empty `FuturesOrdered`",23,[[],["futuresordered"]]],[11,"len","","Returns the number of futures contained in the queue.",23,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the queue contains no futures",23,[[["self"]],["bool"]]],[11,"push","","Push a future into the queue.",23,[[["self"],["fut"]]]],[11,"new","","Constructs a new, empty [`FuturesUnordered`].",24,[[],["futuresunordered"]]],[11,"len","","Returns the number of futures contained in the set.",24,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the set contains no futures.",24,[[["self"]],["bool"]]],[11,"push","","Push a future into the set.",24,[[["self"],["fut"]]]],[11,"iter_mut","","Returns an iterator that allows modifying each future in the set.",24,[[["self"]],["itermut"]]],[11,"iter_pin_mut","","Returns an iterator that allows modifying each future in the set.",24,[[["pin"]],["iterpinmut"]]],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",25,[[["self"],["splitsink"]],["result",["reuniteerror"]]]],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",26,[[["self"],["splitstream"]],["result",["reuniteerror"]]]],[8,"StreamExt","","An extension trait for `Stream`s that provides a variety of convenient combinator functions.",N,N],[11,"next","","Creates a future that resolves to the next item in the stream.",27,[[["self"]],["next"]]],[11,"into_future","","Converts this stream into a future of `(next_item, tail_of_stream)`. If the stream terminates, then the next item is [`None`].",27,[[["self"]],["streamfuture"]]],[11,"map","","Maps this stream's items to a different type, returning a new stream of the resulting type.",27,[[["self"],["f"]],["map"]]],[11,"filter","","Filters the values produced by this stream according to the provided asynchronous predicate.",27,[[["self"],["f"]],["filter"]]],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type according to the provided asynchronous closure.",27,[[["self"],["f"]],["filtermap"]]],[11,"then","","Computes from this stream's items new items of a different type using an asynchronous closure.",27,[[["self"],["f"]],["then"]]],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",27,[[["self"]],["collect"]]],[11,"concat","","Concatenate all items of a stream into a single extendable destination, returning a future representing the end result.",27,[[["self"]],["concat"]]],[11,"fold","","Execute an accumulating asynchronous computation over a stream, collecting all the values into one final result.",27,[[["self"],["t"],["f"]],["fold"]]],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",27,[[["self"]],["flatten"]]],[11,"skip_while","","Skip elements on this stream while the provided asynchronous predicate resolves to `true`.",27,[[["self"],["f"]],["skipwhile"]]],[11,"take_while","","Take elements from this stream while the provided asynchronous predicate resolves to `true`.",27,[[["self"],["f"]],["takewhile"]]],[11,"for_each","","Runs this stream to completion, executing the provided asynchronous closure for each element on the stream.",27,[[["self"],["f"]],["foreach"]]],[11,"for_each_concurrent","","Runs this stream to completion, executing the provided asynchronous closure for each element on the stream concurrently as elements become available.",27,N],[11,"take","","Creates a new stream of at most `n` items of the underlying stream.",27,[[["self"],["u64"]],["take"]]],[11,"skip","","Creates a new stream which skips `n` items of the underlying stream.",27,[[["self"],["u64"]],["skip"]]],[11,"fuse","","Fuse a stream such that `poll_next` will never again be called once it has finished. This method can be used t turn any `Stream` into a `FusedStream`.",27,[[["self"]],["fuse"]]],[11,"by_ref","","Borrows a stream, rather than consuming it.",27,[[["self"]],["self"]]],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",27,[[["self"]],["catchunwind"]]],[11,"boxed","","Wrap the stream in a Box, pinning it.",27,[[["self"]],["pin",["box"]]]],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",27,[[["self"],["usize"]],["buffered"]]],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",27,[[["self"],["usize"]],["bufferunordered"]]],[11,"zip","","An adapter for zipping two streams together.",27,[[["self"],["st"]],["zip"]]],[11,"chain","","Adapter for chaining two stream.",27,[[["self"],["st"]],["chain"]]],[11,"peekable","","Creates a new stream which exposes a `peek` method.",27,[[["self"]],["peekable"]]],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",27,[[["self"],["usize"]],["chunks"]]],[11,"select","","This combinator will attempt to pull items from both streams. Each stream will be polled in a round-robin fashion, and whenever a stream is ready to yield an item that item is yielded.",27,[[["self"],["st"]],["select"]]],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",27,[[["self"],["s"]],["forward"]]],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",27,N],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",27,[[["self"],["f"]],["inspect"]]],[11,"left_stream","","Wrap this stream in an `Either` stream, making it the left-hand variant of that `Either`.",27,[[["self"]],["either"]]],[11,"right_stream","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",27,[[["self"]],["either"]]],[11,"poll_next_unpin","","A convenience method for calling [`Stream::poll_next`] on [`Unpin`] stream types.",27,[[["self"],["localwaker"]],["poll",["option"]]]],[11,"select_next_some","","Returns a [`Future`] that resolves when the next item in this stream is ready.",27,[[["self"]],["selectnextsome"]]],[0,"try_stream","futures_util","Streams",N,N],[3,"ErrInto","futures_util::try_stream","Stream for the `err_into` combinator.",N,N],[3,"IntoStream","","Stream for the `into_stream` combinator.",N,N],[3,"MapOk","","Stream for the `map_ok` combinator.",N,N],[3,"MapErr","","Stream for the `map_err` combinator.",N,N],[3,"TryNext","","A future which attempts to collect all of the values of a stream.",N,N],[3,"TryForEach","","A stream combinator which attempts to execute an async closure over each future in a stream.",N,N],[3,"TryFilterMap","","A combinator that attempts to filter the results of a stream and simultaneously map them to a different type.",N,N],[3,"TryConcat","","A stream combinator which attempts to concatenate the results of a stream into the first yielded item.",N,N],[3,"TryFold","","The future for the `TryStream::fold` method.",N,N],[3,"TrySkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",N,N],[3,"TryBufferUnordered","","A stream returned by the `try_buffer_unordered` method",N,N],[3,"TryCollect","","A future which attempts to collect all of the values of a stream.",N,N],[3,"TryForEachConcurrent","","A stream combinator which executes a unit closure over each item on a stream concurrently.",N,N],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",28,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",28,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",28,[[["self"]],["st"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",29,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",29,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",29,[[["self"]],["st"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",30,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",30,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",30,[[["self"]],["st"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",31,[[["self"]],["st"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",31,[[["self"]],["st"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",31,[[["self"]],["st"]]],[8,"TryStreamExt","","Adapters specific to `Result`-returning streams",N,N],[11,"err_into","","Wraps the current stream in a new stream which converts the error type into the one provided.",32,[[["self"]],["errinto"]]],[11,"map_ok","","Wraps the current stream in a new stream which maps the success value using the provided closure.",32,[[["self"],["f"]],["mapok"]]],[11,"map_err","","Wraps the current stream in a new stream which maps the error value using the provided closure.",32,[[["self"],["f"]],["maperr"]]],[11,"into_stream","","Wraps a [`TryStream`] into a type that implements `Stream`",32,[[["self"]],["intostream"]]],[11,"try_next","","Creates a future that attempts to resolve the next item in the stream. If an error is encountered before the next item, the error is returned instead.",32,[[["self"]],["trynext"]]],[11,"try_for_each","","Attempts to run this stream to completion, executing the provided asynchronous closure for each element on the stream.",32,[[["self"],["f"]],["tryforeach"]]],[11,"try_skip_while","","Skip elements on this stream while the provided asynchronous predicate resolves to `true`.",32,[[["self"],["f"]],["tryskipwhile"]]],[11,"try_for_each_concurrent","","Attempts to run this stream to completion, executing the provided asynchronous closure for each element on the stream concurrently as elements become available, exiting as soon as an error occurs.",32,N],[11,"try_collect","","Attempt to Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",32,[[["self"]],["trycollect"]]],[11,"try_filter_map","","Attempt to filter the values produced by this stream while simultaneously mapping them to a different type according to the provided asynchronous closure.",32,[[["self"],["f"]],["tryfiltermap"]]],[11,"try_fold","","Attempt to execute an accumulating asynchronous computation over a stream, collecting all the values into one final result.",32,[[["self"],["t"],["f"]],["tryfold"]]],[11,"try_concat","","Attempt to concatenate all items of a stream into a single extendable destination, returning a future representing the end result.",32,[[["self"]],["tryconcat"]]],[11,"try_buffer_unordered","","Attempt to execute several futures from a stream concurrently.",32,[[["self"],["usize"]],["trybufferunordered"]]],[11,"compat","","Wraps a [`TryStream`] into a stream compatible with libraries using futures 0.1 `Stream`. Requires the `compat` feature to be enabled. ``` #![feature(async_await, await_macro, futures_api)] use futures::future::{FutureExt, TryFutureExt}; # let (tx, rx) = futures::channel::oneshot::channel();",32,[[["self"]],["compat"]]],[0,"sink","futures_util","Sinks",N,N],[3,"Close","futures_util::sink","Future for the `close` combinator, which polls the sink until all data has been closed.",N,N],[3,"Drain","","A sink that will discard all items given to it.",N,N],[3,"Fanout","","Sink that clones incoming items and forwards them to two sinks at the same time.",N,N],[3,"Flush","","Future for the `flush` combinator, which polls the sink until all data has been flushed.",N,N],[3,"SinkErrInto","","A sink combinator to change the error type of a sink.",N,N],[3,"SinkMapErr","","Sink for the `Sink::sink_map_err` combinator.",N,N],[3,"Send","","Future for the `Sink::send` combinator, which sends a value to a sink and then waits until the sink has fully flushed.",N,N],[3,"SendAll","","Future for the `Sink::send_all` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",N,N],[3,"With","","Sink for the `Sink::with` combinator, chaining a computation to run prior to pushing a value into the underlying sink.",N,N],[3,"WithFlatMap","","Sink for the `Sink::with_flat_map` combinator, chaining a computation that returns an iterator to run prior to pushing a value into the underlying sink.",N,N],[3,"Buffer","","Sink for the `Sink::buffer` combinator, which buffers up to some fixed number of values when the underlying sink is unable to accept them.",N,N],[4,"DrainError","","The error type for the [`Drain`] sink.",N,N],[5,"drain","","Create a sink that will just discard all items given to it.",N,[[],["drain"]]],[11,"into_any","","Convert this drain error into any type",33,[[["self"]],["t"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sinks.",34,N],[11,"get_ref","","Get a shared reference to the inner sink.",35,[[["self"]],["si"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",35,[[["self"]],["si"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",35,[[["self"]],["si"]]],[11,"get_ref","","Get a shared reference to the inner sink.",36,[[["self"]],["si"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",36,[[["self"]],["si"]]],[11,"get_pin_mut","","Get a pinned reference to the inner sink.",36,[[["pin"]],["pin"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",36,[[["self"]],["si"]]],[11,"get_ref","","Get a shared reference to the inner sink.",37,[[["self"]],["si"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",37,[[["self"]],["si"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",37,[[["self"]],["si"]]],[11,"get_ref","","Get a shared reference to the inner sink.",38,[[["self"]],["si"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",38,[[["self"]],["si"]]],[11,"get_pin_mut","","Get a pinned mutable reference to the inner sink.",38,[[["pin"]],["pin"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",38,[[["self"]],["si"]]],[11,"get_ref","","Get a shared reference to the inner sink.",39,[[["self"]],["si"]]],[8,"SinkExt","","An extension trait for `Sink`s that provides a variety of convenient combinator functions.",N,N],[11,"with","","Composes a function in front of the sink.",40,[[["self"],["f"]],["with"]]],[11,"with_flat_map","","Composes a function in front of the sink.",40,[[["self"],["f"]],["withflatmap"]]],[11,"sink_map_err","","Transforms the error returned by the sink.",40,[[["self"],["f"]],["sinkmaperr"]]],[11,"sink_err_into","","Map this sink's error to a different error type using the `Into` trait.",40,[[["self"]],["sinkerrinto"]]],[11,"buffer","","Adds a fixed-size buffer to the current sink.",40,[[["self"],["usize"]],["buffer"]]],[11,"close","","Close the sink.",40,[[["self"]],["close"]]],[11,"fanout","","Fanout items to multiple sinks.",40,[[["self"],["si"]],["fanout"]]],[11,"flush","","Flush the sync, processing all pending items.",40,[[["self"]],["flush"]]],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",40,N],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",40,[[["self"],["st"]],["sendall"]]],[11,"left_sink","","Wrap this sink in an `Either` sink, making it the left-hand variant of that `Either`.",40,[[["self"]],["either"]]],[11,"right_sink","","Wrap this stream in an `Either` stream, making it the right-hand variant of that `Either`.",40,[[["self"]],["either"]]],[11,"compat","","Wraps a [`Sink`] into a sink compatible with libraries using futures 0.1 `Sink`. Requires the `compat` feature to be enabled.",40,[[["self"]],["compat"]]],[0,"task","futures_util","Task notification",N,N],[3,"AtomicWaker","futures_util::task","A synchronization primitive for task wakeup.",N,N],[3,"LocalWakerRef","","A `LocalWaker` that is only valid for a given lifetime.",N,N],[5,"noop_local_waker","","Create a new `LocalWaker` referencing a singleton instance of [`NoopWake`].",N,[[],["localwaker"]]],[5,"noop_local_waker_ref","","Get a thread local reference to a `LocalWaker` referencing a singleton instance of [`NoopWake`].",N,[[],["localwaker"]]],[5,"local_waker_ref","","Creates a reference to a `LocalWaker` from a local `wake`.",N,[[["arc"]],["localwakerref"]]],[5,"local_waker_ref_from_nonlocal","","Creates a reference to a `LocalWaker` from a non-local `wake`.",N,[[["arc"]],["localwakerref"]]],[11,"new","","Create a new [`LocalWakerRef`] from a [`LocalWaker`].",41,[[["localwaker"]],["self"]]],[8,"SpawnExt","","Extension trait for `Spawn`.",N,N],[11,"spawn","","Spawns a task that polls the given future with output `()` to completion.",42,[[["self"],["fut"]],["result",["spawnerror"]]]],[11,"spawn_with_handle","","Spawns a task that polls the given future to completion and returns a future that resolves to the spawned future's output.",42,[[["self"],["fut"]],["result",["remotehandle","spawnerror"]]]],[11,"compat","","Wraps a [`Spawn`] and makes it usable as a futures 0.1 `Executor`. Requires the `compat` feature to enable.",42,[[["self"]],["compat"]]],[8,"LocalSpawnExt","","Extension trait for `LocalSpawn`.",N,N],[11,"spawn_local","","Spawns a task that polls the given future with output `()` to completion.",43,[[["self"],["fut"]],["result",["spawnerror"]]]],[11,"spawn_local_with_handle","","Spawns a task that polls the given future to completion and returns a future that resolves to the spawned future's output.",43,[[["self"],["fut"]],["result",["remotehandle","spawnerror"]]]],[0,"compat","futures_util","Futures 0.1 / 0.3 shims",N,N],[3,"Executor01As03","futures_util::compat","Converts a futures 0.1 `Executor` into a futures 0.3 `Spawn`.",N,N],[3,"Compat01As03","","Converts a futures 0.1 Future, Stream, AsyncRead, or AsyncWrite object to a futures 0.3-compatible version,",N,N],[3,"Compat","","Converts a futures 0.3 `TryFuture`, `TryStream` or `Sink` into a futures 0.1 `Future`, `Stream` or `Sink`.",N,N],[3,"TokioDefaultSpawner","","A spawner that delegates to `tokio`'s `DefaultExecutor`, will panic if used in the context of a task that is not running on `tokio`'s executor.",N,N],[11,"new","","Wraps a futures 0.1 Future, Stream, AsyncRead, or AsyncWrite object in a futures 0.3-compatible wrapper.",44,[[["t"]],["compat01as03"]]],[11,"into_inner","","Returns the inner item.",45,[[["self"]],["t"]]],[11,"new","","Creates a new [`Compat`].",45,[[["t"]],["compat"]]],[6,"Executor01Future","","A future that can run on a futures 0.1 `Executor`.",N,N],[8,"Executor01CompatExt","","Extension trait for futures 0.1 `Executor`.",N,N],[10,"compat","","Converts a futures 0.1 `Executor` into a futures 0.3 `Spawn`.",46,[[["self"]],["executor01as03"]]],[8,"Future01CompatExt","","Extension trait for futures 0.1 `Future`",N,N],[11,"compat","","Converts a futures 0.1 `Future<Item = T, Error = E>` into a futures 0.3 `Future<Output = Result<T, E>>`.",47,[[["self"]],["compat01as03"]]],[8,"Stream01CompatExt","","Extension trait for futures 0.1 `Stream`",N,N],[11,"compat","","Converts a futures 0.1 `Stream<Item = T, Error = E>` into a futures 0.3 `Stream<Item = Result<T, E>>`.",48,[[["self"]],["compat01as03"]]],[0,"io","futures_util","IO",N,N],[8,"AsyncRead","futures_util::io","Read bytes asynchronously.",N,N],[11,"initializer","","Determines if this `AsyncRead`er can work with buffers of uninitialized memory.",49,[[["self"]],["initializer"]]],[10,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",49,N],[11,"poll_vectored_read","","Attempt to read from the `AsyncRead` into `vec` using vectored IO operations.",49,N],[8,"AsyncWrite","","Write bytes asynchronously.",N,N],[10,"poll_write","","Attempt to write bytes from `buf` into the object.",50,N],[11,"poll_vectored_write","","Attempt to write bytes from `vec` into the object using vectored IO operations.",50,N],[10,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",50,[[["self"],["localwaker"]],["poll",["result"]]]],[10,"poll_close","","Attempt to close the object.",50,[[["self"],["localwaker"]],["poll",["result"]]]],[3,"IoVec","","A specialized byte slice type for performing vectored I/O operations.",N,N],[3,"AllowStdIo","","A simple wrapper type which allows types which implement only implement `std::io::Read` or `std::io::Write` to be used in contexts which expect an `AsyncRead` or `AsyncWrite`.",N,N],[3,"CopyInto","","A future which will copy all data from a reader into a writer.",N,N],[3,"Flush","","A future used to fully flush an I/O object.",N,N],[3,"Read","","A future which can be used to easily read available number of bytes to fill a buffer.",N,N],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",N,N],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",N,N],[3,"Close","","A future used to fully close an I/O object.",N,N],[3,"ReadHalf","","The readable half of an object returned from `AsyncRead::split`.",N,N],[3,"WriteHalf","","The writable half of an object returned from `AsyncRead::split`.",N,N],[3,"Window","","A owned window around an underlying buffer.",N,N],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",N,N],[11,"new","","Creates a new `AllowStdIo` from an existing IO object.",51,[[["t"]],["self"]]],[11,"get_ref","","Returns a reference to the contained IO object.",51,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the contained IO object.",51,[[["self"]],["t"]]],[11,"into_inner","","Consumes self and returns the contained IO object.",51,[[["self"]],["t"]]],[11,"new","","Creates a new window around the buffer `t` defaulting to the entire slice.",52,[[["t"]],["window"]]],[11,"get_ref","","Gets a shared reference to the underlying buffer inside of this `Window`.",52,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable reference to the underlying buffer inside of this `Window`.",52,[[["self"]],["t"]]],[11,"into_inner","","Consumes this `Window`, returning the underlying buffer.",52,[[["self"]],["t"]]],[11,"start","","Returns the starting index of this window into the underlying buffer `T`.",52,[[["self"]],["usize"]]],[11,"end","","Returns the end index of this window into the underlying buffer `T`.",52,[[["self"]],["usize"]]],[11,"set_start","","Changes the starting index of this window to the index specified.",52,[[["self"],["usize"]],["window"]]],[11,"set_end","","Changes the end index of this window to the index specified.",52,[[["self"],["usize"]],["window"]]],[8,"AsyncReadExt","","An extension trait which adds utility methods to `AsyncRead` types.",N,N],[11,"copy_into","","Creates a future which copies all the bytes from one object to another.",53,[[["self"],["w"]],["copyinto"]]],[11,"read","","Tries to read some bytes directly into the given `buf` in asynchronous manner, returning a future type.",53,N],[11,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if end of file (EOF) is hit sooner.",53,N],[11,"read_to_end","","Creates a future which will read all the bytes from this `AsyncRead`.",53,[[["self"],["vec"]],["readtoend"]]],[11,"split","","Helper method for splitting this read/write object into two halves.",53,N],[11,"compat","","Wraps an [`AsyncRead`] in a compatibility wrapper that allows it to be used as a futures 0.1 / tokio-io 0.1 `AsyncRead`. If the wrapped type implements [`AsyncWrite`] as well, the result will also implement the futures 0.1 / tokio 0.1 `AsyncWrite` trait.",53,[[["self"]],["compat"]]],[8,"AsyncWriteExt","","An extension trait which adds utility methods to `AsyncWrite` types.",N,N],[11,"flush","","Creates a future which will entirely flush this `AsyncWrite`.",54,[[["self"]],["flush"]]],[11,"close","","Creates a future which will entirely close this `AsyncWrite`.",54,[[["self"]],["close"]]],[11,"write_all","","Write data into this object.",54,N],[11,"compat_write","","Wraps an [`AsyncWrite`] in a compatibility wrapper that allows it to be used as a futures 0.1 / tokio-io 0.1 `AsyncWrite`. Requires the `io-compat` feature to enable.",54,[[["self"]],["compat"]]],[0,"lock","futures_util","Futures-powered synchronization primitives.",N,N],[3,"Mutex","futures_util::lock","A futures-aware mutex.",N,N],[3,"MutexLockFuture","","A future which resolves when the target mutex has been successfully acquired.",N,N],[3,"MutexGuard","","An RAII guard returned by the `lock` and `try_lock` methods. When this structure is dropped (falls out of scope), the lock will be unlocked.",N,N],[3,"BiLock","","A type of futures-powered synchronization primitive which is a mutex between two possible owners.",N,N],[3,"BiLockAcquire","","Future returned by `BiLock::lock` which will resolve when the lock is acquired.",N,N],[3,"BiLockGuard","","Returned RAII guard from the `poll_lock` method.",N,N],[3,"ReuniteError","","Error indicating two `BiLock<T>`s were not two halves of a whole, and thus could not be `reunite`d.",N,N],[12,"0","","",55,N],[12,"1","","",55,N],[11,"new","","Creates a new futures-aware mutex.",56,[[["t"]],["mutex"]]],[11,"try_lock","","Attempt to acquire the lock immediately.",56,[[["self"]],["option",["mutexguard"]]]],[11,"lock","","Acquire the lock asynchronously.",56,[[["self"]],["mutexlockfuture"]]],[11,"new","","Creates a new `BiLock` protecting the provided data.",57,N],[11,"poll_lock","","Attempt to acquire this lock, returning `Pending` if it can't be acquired.",57,[[["self"],["localwaker"]],["poll",["bilockguard"]]]],[11,"lock","","Perform a \"blocking lock\" of this lock, consuming this lock handle and returning a future to the acquired lock.",57,[[["self"]],["bilockacquire"]]],[11,"reunite","","Attempts to put the two \"halves\" of a `BiLock<T>` back together and recover the original value. Succeeds only if the two `BiLock<T>`s originated from the same call to `BiLock::new`.",57,[[["self"],["self"]],["result",["reuniteerror"]]]],[11,"as_pin_mut","","Get a mutable pinned reference to the locked value.",58,[[["self"]],["pin"]]],[14,"try_ready","futures_util","Extracts the successful type of a `Poll<Result<T, E>>`.",N,N],[14,"try_poll","","Extracts `Poll<T>` from `Poll<Result<T, E>>`.",N,N],[14,"ready","","Extracts the successful type of a `Poll<T>`.",N,N],[14,"poll","","A macro which returns the result of polling a future once within the current `async` context.",N,N],[14,"pending","","A macro which yields to the event loop once.",N,N],[14,"join","","Polls multiple futures simultaneously, returning a tuple of all results once complete.",N,N],[14,"try_join","","Polls multiple futures simultaneously, resolving to a [`Result`] containing either a tuple of the successful outputs or an error.",N,N],[14,"select","","Polls multiple futures and streams simultaneously, executing the branch for the future that finishes first. Futures passed to `select!` must be `Unpin` and implement `FusedFuture`. Futures and streams which are not already fused can be fused using the `.fuse()` method. Note, though, that fusing a future or stream directly in the call to `select!` will not be enough to prevent it from being polled after completion if the `select!` call is in a loop, so when `select!`ing in a loop, users should take care to `fuse()` outside of the loop.",N,N],[11,"from","futures_util::future","",59,[[["t"]],["t"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"try_poll","","",59,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"try_poll","","",60,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,N],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"try_poll","","",62,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"to_owned","","",63,[[["self"]],["t"]]],[11,"clone_into","","",63,N],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"try_poll","","",63,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"try_poll","","",64,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"try_poll_next","","",65,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"try_poll","","",66,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"try_poll_next","","",67,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"try_poll","","",72,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"try_poll","","",73,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"into","","",74,[[["self"]],["u"]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"get_type_id","","",74,[[["self"]],["typeid"]]],[11,"try_into","","",74,[[["self"]],["result"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"try_poll","","",74,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"into","","",75,[[["self"]],["u"]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"get_type_id","","",75,[[["self"]],["typeid"]]],[11,"try_into","","",75,[[["self"]],["result"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"try_poll","","",75,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_poll","","",1,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"into","","",76,[[["self"]],["u"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"get_type_id","","",76,[[["self"]],["typeid"]]],[11,"try_into","","",76,[[["self"]],["result"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"from","","",77,[[["t"]],["t"]]],[11,"into","","",77,[[["self"]],["u"]]],[11,"to_owned","","",77,[[["self"]],["t"]]],[11,"clone_into","","",77,N],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"get_type_id","","",77,[[["self"]],["typeid"]]],[11,"try_into","","",77,[[["self"]],["result"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"into","","",78,[[["self"]],["u"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"get_type_id","","",78,[[["self"]],["typeid"]]],[11,"try_into","","",78,[[["self"]],["result"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"try_poll","","",78,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"into","","",79,[[["self"]],["u"]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"get_type_id","","",79,[[["self"]],["typeid"]]],[11,"try_into","","",79,[[["self"]],["result"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_poll","","",3,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"into","","",80,[[["self"]],["u"]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"get_type_id","","",80,[[["self"]],["typeid"]]],[11,"try_into","","",80,[[["self"]],["result"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_poll","","",4,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","futures_util::try_future","",81,[[["t"]],["t"]]],[11,"into","","",81,[[["self"]],["u"]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"get_type_id","","",81,[[["self"]],["typeid"]]],[11,"try_into","","",81,[[["self"]],["result"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"try_poll","","",81,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"into","","",82,[[["self"]],["u"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"get_type_id","","",82,[[["self"]],["typeid"]]],[11,"try_into","","",82,[[["self"]],["result"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"try_poll","","",82,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",83,[[["t"]],["t"]]],[11,"into","","",83,[[["self"]],["u"]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"get_type_id","","",83,[[["self"]],["typeid"]]],[11,"try_into","","",83,[[["self"]],["result"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"from","","",84,[[["t"]],["t"]]],[11,"into","","",84,[[["self"]],["u"]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"get_type_id","","",84,[[["self"]],["typeid"]]],[11,"try_into","","",84,[[["self"]],["result"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"try_poll","","",84,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",85,[[["t"]],["t"]]],[11,"into","","",85,[[["self"]],["u"]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"get_type_id","","",85,[[["self"]],["typeid"]]],[11,"try_into","","",85,[[["self"]],["result"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"try_poll","","",85,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",86,[[["t"]],["t"]]],[11,"into","","",86,[[["self"]],["u"]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"get_type_id","","",86,[[["self"]],["typeid"]]],[11,"try_into","","",86,[[["self"]],["result"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"try_poll","","",86,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",87,[[["t"]],["t"]]],[11,"into","","",87,[[["self"]],["u"]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"get_type_id","","",87,[[["self"]],["typeid"]]],[11,"try_into","","",87,[[["self"]],["result"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"try_poll","","",87,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",88,[[["t"]],["t"]]],[11,"into","","",88,[[["self"]],["u"]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"get_type_id","","",88,[[["self"]],["typeid"]]],[11,"try_into","","",88,[[["self"]],["result"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"try_poll","","",88,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",89,[[["t"]],["t"]]],[11,"into","","",89,[[["self"]],["u"]]],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"get_type_id","","",89,[[["self"]],["typeid"]]],[11,"try_into","","",89,[[["self"]],["result"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"try_poll","","",89,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",90,[[["t"]],["t"]]],[11,"into","","",90,[[["self"]],["u"]]],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"get_type_id","","",90,[[["self"]],["typeid"]]],[11,"try_into","","",90,[[["self"]],["result"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"try_poll","","",90,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",91,[[["t"]],["t"]]],[11,"into","","",91,[[["self"]],["u"]]],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"get_type_id","","",91,[[["self"]],["typeid"]]],[11,"try_into","","",91,[[["self"]],["result"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"try_poll","","",91,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",92,[[["t"]],["t"]]],[11,"into","","",92,[[["self"]],["u"]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"get_type_id","","",92,[[["self"]],["typeid"]]],[11,"try_into","","",92,[[["self"]],["result"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"try_poll","","",92,[[["pin"],["localwaker"]],["poll"]]],[11,"from","futures_util::stream","",93,[[["t"]],["t"]]],[11,"into","","",93,[[["self"]],["u"]]],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"get_type_id","","",93,[[["self"]],["typeid"]]],[11,"try_into","","",93,[[["self"]],["result"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"try_poll_next","","",93,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",94,[[["t"]],["t"]]],[11,"into","","",94,[[["self"]],["u"]]],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"get_type_id","","",94,[[["self"]],["typeid"]]],[11,"try_into","","",94,[[["self"]],["result"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"try_poll_next","","",94,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",95,[[["t"]],["t"]]],[11,"into","","",95,[[["self"]],["u"]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"get_type_id","","",95,[[["self"]],["typeid"]]],[11,"try_into","","",95,[[["self"]],["result"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"try_poll_next","","",95,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",96,[[["t"]],["t"]]],[11,"into","","",96,[[["self"]],["u"]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"get_type_id","","",96,[[["self"]],["typeid"]]],[11,"try_into","","",96,[[["self"]],["result"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"try_poll","","",96,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",97,[[["t"]],["t"]]],[11,"into","","",97,[[["self"]],["u"]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"get_type_id","","",97,[[["self"]],["typeid"]]],[11,"try_into","","",97,[[["self"]],["result"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"try_poll_next","","",97,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_poll_next","","",8,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_poll_next","","",9,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_poll_next","","",10,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",98,[[["t"]],["t"]]],[11,"into","","",98,[[["self"]],["u"]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"get_type_id","","",98,[[["self"]],["typeid"]]],[11,"try_into","","",98,[[["self"]],["result"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"try_poll","","",98,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",99,[[["t"]],["t"]]],[11,"into","","",99,[[["self"]],["u"]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"get_type_id","","",99,[[["self"]],["typeid"]]],[11,"try_into","","",99,[[["self"]],["result"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"try_poll","","",99,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",100,[[["t"]],["t"]]],[11,"into","","",100,[[["self"]],["u"]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"get_type_id","","",100,[[["self"]],["typeid"]]],[11,"try_into","","",100,[[["self"]],["result"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_poll_next","","",11,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_poll_next","","",13,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_poll_next","","",14,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",101,[[["t"]],["t"]]],[11,"into","","",101,[[["self"]],["u"]]],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"get_type_id","","",101,[[["self"]],["typeid"]]],[11,"try_into","","",101,[[["self"]],["result"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"from","","",102,[[["t"]],["t"]]],[11,"into","","",102,[[["self"]],["u"]]],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"get_type_id","","",102,[[["self"]],["typeid"]]],[11,"try_into","","",102,[[["self"]],["result"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"try_poll","","",102,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",103,[[["t"]],["t"]]],[11,"into","","",103,[[["self"]],["u"]]],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"get_type_id","","",103,[[["self"]],["typeid"]]],[11,"try_into","","",103,[[["self"]],["result"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"try_poll_next","","",103,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_poll_next","","",15,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",104,[[["t"]],["t"]]],[11,"into","","",104,[[["self"]],["u"]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"get_type_id","","",104,[[["self"]],["typeid"]]],[11,"try_into","","",104,[[["self"]],["result"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"try_poll_next","","",104,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",105,[[["t"]],["t"]]],[11,"into","","",105,[[["self"]],["u"]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"get_type_id","","",105,[[["self"]],["typeid"]]],[11,"try_into","","",105,[[["self"]],["result"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"try_poll_next","","",105,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_poll_next","","",16,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_poll_next","","",17,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_poll_next","","",18,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_poll_next","","",19,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",106,[[["t"]],["t"]]],[11,"into","","",106,[[["self"]],["u"]]],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"get_type_id","","",106,[[["self"]],["typeid"]]],[11,"try_into","","",106,[[["self"]],["result"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"try_poll_next","","",106,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",107,[[["t"]],["t"]]],[11,"into","","",107,[[["self"]],["u"]]],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"get_type_id","","",107,[[["self"]],["typeid"]]],[11,"try_into","","",107,[[["self"]],["result"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"try_poll_next","","",107,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",108,[[["t"]],["t"]]],[11,"into","","",108,[[["self"]],["u"]]],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"get_type_id","","",108,[[["self"]],["typeid"]]],[11,"try_into","","",108,[[["self"]],["result"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_poll_next","","",20,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_poll_next","","",21,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",109,[[["t"]],["t"]]],[11,"into","","",109,[[["self"]],["u"]]],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"get_type_id","","",109,[[["self"]],["typeid"]]],[11,"try_into","","",109,[[["self"]],["result"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"try_poll_next","","",109,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"from","","",110,[[["t"]],["t"]]],[11,"into","","",110,[[["self"]],["u"]]],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"get_type_id","","",110,[[["self"]],["typeid"]]],[11,"try_into","","",110,[[["self"]],["result"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"from","","",111,[[["t"]],["t"]]],[11,"into","","",111,[[["self"]],["u"]]],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"get_type_id","","",111,[[["self"]],["typeid"]]],[11,"try_into","","",111,[[["self"]],["result"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_poll_next","","",23,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_poll_next","","",24,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_poll_next","","",25,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"from","futures_util::try_stream","",112,[[["t"]],["t"]]],[11,"into","","",112,[[["self"]],["u"]]],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"get_type_id","","",112,[[["self"]],["typeid"]]],[11,"try_into","","",112,[[["self"]],["result"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"try_poll_next","","",112,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_poll_next","","",28,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",113,[[["t"]],["t"]]],[11,"into","","",113,[[["self"]],["u"]]],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"get_type_id","","",113,[[["self"]],["typeid"]]],[11,"try_into","","",113,[[["self"]],["result"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"try_poll_next","","",113,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",114,[[["t"]],["t"]]],[11,"into","","",114,[[["self"]],["u"]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"get_type_id","","",114,[[["self"]],["typeid"]]],[11,"try_into","","",114,[[["self"]],["result"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"try_poll_next","","",114,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",115,[[["t"]],["t"]]],[11,"into","","",115,[[["self"]],["u"]]],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"get_type_id","","",115,[[["self"]],["typeid"]]],[11,"try_into","","",115,[[["self"]],["result"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"try_poll","","",115,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",116,[[["t"]],["t"]]],[11,"into","","",116,[[["self"]],["u"]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"get_type_id","","",116,[[["self"]],["typeid"]]],[11,"try_into","","",116,[[["self"]],["result"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"try_poll","","",116,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_poll_next","","",29,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",117,[[["t"]],["t"]]],[11,"into","","",117,[[["self"]],["u"]]],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"get_type_id","","",117,[[["self"]],["typeid"]]],[11,"try_into","","",117,[[["self"]],["result"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"try_poll","","",117,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",118,[[["t"]],["t"]]],[11,"into","","",118,[[["self"]],["u"]]],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"get_type_id","","",118,[[["self"]],["typeid"]]],[11,"try_into","","",118,[[["self"]],["result"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"try_poll","","",118,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_poll_next","","",30,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_poll_next","","",31,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",119,[[["t"]],["t"]]],[11,"into","","",119,[[["self"]],["u"]]],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"get_type_id","","",119,[[["self"]],["typeid"]]],[11,"try_into","","",119,[[["self"]],["result"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"try_poll","","",119,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",120,[[["t"]],["t"]]],[11,"into","","",120,[[["self"]],["u"]]],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"get_type_id","","",120,[[["self"]],["typeid"]]],[11,"try_into","","",120,[[["self"]],["result"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"try_poll","","",120,[[["pin"],["localwaker"]],["poll"]]],[11,"from","futures_util::sink","",121,[[["t"]],["t"]]],[11,"into","","",121,[[["self"]],["u"]]],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"get_type_id","","",121,[[["self"]],["typeid"]]],[11,"try_into","","",121,[[["self"]],["result"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"try_poll","","",121,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",122,[[["t"]],["t"]]],[11,"into","","",122,[[["self"]],["u"]]],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"get_type_id","","",122,[[["self"]],["typeid"]]],[11,"try_into","","",122,[[["self"]],["result"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"from","","",123,[[["t"]],["t"]]],[11,"into","","",123,[[["self"]],["u"]]],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"get_type_id","","",123,[[["self"]],["typeid"]]],[11,"try_into","","",123,[[["self"]],["result"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"try_poll","","",123,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"try_poll_next","","",35,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"try_poll_next","","",36,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",124,[[["t"]],["t"]]],[11,"into","","",124,[[["self"]],["u"]]],[11,"try_from","","",124,[[["u"]],["result"]]],[11,"borrow","","",124,[[["self"]],["t"]]],[11,"get_type_id","","",124,[[["self"]],["typeid"]]],[11,"try_into","","",124,[[["self"]],["result"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]],[11,"try_poll","","",124,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",125,[[["t"]],["t"]]],[11,"into","","",125,[[["self"]],["u"]]],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"get_type_id","","",125,[[["self"]],["typeid"]]],[11,"try_into","","",125,[[["self"]],["result"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"try_poll","","",125,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"try_poll_next","","",37,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"try_poll_next","","",38,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"try_poll_next","","",39,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"to_string","","",33,[[["self"]],["string"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"from","futures_util::task","",126,[[["t"]],["t"]]],[11,"into","","",126,[[["self"]],["u"]]],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"get_type_id","","",126,[[["self"]],["typeid"]]],[11,"try_into","","",126,[[["self"]],["result"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"from","futures_util::compat","",127,[[["t"]],["t"]]],[11,"into","","",127,[[["self"]],["u"]]],[11,"to_owned","","",127,[[["self"]],["t"]]],[11,"clone_into","","",127,N],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"get_type_id","","",127,[[["self"]],["typeid"]]],[11,"try_into","","",127,[[["self"]],["result"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"try_poll","","",44,[[["pin"],["localwaker"]],["poll"]]],[11,"try_poll_next","","",44,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"into_future","","",45,[[["self"]],["f"]]],[11,"from","","",128,[[["t"]],["t"]]],[11,"into","","",128,[[["self"]],["u"]]],[11,"to_owned","","",128,[[["self"]],["t"]]],[11,"clone_into","","",128,N],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"get_type_id","","",128,[[["self"]],["typeid"]]],[11,"try_into","","",128,[[["self"]],["result"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"borrow","futures_util::io","",129,[[["self"]],["t"]]],[11,"get_type_id","","",129,[[["self"]],["typeid"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,N],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"from","","",130,[[["t"]],["t"]]],[11,"into","","",130,[[["self"]],["u"]]],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"get_type_id","","",130,[[["self"]],["typeid"]]],[11,"try_into","","",130,[[["self"]],["result"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"try_poll","","",130,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",131,[[["t"]],["t"]]],[11,"into","","",131,[[["self"]],["u"]]],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"get_type_id","","",131,[[["self"]],["typeid"]]],[11,"try_into","","",131,[[["self"]],["result"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"try_poll","","",131,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",132,[[["t"]],["t"]]],[11,"into","","",132,[[["self"]],["u"]]],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"get_type_id","","",132,[[["self"]],["typeid"]]],[11,"try_into","","",132,[[["self"]],["result"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"try_poll","","",132,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",133,[[["t"]],["t"]]],[11,"into","","",133,[[["self"]],["u"]]],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"get_type_id","","",133,[[["self"]],["typeid"]]],[11,"try_into","","",133,[[["self"]],["result"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"try_poll","","",133,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",134,[[["t"]],["t"]]],[11,"into","","",134,[[["self"]],["u"]]],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"get_type_id","","",134,[[["self"]],["typeid"]]],[11,"try_into","","",134,[[["self"]],["result"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"try_poll","","",134,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",135,[[["t"]],["t"]]],[11,"into","","",135,[[["self"]],["u"]]],[11,"try_from","","",135,[[["u"]],["result"]]],[11,"borrow","","",135,[[["self"]],["t"]]],[11,"get_type_id","","",135,[[["self"]],["typeid"]]],[11,"try_into","","",135,[[["self"]],["result"]]],[11,"borrow_mut","","",135,[[["self"]],["t"]]],[11,"try_poll","","",135,[[["pin"],["localwaker"]],["poll"]]],[11,"from","","",136,[[["t"]],["t"]]],[11,"into","","",136,[[["self"]],["u"]]],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"get_type_id","","",136,[[["self"]],["typeid"]]],[11,"try_into","","",136,[[["self"]],["result"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"from","","",137,[[["t"]],["t"]]],[11,"into","","",137,[[["self"]],["u"]]],[11,"try_from","","",137,[[["u"]],["result"]]],[11,"borrow","","",137,[[["self"]],["t"]]],[11,"get_type_id","","",137,[[["self"]],["typeid"]]],[11,"try_into","","",137,[[["self"]],["result"]]],[11,"borrow_mut","","",137,[[["self"]],["t"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"from","","",138,[[["t"]],["t"]]],[11,"into","","",138,[[["self"]],["u"]]],[11,"try_from","","",138,[[["u"]],["result"]]],[11,"borrow","","",138,[[["self"]],["t"]]],[11,"get_type_id","","",138,[[["self"]],["typeid"]]],[11,"try_into","","",138,[[["self"]],["result"]]],[11,"borrow_mut","","",138,[[["self"]],["t"]]],[11,"try_poll","","",138,[[["pin"],["localwaker"]],["poll"]]],[11,"from","futures_util::lock","",56,[[["t"]],["t"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"from","","",139,[[["t"]],["t"]]],[11,"into","","",139,[[["self"]],["u"]]],[11,"try_from","","",139,[[["u"]],["result"]]],[11,"borrow","","",139,[[["self"]],["t"]]],[11,"get_type_id","","",139,[[["self"]],["typeid"]]],[11,"try_into","","",139,[[["self"]],["result"]]],[11,"borrow_mut","","",139,[[["self"]],["t"]]],[11,"from","","",140,[[["t"]],["t"]]],[11,"into","","",140,[[["self"]],["u"]]],[11,"try_from","","",140,[[["u"]],["result"]]],[11,"borrow","","",140,[[["self"]],["t"]]],[11,"get_type_id","","",140,[[["self"]],["typeid"]]],[11,"try_into","","",140,[[["self"]],["result"]]],[11,"borrow_mut","","",140,[[["self"]],["t"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"from","","",141,[[["t"]],["t"]]],[11,"into","","",141,[[["self"]],["u"]]],[11,"try_from","","",141,[[["u"]],["result"]]],[11,"borrow","","",141,[[["self"]],["t"]]],[11,"get_type_id","","",141,[[["self"]],["typeid"]]],[11,"try_into","","",141,[[["self"]],["result"]]],[11,"borrow_mut","","",141,[[["self"]],["t"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"to_string","","",55,[[["self"]],["string"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"fmt","futures_util::task","",126,[[["self"],["formatter"]],["result",["error"]]]],[11,"default","","",126,[[],["atomicwaker"]]],[11,"deref","futures_util::io","",129,N],[11,"deref_mut","","",129,N],[11,"eq","futures_util::future","",77,[[["self"],["aborted"]],["bool"]]],[11,"eq","futures_util::io","",51,[[["self"],["allowstdio"]],["bool"]]],[11,"ne","","",51,[[["self"],["allowstdio"]],["bool"]]],[11,"default","futures_util::stream","",23,[[],["futuresordered"]]],[11,"default","","",24,[[],["futuresunordered"]]],[11,"clone","futures_util::future","",61,[[["self"]],["optionfuture"]]],[11,"clone","","",63,[[["self"]],["ready"]]],[11,"clone","","",1,[[["self"]],["abortable"]]],[11,"clone","","",2,[[["self"]],["aborthandle"]]],[11,"clone","","",77,[[["self"]],["aborted"]]],[11,"clone","","",4,[[["self"]],["self"]]],[11,"clone","futures_util::compat","",127,[[["self"]],["executor01as03"]]],[11,"clone","","",45,[[["self"]],["compat"]]],[11,"clone","","",128,[[["self"]],["tokiodefaultspawner"]]],[11,"clone","futures_util::io","",51,[[["self"]],["allowstdio"]]],[11,"from","futures_util::future","",61,[[["option"]],["self"]]],[11,"drop","","",4,[[["self"]]]],[11,"drop","futures_util::stream","",24,[[["self"]]]],[11,"drop","futures_util::lock","",139,[[["self"]]]],[11,"drop","","",140,[[["self"]]]],[11,"drop","","",58,[[["self"]]]],[11,"cmp","futures_util::io","",51,[[["self"],["allowstdio"]],["ordering"]]],[11,"as_mut","","",52,N],[11,"partial_cmp","","",51,[[["self"],["allowstdio"]],["option",["ordering"]]]],[11,"lt","","",51,[[["self"],["allowstdio"]],["bool"]]],[11,"le","","",51,[[["self"],["allowstdio"]],["bool"]]],[11,"gt","","",51,[[["self"],["allowstdio"]],["bool"]]],[11,"ge","","",51,[[["self"],["allowstdio"]],["bool"]]],[11,"as_ref","","",52,N],[11,"fmt","futures_util::stream","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures_util::sink","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures_util::lock","",55,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures_util::future","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures_util::try_future","",81,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures_util::stream","",93,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",96,[[["self"],["formatter"]],["fmtresult"]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",99,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",100,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",101,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",102,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",103,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",104,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",107,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",108,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",109,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",111,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures_util::try_stream","",112,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",115,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",116,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures_util::sink","",121,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",122,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["fmtresult"]]],[11,"fmt","","",123,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures_util::task","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures_util::compat","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures_util::io","",51,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",130,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",131,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",132,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",133,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",134,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",135,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",137,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",138,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures_util::lock","",56,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",139,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",140,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",141,[[["self"],["formatter"]],["result"]]],[11,"hash","futures_util::io","",51,N],[11,"deref","futures_util::task","",41,[[["self"]],["localwaker"]]],[11,"deref","futures_util::lock","",140,[[["self"]],["t"]]],[11,"deref","","",58,[[["self"]],["t"]]],[11,"deref_mut","","",140,[[["self"]],["t"]]],[11,"deref_mut","","",58,[[["self"]],["t"]]],[11,"from_iter","futures_util::future","",80,[[["t"]],["self"]]],[11,"from_iter","futures_util::stream","",23,[[["t"]],["self"]]],[11,"from_iter","","",24,[[["i"]],["self"]]],[11,"read","futures_util::compat","",45,N],[11,"read","futures_util::io","",51,N],[11,"read_to_end","","",51,[[["self"],["vec"]],["result",["usize"]]]],[11,"read_to_string","","",51,[[["self"],["string"]],["result",["usize"]]]],[11,"read_exact","","",51,N],[11,"write","futures_util::compat","",45,N],[11,"flush","","",45,[[["self"]],["result"]]],[11,"write","futures_util::io","",51,N],[11,"flush","","",51,[[["self"]],["result"]]],[11,"write_all","","",51,N],[11,"write_fmt","","",51,[[["self"],["arguments"]],["result"]]],[11,"poll","futures_util::future","",59,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",60,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",0,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",61,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",62,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",63,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",64,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",66,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",68,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",69,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",70,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",71,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",72,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",73,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",74,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",75,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"poll","","",1,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",78,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",3,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",79,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",80,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",4,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","futures_util::try_future","",81,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",82,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",84,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",85,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",86,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",87,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",88,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",89,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",90,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",91,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",92,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","futures_util::stream","",96,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",98,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",99,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",100,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",12,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",101,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",102,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",110,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",111,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","futures_util::try_stream","",115,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",116,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",117,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",118,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",119,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",120,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","futures_util::sink","",121,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",123,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",124,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",125,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","futures_util::compat","",44,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","futures_util::io","",130,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",131,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",132,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",133,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",134,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",135,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",138,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"poll","futures_util::lock","",139,[[["pin"],["localwaker"]],["poll"]]],[11,"poll","","",141,[[["pin"],["localwaker"]],["poll"]]],[11,"description","futures_util::stream","",7,[[["self"]],["str"]]],[11,"description","futures_util::lock","",55,[[["self"]],["str"]]],[11,"is_terminated","futures_util::future","",59,[[["self"]],["bool"]]],[11,"is_terminated","","",60,[[["self"]],["bool"]]],[11,"is_terminated","","",0,[[["self"]],["bool"]]],[11,"is_terminated","","",63,[[["self"]],["bool"]]],[11,"is_terminated","","",64,[[["self"]],["bool"]]],[11,"is_terminated","","",66,[[["self"]],["bool"]]],[11,"is_terminated","","",72,[[["self"]],["bool"]]],[11,"is_terminated","","",73,[[["self"]],["bool"]]],[11,"is_terminated","","",74,[[["self"]],["bool"]]],[11,"is_terminated","","",75,[[["self"]],["bool"]]],[11,"is_terminated","","",4,[[["self"]],["bool"]]],[11,"is_terminated","futures_util::try_future","",81,[[["self"]],["bool"]]],[11,"is_terminated","","",82,[[["self"]],["bool"]]],[11,"is_terminated","","",88,[[["self"]],["bool"]]],[11,"is_terminated","","",89,[[["self"]],["bool"]]],[11,"is_terminated","","",90,[[["self"]],["bool"]]],[11,"is_terminated","","",91,[[["self"]],["bool"]]],[11,"is_terminated","","",92,[[["self"]],["bool"]]],[11,"is_terminated","futures_util::stream","",98,[[["self"]],["bool"]]],[11,"is_terminated","","",99,[[["self"]],["bool"]]],[11,"is_terminated","","",100,[[["self"]],["bool"]]],[11,"is_terminated","","",12,[[["self"]],["bool"]]],[11,"is_terminated","","",101,[[["self"]],["bool"]]],[11,"is_terminated","","",102,[[["self"]],["bool"]]],[11,"is_terminated","","",110,[[["self"]],["bool"]]],[11,"is_terminated","","",111,[[["self"]],["bool"]]],[11,"is_terminated","futures_util::try_stream","",115,[[["self"]],["bool"]]],[11,"is_terminated","","",118,[[["self"]],["bool"]]],[11,"is_terminated","","",119,[[["self"]],["bool"]]],[11,"is_terminated","","",120,[[["self"]],["bool"]]],[11,"is_terminated","futures_util::lock","",139,[[["self"]],["bool"]]],[11,"poll_next","futures_util::future","",65,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",67,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","futures_util::stream","",93,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",94,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",95,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",97,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",8,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",9,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",10,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",11,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",13,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",14,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",103,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",15,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",104,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",105,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",16,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",17,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",18,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",19,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",106,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",107,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",108,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",20,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",21,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",109,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",22,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",23,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",24,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",25,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","futures_util::try_stream","",112,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",28,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",113,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",114,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",29,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",30,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",31,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","futures_util::sink","",35,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",36,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",37,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",38,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","","",39,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"poll_next","futures_util::compat","",44,[[["pin"],["localwaker"]],["poll",["option"]]]],[11,"is_terminated","futures_util::future","",65,[[["self"]],["bool"]]],[11,"is_terminated","futures_util::stream","",95,[[["self"]],["bool"]]],[11,"is_terminated","","",8,[[["self"]],["bool"]]],[11,"is_terminated","","",9,[[["self"]],["bool"]]],[11,"is_terminated","","",10,[[["self"]],["bool"]]],[11,"is_terminated","","",11,[[["self"]],["bool"]]],[11,"is_terminated","","",13,[[["self"]],["bool"]]],[11,"is_terminated","","",14,[[["self"]],["bool"]]],[11,"is_terminated","","",15,[[["self"]],["bool"]]],[11,"is_terminated","","",105,[[["self"]],["bool"]]],[11,"is_terminated","","",16,[[["self"]],["bool"]]],[11,"is_terminated","","",17,[[["self"]],["bool"]]],[11,"is_terminated","","",106,[[["self"]],["bool"]]],[11,"is_terminated","","",107,[[["self"]],["bool"]]],[11,"is_terminated","","",108,[[["self"]],["bool"]]],[11,"is_terminated","","",20,[[["self"]],["bool"]]],[11,"is_terminated","","",24,[[["self"]],["bool"]]],[11,"is_terminated","futures_util::try_stream","",112,[[["self"]],["bool"]]],[11,"is_terminated","","",28,[[["self"]],["bool"]]],[11,"is_terminated","","",113,[[["self"]],["bool"]]],[11,"is_terminated","","",114,[[["self"]],["bool"]]],[11,"spawn_obj","futures_util::stream","",24,[[["self"],["futureobj"]],["result",["spawnerror"]]]],[11,"spawn_obj","futures_util::compat","",127,[[["self"],["futureobj"]],["result",["spawnerror03"]]]],[11,"spawn_obj","","",128,[[["self"],["futureobj"]],["result",["spawnerror"]]]],[11,"status","","",128,[[["self"]],["result",["spawnerror"]]]],[11,"spawn_local_obj","futures_util::stream","",24,[[["self"],["localfutureobj"]],["result",["spawnerror"]]]],[11,"poll_ready","futures_util::try_future","",83,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"start_send","","",83,N],[11,"poll_flush","","",83,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"poll_close","","",83,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"poll_ready","futures_util::stream","",11,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"start_send","","",11,N],[11,"poll_flush","","",11,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"poll_close","","",11,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"poll_ready","","",20,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"start_send","","",20,N],[11,"poll_flush","","",20,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"poll_close","","",20,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"poll_ready","","",21,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"start_send","","",21,N],[11,"poll_flush","","",21,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"poll_close","","",21,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"poll_ready","","",26,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"start_send","","",26,N],[11,"poll_flush","","",26,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"poll_close","","",26,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"poll_ready","futures_util::sink","",122,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"start_send","","",122,N],[11,"poll_flush","","",122,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"poll_close","","",122,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"poll_ready","","",34,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"start_send","","",34,N],[11,"poll_flush","","",34,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"poll_close","","",34,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"poll_ready","","",35,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"start_send","","",35,N],[11,"poll_flush","","",35,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"poll_close","","",35,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"poll_ready","","",36,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"start_send","","",36,N],[11,"poll_flush","","",36,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"poll_close","","",36,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"poll_ready","","",37,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"start_send","","",37,N],[11,"poll_flush","","",37,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"poll_close","","",37,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"poll_ready","","",38,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"start_send","","",38,N],[11,"poll_flush","","",38,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"poll_close","","",38,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"poll_ready","","",39,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"start_send","","",39,N],[11,"poll_flush","","",39,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"poll_close","","",39,[[["pin"],["localwaker"]],["poll",["result"]]]],[11,"poll","futures_util::compat","",45,[[["self"]],["poll01"]]],[11,"poll","","",45,[[["self"]],["poll01",["option"]]]],[11,"execute","","",45,[[["self"],["fut"]],["result",["executeerror01"]]]],[11,"start_send","","",45,N],[11,"poll_complete","","",45,[[["self"]],["poll01"]]],[11,"close","","",45,[[["self"]],["poll01"]]],[11,"initializer","","",44,[[["self"]],["initializer"]]],[11,"poll_read","","",44,N],[11,"poll_read","futures_util::io","",51,N],[11,"poll_read","","",136,N],[11,"poll_vectored_read","","",136,N],[11,"poll_write","futures_util::compat","",44,N],[11,"poll_flush","","",44,[[["self"],["localwaker"]],["poll",["result"]]]],[11,"poll_close","","",44,[[["self"],["localwaker"]],["poll",["result"]]]],[11,"poll_write","futures_util::io","",51,N],[11,"poll_flush","","",51,[[["self"],["localwaker"]],["poll",["result"]]]],[11,"poll_close","","",51,[[["self"],["localwaker"]],["poll",["result"]]]],[11,"poll_write","","",137,N],[11,"poll_vectored_write","","",137,N],[11,"poll_flush","","",137,[[["self"],["localwaker"]],["poll",["result"]]]],[11,"poll_close","","",137,[[["self"],["localwaker"]],["poll",["result"]]]],[11,"prepare_uninitialized_buffer","futures_util::compat","",45,N],[11,"shutdown","","",45,[[["self"]],["result",["async01"]]]],[11,"new","futures_util::task","Create an `AtomicWaker`.",126,[[],["atomicwaker"]]],[11,"register","","Registers the waker to be notified on calls to `wake`.",126,N],[11,"wake","","Calls `wake` on the last `Waker` passed to `register`.",126,N],[11,"take","","Returns the last `Waker` passed to `register`, so that the user can wake it.",126,[[["self"]],["option",["waker"]]]],[11,"spawn","","Spawns a task that polls the given future with output `()` to completion.",42,[[["self"],["fut"]],["result",["spawnerror"]]]],[11,"spawn_with_handle","","Spawns a task that polls the given future to completion and returns a future that resolves to the spawned future's output.",42,[[["self"],["fut"]],["result",["remotehandle","spawnerror"]]]],[11,"compat","","Wraps a [`Spawn`] and makes it usable as a futures 0.1 `Executor`. Requires the `compat` feature to enable.",42,[[["self"]],["compat"]]],[11,"spawn_local","","Spawns a task that polls the given future with output `()` to completion.",43,[[["self"],["fut"]],["result",["spawnerror"]]]],[11,"spawn_local_with_handle","","Spawns a task that polls the given future to completion and returns a future that resolves to the spawned future's output.",43,[[["self"],["fut"]],["result",["remotehandle","spawnerror"]]]],[11,"compat","futures_util::compat","Converts a futures 0.1 `Future<Item = T, Error = E>` into a futures 0.3 `Future<Output = Result<T, E>>`.",47,[[["self"]],["compat01as03"]]],[11,"compat","","Converts a futures 0.1 `Stream<Item = T, Error = E>` into a futures 0.3 `Stream<Item = Result<T, E>>`.",48,[[["self"]],["compat01as03"]]],[11,"from_bytes","futures_util::io","",129,N],[11,"from_bytes_mut","","",129,N]],"paths":[[4,"MaybeDone"],[3,"Abortable"],[3,"AbortHandle"],[3,"RemoteHandle"],[3,"Shared"],[8,"FutureExt"],[8,"TryFutureExt"],[3,"ReuniteError"],[3,"Filter"],[3,"FilterMap"],[3,"Flatten"],[3,"Fuse"],[3,"StreamFuture"],[3,"Inspect"],[3,"Map"],[3,"Peekable"],[3,"Skip"],[3,"SkipWhile"],[3,"Take"],[3,"TakeWhile"],[3,"BufferUnordered"],[3,"Buffered"],[3,"Chunks"],[3,"FuturesOrdered"],[3,"FuturesUnordered"],[3,"SplitStream"],[3,"SplitSink"],[8,"StreamExt"],[3,"IntoStream"],[3,"TryFilterMap"],[3,"TrySkipWhile"],[3,"TryBufferUnordered"],[8,"TryStreamExt"],[4,"DrainError"],[3,"Fanout"],[3,"SinkErrInto"],[3,"SinkMapErr"],[3,"With"],[3,"WithFlatMap"],[3,"Buffer"],[8,"SinkExt"],[3,"LocalWakerRef"],[8,"SpawnExt"],[8,"LocalSpawnExt"],[3,"Compat01As03"],[3,"Compat"],[8,"Executor01CompatExt"],[8,"Future01CompatExt"],[8,"Stream01CompatExt"],[8,"AsyncRead"],[8,"AsyncWrite"],[3,"AllowStdIo"],[3,"Window"],[8,"AsyncReadExt"],[8,"AsyncWriteExt"],[3,"ReuniteError"],[3,"Mutex"],[3,"BiLock"],[3,"BiLockGuard"],[3,"Empty"],[3,"Lazy"],[3,"OptionFuture"],[3,"PollFn"],[3,"Ready"],[3,"Flatten"],[3,"FlattenStream"],[3,"Fuse"],[3,"IntoStream"],[3,"Join"],[3,"Join3"],[3,"Join4"],[3,"Join5"],[3,"Map"],[3,"Then"],[3,"Inspect"],[3,"UnitError"],[3,"AbortRegistration"],[3,"Aborted"],[3,"CatchUnwind"],[3,"Remote"],[3,"JoinAll"],[3,"AndThen"],[3,"ErrInto"],[3,"FlattenSink"],[3,"TryJoin"],[3,"TryJoin3"],[3,"TryJoin4"],[3,"TryJoin5"],[3,"IntoFuture"],[3,"MapErr"],[3,"MapOk"],[3,"OrElse"],[3,"UnwrapOrElse"],[3,"Iter"],[3,"Repeat"],[3,"Chain"],[3,"Concat"],[3,"Empty"],[3,"Fold"],[3,"Forward"],[3,"ForEach"],[3,"Next"],[3,"SelectNextSome"],[3,"Once"],[3,"PollFn"],[3,"Select"],[3,"Then"],[3,"Unfold"],[3,"Zip"],[3,"CatchUnwind"],[3,"Collect"],[3,"ForEachConcurrent"],[3,"ErrInto"],[3,"MapOk"],[3,"MapErr"],[3,"TryNext"],[3,"TryForEach"],[3,"TryConcat"],[3,"TryFold"],[3,"TryCollect"],[3,"TryForEachConcurrent"],[3,"Close"],[3,"Drain"],[3,"Flush"],[3,"Send"],[3,"SendAll"],[3,"AtomicWaker"],[3,"Executor01As03"],[3,"TokioDefaultSpawner"],[3,"IoVec"],[3,"CopyInto"],[3,"Flush"],[3,"Read"],[3,"ReadExact"],[3,"ReadToEnd"],[3,"Close"],[3,"ReadHalf"],[3,"WriteHalf"],[3,"WriteAll"],[3,"MutexLockFuture"],[3,"MutexGuard"],[3,"BiLockAcquire"]]};
initSearch(searchIndex);
